[{"/Users/appleapple/Downloads/loop/src/index.tsx":"1","/Users/appleapple/Downloads/loop/src/serviceWorker.ts":"2","/Users/appleapple/Downloads/loop/src/App.tsx":"3","/Users/appleapple/Downloads/loop/src/router-paths.ts":"4","/Users/appleapple/Downloads/loop/src/layouts/LoaderScreen.tsx":"5","/Users/appleapple/Downloads/loop/src/routes/home/SignIn.tsx":"6","/Users/appleapple/Downloads/loop/src/routes/home/Home.tsx":"7","/Users/appleapple/Downloads/loop/src/routes/home/SignUp.tsx":"8","/Users/appleapple/Downloads/loop/src/routes/home/Purchase.tsx":"9","/Users/appleapple/Downloads/loop/src/routes/home/Plan.tsx":"10","/Users/appleapple/Downloads/loop/src/routes/home/PurchaseSuccess.tsx":"11","/Users/appleapple/Downloads/loop/src/routes/home/HowItWork.tsx":"12","/Users/appleapple/Downloads/loop/src/routes/home/Subscription.tsx":"13","/Users/appleapple/Downloads/loop/src/routes/home/BlogDetail.tsx":"14","/Users/appleapple/Downloads/loop/src/routes/home/BlogList.tsx":"15","/Users/appleapple/Downloads/loop/src/routes/discovery/Discovery.tsx":"16","/Users/appleapple/Downloads/loop/src/routes/hubs/Hub.tsx":"17","/Users/appleapple/Downloads/loop/src/store/index.ts":"18","/Users/appleapple/Downloads/loop/src/utils/nav.ts":"19","/Users/appleapple/Downloads/loop/src/features/dashboard/feeling_random/FeelingRandom.tsx":"20","/Users/appleapple/Downloads/loop/src/features/dashboard/view_profile/ViewProfile.tsx":"21","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/privacy_policy/PrivacyPolicy.tsx":"22","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/terms_condition/TermsCondition.tsx":"23","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/project/Project.tsx":"24","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/mynetwork_page/MyNetworkPage.tsx":"25","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/create_project/CreateProject.tsx":"26","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/studio_page/StudioPage.tsx":"27","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/edit-profile/EditProfile.tsx":"28","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/home_page/HomePage.tsx":"29","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/view_profile/ViewProfile.tsx":"30","/Users/appleapple/Downloads/loop/src/features/dashboard/common/mobile_footer/MobileFooter.tsx":"31","/Users/appleapple/Downloads/loop/src/features/dashboard/common/header_dashboard/HeaderDashboard.tsx":"32","/Users/appleapple/Downloads/loop/src/features/dashboard/common/side_bar/SideBar.tsx":"33","/Users/appleapple/Downloads/loop/src/features/dashboard/common/your_network/YourNetwork.tsx":"34","/Users/appleapple/Downloads/loop/src/features/dashboard/common/footer_dahboard/FooterDashboard.tsx":"35","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/location/Location.tsx":"36","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/trending/Trending.tsx":"37","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/recently_joined_page/RecentlyJoined.tsx":"38","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/recommended_page/Recommended.tsx":"39","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/expertise_page/Expertise.tsx":"40","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/genre_page/Genre.tsx":"41","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/home_page/HomePage.tsx":"42","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/collaborators_chat/CollaboratorsChat.tsx":"43","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/virtual_sessions/VirtualSessions.tsx":"44","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/terms_service/TermService.tsx":"45","/Users/appleapple/Downloads/loop/src/utils/Constant.ts":"46","/Users/appleapple/Downloads/loop/src/layouts/Main.tsx":"47","/Users/appleapple/Downloads/loop/src/store/root-reducer.ts":"48","/Users/appleapple/Downloads/loop/src/features/home/subscription/Subscription.tsx":"49","/Users/appleapple/Downloads/loop/src/features/home/blog_list/BlogList.tsx":"50","/Users/appleapple/Downloads/loop/src/features/home/blog-detail/BlogDetail.tsx":"51","/Users/appleapple/Downloads/loop/src/features/home/how_it_work/HowItWork.tsx":"52","/Users/appleapple/Downloads/loop/src/features/home/auth/PurchaseSuccess.tsx":"53","/Users/appleapple/Downloads/loop/src/features/home/auth/Plans.tsx":"54","/Users/appleapple/Downloads/loop/src/features/home/auth/SignUp.tsx":"55","/Users/appleapple/Downloads/loop/src/features/home/auth/Purchase.tsx":"56","/Users/appleapple/Downloads/loop/src/features/home/auth/SignIn.tsx":"57","/Users/appleapple/Downloads/loop/src/features/home/home/Home.tsx":"58","/Users/appleapple/Downloads/loop/src/store/utils.ts":"59","/Users/appleapple/Downloads/loop/src/redux/discovery/action.ts":"60","/Users/appleapple/Downloads/loop/src/redux/network/action.ts":"61","/Users/appleapple/Downloads/loop/src/redux/master-data/action.ts":"62","/Users/appleapple/Downloads/loop/src/redux/user/action.ts":"63","/Users/appleapple/Downloads/loop/src/services/voximplant-service/messenger.service.ts":"64","/Users/appleapple/Downloads/loop/src/features/dashboard/common/list_card/ListCard.tsx":"65","/Users/appleapple/Downloads/loop/src/redux/index.ts":"66","/Users/appleapple/Downloads/loop/src/utils/Validators.ts":"67","/Users/appleapple/Downloads/loop/src/layouts/header/HomeHeader.tsx":"68","/Users/appleapple/Downloads/loop/src/layouts/header/LoginHeader.tsx":"69","/Users/appleapple/Downloads/loop/src/redux/home/action.ts":"70","/Users/appleapple/Downloads/loop/src/redux/auth/action.ts":"71","/Users/appleapple/Downloads/loop/src/layouts/contact_footer/ContactFooter.tsx":"72","/Users/appleapple/Downloads/loop/src/layouts/auth_footer/AuthFooter.tsx":"73","/Users/appleapple/Downloads/loop/src/redux/user/types.ts":"74","/Users/appleapple/Downloads/loop/src/utils/Util.ts":"75","/Users/appleapple/Downloads/loop/src/services/api-service/api.ts":"76","/Users/appleapple/Downloads/loop/src/services/api-service/api-path.ts":"77","/Users/appleapple/Downloads/loop/src/redux/network/reducer.ts":"78","/Users/appleapple/Downloads/loop/src/redux/master-data/types.ts":"79","/Users/appleapple/Downloads/loop/src/redux/master-data/reducer.ts":"80","/Users/appleapple/Downloads/loop/src/redux/home/reducer.ts":"81","/Users/appleapple/Downloads/loop/src/redux/discovery/reducer.ts":"82","/Users/appleapple/Downloads/loop/src/redux/discovery/types.ts":"83","/Users/appleapple/Downloads/loop/src/redux/auth/reducer.ts":"84","/Users/appleapple/Downloads/loop/src/redux/network/types.ts":"85","/Users/appleapple/Downloads/loop/src/redux/how-it-work/reducer.ts":"86","/Users/appleapple/Downloads/loop/src/redux/user/reducer.ts":"87","/Users/appleapple/Downloads/loop/src/redux/subscription/reducer.ts":"88","/Users/appleapple/Downloads/loop/src/redux/project/reducer.ts":"89","/Users/appleapple/Downloads/loop/src/redux/home/types.ts":"90","/Users/appleapple/Downloads/loop/src/services/voximplant-service/vox.service.ts":"91","/Users/appleapple/Downloads/loop/src/redux/auth/types.ts":"92","/Users/appleapple/Downloads/loop/src/redux/how-it-work/types.ts":"93","/Users/appleapple/Downloads/loop/src/redux/project/types.ts":"94","/Users/appleapple/Downloads/loop/src/redux/subscription/types.ts":"95","/Users/appleapple/Downloads/loop/src/config/Config.ts":"96","/Users/appleapple/Downloads/loop/src/redux/how-it-work/action.ts":"97","/Users/appleapple/Downloads/loop/src/redux/subscription/action.ts":"98","/Users/appleapple/Downloads/loop/src/utils/Eums.ts":"99","/Users/appleapple/Downloads/loop/src/redux/project/action.ts":"100","/Users/appleapple/Downloads/loop/src/utils/models/user/request.model.ts":"101","/Users/appleapple/Downloads/loop/src/features/dashboard/common/notification/Notification.tsx":"102","/Users/appleapple/Downloads/loop/src/features/dashboard/common/chat/Chat.tsx":"103","/Users/appleapple/Downloads/loop/src/features/dashboard/common/project-table/ProjectTable.tsx":"104","/Users/appleapple/Downloads/loop/src/features/dashboard/common/add_collaborators/AddCollaborators.tsx":"105","/Users/appleapple/Downloads/loop/src/features/dashboard/common/upload_files/UploadFiles.tsx":"106","/Users/appleapple/Downloads/loop/src/features/dashboard/common/upload_track/UploadTrack.tsx":"107"},{"size":494,"mtime":1610884451696,"results":"108","hashOfConfig":"109"},{"size":5201,"mtime":1572648920000,"results":"110","hashOfConfig":"109"},{"size":2618,"mtime":1608998976000,"results":"111","hashOfConfig":"109"},{"size":843,"mtime":1601466618000,"results":"112","hashOfConfig":"109"},{"size":1036,"mtime":1608565970000,"results":"113","hashOfConfig":"109"},{"size":393,"mtime":1597421306000,"results":"114","hashOfConfig":"109"},{"size":408,"mtime":1601538844000,"results":"115","hashOfConfig":"109"},{"size":435,"mtime":1597421306000,"results":"116","hashOfConfig":"109"},{"size":283,"mtime":1597421306000,"results":"117","hashOfConfig":"109"},{"size":272,"mtime":1597421306000,"results":"118","hashOfConfig":"109"},{"size":346,"mtime":1597421306000,"results":"119","hashOfConfig":"109"},{"size":293,"mtime":1597421306000,"results":"120","hashOfConfig":"109"},{"size":302,"mtime":1597421306000,"results":"121","hashOfConfig":"109"},{"size":295,"mtime":1597421306000,"results":"122","hashOfConfig":"109"},{"size":287,"mtime":1597421306000,"results":"123","hashOfConfig":"109"},{"size":4490,"mtime":1608665380000,"results":"124","hashOfConfig":"109"},{"size":5496,"mtime":1609700614000,"results":"125","hashOfConfig":"109"},{"size":708,"mtime":1597421306000,"results":"126","hashOfConfig":"109"},{"size":3285,"mtime":1601969036000,"results":"127","hashOfConfig":"109"},{"size":7730,"mtime":1608665380000,"results":"128","hashOfConfig":"109"},{"size":21108,"mtime":1610296294000,"results":"129","hashOfConfig":"109"},{"size":3933,"mtime":1609004042000,"results":"130","hashOfConfig":"109"},{"size":3937,"mtime":1598251626000,"results":"131","hashOfConfig":"109"},{"size":29325,"mtime":1610035158000,"results":"132","hashOfConfig":"109"},{"size":332,"mtime":1608835212000,"results":"133","hashOfConfig":"109"},{"size":22456,"mtime":1610041638000,"results":"134","hashOfConfig":"109"},{"size":303,"mtime":1606411438000,"results":"135","hashOfConfig":"109"},{"size":48849,"mtime":1610892013265,"results":"136","hashOfConfig":"109"},{"size":328,"mtime":1601466616000,"results":"137","hashOfConfig":"109"},{"size":12759,"mtime":1610296302000,"results":"138","hashOfConfig":"109"},{"size":1527,"mtime":1609004252000,"results":"139","hashOfConfig":"109"},{"size":3393,"mtime":1609780876000,"results":"140","hashOfConfig":"109"},{"size":21640,"mtime":1610045046000,"results":"141","hashOfConfig":"109"},{"size":3925,"mtime":1609348190000,"results":"142","hashOfConfig":"109"},{"size":3264,"mtime":1608665380000,"results":"143","hashOfConfig":"109"},{"size":12694,"mtime":1609603836000,"results":"144","hashOfConfig":"109"},{"size":3725,"mtime":1609604940000,"results":"145","hashOfConfig":"109"},{"size":3625,"mtime":1609603194000,"results":"146","hashOfConfig":"109"},{"size":3538,"mtime":1609529474000,"results":"147","hashOfConfig":"109"},{"size":4790,"mtime":1609530584000,"results":"148","hashOfConfig":"109"},{"size":5035,"mtime":1609529470000,"results":"149","hashOfConfig":"109"},{"size":7974,"mtime":1610034666000,"results":"150","hashOfConfig":"109"},{"size":15023,"mtime":1609781562000,"results":"151","hashOfConfig":"109"},{"size":3216,"mtime":1598890196000,"results":"152","hashOfConfig":"109"},{"size":3930,"mtime":1598260522000,"results":"153","hashOfConfig":"109"},{"size":128,"mtime":1597421306000,"results":"154","hashOfConfig":"109"},{"size":900,"mtime":1601466616000,"results":"155","hashOfConfig":"109"},{"size":397,"mtime":1597421306000,"results":"156","hashOfConfig":"109"},{"size":4829,"mtime":1609523042000,"results":"157","hashOfConfig":"109"},{"size":8407,"mtime":1595875044000,"results":"158","hashOfConfig":"109"},{"size":19175,"mtime":1595871540000,"results":"159","hashOfConfig":"109"},{"size":4648,"mtime":1609523012000,"results":"160","hashOfConfig":"109"},{"size":1028,"mtime":1609780876000,"results":"161","hashOfConfig":"109"},{"size":3549,"mtime":1609780876000,"results":"162","hashOfConfig":"109"},{"size":4813,"mtime":1609780876000,"results":"163","hashOfConfig":"109"},{"size":2571,"mtime":1609780876000,"results":"164","hashOfConfig":"109"},{"size":4178,"mtime":1610909450951,"results":"165","hashOfConfig":"109"},{"size":2700,"mtime":1609776644000,"results":"166","hashOfConfig":"109"},{"size":314,"mtime":1603300310000,"results":"167","hashOfConfig":"109"},{"size":15747,"mtime":1609604592000,"results":"168","hashOfConfig":"109"},{"size":3626,"mtime":1608662926000,"results":"169","hashOfConfig":"109"},{"size":1571,"mtime":1598547664000,"results":"170","hashOfConfig":"109"},{"size":21655,"mtime":1609824966000,"results":"171","hashOfConfig":"109"},{"size":17268,"mtime":1608998976000,"results":"172","hashOfConfig":"109"},{"size":1367,"mtime":1608227708000,"results":"173","hashOfConfig":"109"},{"size":833,"mtime":1609522710000,"results":"174","hashOfConfig":"109"},{"size":189,"mtime":1601871660000,"results":"175","hashOfConfig":"109"},{"size":2594,"mtime":1601538844000,"results":"176","hashOfConfig":"109"},{"size":1428,"mtime":1595259196000,"results":"177","hashOfConfig":"109"},{"size":1475,"mtime":1609608170000,"results":"178","hashOfConfig":"109"},{"size":8796,"mtime":1608998976000,"results":"179","hashOfConfig":"109"},{"size":6107,"mtime":1609609050000,"results":"180","hashOfConfig":"109"},{"size":594,"mtime":1599411168000,"results":"181","hashOfConfig":"109"},{"size":3722,"mtime":1608998976000,"results":"182","hashOfConfig":"109"},{"size":1169,"mtime":1608227708000,"results":"183","hashOfConfig":"109"},{"size":1037,"mtime":1610292782000,"results":"184","hashOfConfig":"109"},{"size":2982,"mtime":1609824966000,"results":"185","hashOfConfig":"109"},{"size":1291,"mtime":1608227708000,"results":"186","hashOfConfig":"109"},{"size":1012,"mtime":1598547664000,"results":"187","hashOfConfig":"109"},{"size":1053,"mtime":1608227708000,"results":"188","hashOfConfig":"109"},{"size":929,"mtime":1609608170000,"results":"189","hashOfConfig":"109"},{"size":6318,"mtime":1609604592000,"results":"190","hashOfConfig":"109"},{"size":6788,"mtime":1609607920000,"results":"191","hashOfConfig":"109"},{"size":929,"mtime":1608565970000,"results":"192","hashOfConfig":"109"},{"size":1211,"mtime":1601466618000,"results":"193","hashOfConfig":"109"},{"size":603,"mtime":1609268068000,"results":"194","hashOfConfig":"109"},{"size":2431,"mtime":1608998976000,"results":"195","hashOfConfig":"109"},{"size":616,"mtime":1609522508000,"results":"196","hashOfConfig":"109"},{"size":1281,"mtime":1608227708000,"results":"197","hashOfConfig":"109"},{"size":740,"mtime":1609607936000,"results":"198","hashOfConfig":"109"},{"size":2059,"mtime":1608998976000,"results":"199","hashOfConfig":"109"},{"size":1158,"mtime":1608565970000,"results":"200","hashOfConfig":"109"},{"size":459,"mtime":1609267996000,"results":"201","hashOfConfig":"109"},{"size":1252,"mtime":1601466618000,"results":"202","hashOfConfig":"109"},{"size":482,"mtime":1609522362000,"results":"203","hashOfConfig":"109"},{"size":198,"mtime":1601538844000,"results":"204","hashOfConfig":"109"},{"size":980,"mtime":1609268578000,"results":"205","hashOfConfig":"109"},{"size":1058,"mtime":1609522710000,"results":"206","hashOfConfig":"109"},{"size":213,"mtime":1598242428000,"results":"207","hashOfConfig":"109"},{"size":9738,"mtime":1610041768000,"results":"208","hashOfConfig":"109"},{"size":1848,"mtime":1609610460000,"results":"209","hashOfConfig":"109"},{"size":7648,"mtime":1610043322000,"results":"210","hashOfConfig":"109"},{"size":4115,"mtime":1598726462000,"results":"211","hashOfConfig":"109"},{"size":29702,"mtime":1610034426000,"results":"212","hashOfConfig":"109"},{"size":3951,"mtime":1610984123815,"results":"213","hashOfConfig":"109"},{"size":3070,"mtime":1610034830000,"results":"214","hashOfConfig":"109"},{"size":4769,"mtime":1610034988000,"results":"215","hashOfConfig":"109"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"219"},"1k6d3m8",{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"219"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"219"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"219"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"219"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"219"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"219"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"219"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"219"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"219"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"219"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"219"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"219"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"219"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"219"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"219"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"219"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"219"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"219"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":59,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"219"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"219"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"219"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"219"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"219"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"219"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"219"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"219"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"219"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"219"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"219"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"219"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"219"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"219"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"219"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"219"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"219"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"219"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"219"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"219"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"219"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"219"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"219"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"219"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"219"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"219"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"219"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"219"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"219"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"219"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"219"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"219"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"219"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"219"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"219"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"219"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"219"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"219"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"219"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"219"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"219"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"219"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"219"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"219"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"219"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"219"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"219"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"219"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"219"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500","usedDeprecatedRules":"219"},"/Users/appleapple/Downloads/loop/src/index.tsx",["501"],"import \"core-js/stable\";\r\nimport \"regenerator-runtime/runtime\";\r\nimport 'tslib';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport './assets/styles.css'\r\nimport LoadercScreen from './layouts/LoaderScreen';\r\n\r\nReactDOM.render( <div>\r\n    <App />  \r\n  </div>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n",["502","503"],"/Users/appleapple/Downloads/loop/src/serviceWorker.ts",[],"/Users/appleapple/Downloads/loop/src/App.tsx",[],"/Users/appleapple/Downloads/loop/src/router-paths.ts",[],"/Users/appleapple/Downloads/loop/src/layouts/LoaderScreen.tsx",["504","505","506"],"import React, { useState, FC, Fragment } from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface IState {}\r\ninterface IProps {\r\n  loading?: boolean | string;\r\n  vox_loading?: any;\r\n}\r\nclass LoadercScreen extends React.Component<IProps, IState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { loading, vox_loading } = this.props;\r\n    return (\r\n      <div>\r\n        {loading || vox_loading ? (\r\n          <div className=\"loader-container\">\r\n            <div className=\"loader\">\r\n              <Loader type=\"Audio\" color=\"#69F0B4\" />\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\ninterface RootState {\r\n  auth: {\r\n    loading: boolean;\r\n    vox_loading: boolean;\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return { loading: state.auth.loading, vox_loading: state.auth.vox_loading };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {}\r\n)(LoadercScreen);\r\n","/Users/appleapple/Downloads/loop/src/routes/home/SignIn.tsx",["507"],"import React from 'react';\r\n\r\nimport Main from '../../layouts/Main';\r\nimport SignIn from '../../features/home/auth/SignIn'\r\nimport Constant from '../../utils/Constant';\r\nimport { History } from 'history';\r\n\r\ninterface Props {\r\n  history: History\r\n}\r\n\r\nexport default  (props: Props) => (\r\n  <Main headerType={Constant.HEADER_TYPE.AUTH}>\r\n    <SignIn history={props.history} />\r\n  </Main>\r\n);\r\n","/Users/appleapple/Downloads/loop/src/routes/home/Home.tsx",["508"],"import React from 'react';\r\n\r\nimport Main from '../../layouts/Main';\r\nimport Constant from '../../utils/Constant'\r\nimport HomePage from '../../features/home/home/Home';\r\nimport { History } from 'history';\r\n\r\ninterface IProps {\r\n  history: History\r\n}\r\nexport default ({history}: IProps) => { \r\n  \r\n  return (\r\n      <Main headerType={Constant.HEADER_TYPE.HOME}>\r\n        <HomePage />\r\n      </Main>\r\n    );\r\n}","/Users/appleapple/Downloads/loop/src/routes/home/SignUp.tsx",["509"],"import React from 'react';\r\n\r\nimport Main from '../../layouts/Main';\r\nimport SignUp from '../../features/home/auth/SignUp';\r\nimport Constant from '../../utils/Constant';\r\nimport { History } from 'history';\r\n\r\ninterface Props {\r\n  history : History\r\n  /* other props for ChildComponent */\r\n} \r\n\r\nexport default (props: Props) => (\r\n  <Main headerType={Constant.HEADER_TYPE.AUTH}>\r\n    <SignUp history={props.history} />\r\n  </Main>\r\n);\r\n","/Users/appleapple/Downloads/loop/src/routes/home/Purchase.tsx",["510"],"import React from 'react';\r\n\r\nimport Main from '../../layouts/Main';\r\nimport Purchase from '../../features/home/auth/Purchase';\r\nimport Constant from '../../utils/Constant';\r\n\r\nexport default () => (\r\n  <Main headerType={Constant.HEADER_TYPE.AUTH}>\r\n    <Purchase />\r\n  </Main>\r\n);\r\n","/Users/appleapple/Downloads/loop/src/routes/home/Plan.tsx",["511"],"import React from 'react';\r\n\r\nimport Main from '../../layouts/Main';\r\nimport Plan from '../../features/home/auth/Plans';\r\nimport Constant from '../../utils/Constant';\r\n\r\nexport default () => (\r\n  <Main headerType={Constant.HEADER_TYPE.AUTH}>\r\n    <Plan />\r\n  </Main>\r\n);\r\n","/Users/appleapple/Downloads/loop/src/routes/home/PurchaseSuccess.tsx",[],"/Users/appleapple/Downloads/loop/src/routes/home/HowItWork.tsx",["512"],"import React from 'react';\r\n\r\nimport Main from '../../layouts/Main';\r\nimport Constant from '../../utils/Constant';\r\nimport HowItWork from '../../features/home/how_it_work/HowItWork';\r\n\r\nexport default () => (\r\n  <Main headerType={Constant.HEADER_TYPE.HOME}>\r\n    <HowItWork />\r\n  </Main>\r\n);\r\n","/Users/appleapple/Downloads/loop/src/routes/home/Subscription.tsx",["513"],"import React from 'react';\r\n\r\nimport Main from '../../layouts/Main';\r\nimport Constant from '../../utils/Constant'\r\nimport Subscription from '../../features/home/subscription/Subscription';\r\n\r\nexport default () => (\r\n  <Main headerType={Constant.HEADER_TYPE.HOME}>\r\n    <Subscription />\r\n  </Main>\r\n);\r\n","/Users/appleapple/Downloads/loop/src/routes/home/BlogDetail.tsx",["514"],"import React from 'react';\r\n\r\nimport Main from '../../layouts/Main';\r\nimport Constant from '../../utils/Constant'\r\nimport BlogDetail from '../../features/home/blog-detail/BlogDetail';\r\n\r\nexport default () => (\r\n  <Main headerType={Constant.HEADER_TYPE.HOME}>\r\n    <BlogDetail />\r\n  </Main>\r\n);\r\n","/Users/appleapple/Downloads/loop/src/routes/home/BlogList.tsx",["515"],"import React from 'react';\r\n\r\nimport Main from '../../layouts/Main';\r\nimport Constant from '../../utils/Constant'\r\nimport BlogList from '../../features/home/blog_list/BlogList';\r\n\r\nexport default () => (\r\n  <Main headerType={Constant.HEADER_TYPE.HOME}>\r\n    <BlogList />\r\n  </Main>\r\n);\r\n","/Users/appleapple/Downloads/loop/src/routes/discovery/Discovery.tsx",["516","517"],"import React, { useState }  from 'react';\r\nimport { Row, Button } from 'reactstrap';\r\nimport './discovery.scss'\r\nimport 'react-multi-carousel/lib/styles.css';  \r\nimport { match, Switch, Route, Redirect } from 'react-router-dom';\r\nimport SideBar from '../../features/dashboard/common/side_bar/SideBar';\r\nimport HeaderDashboard from '../../features/dashboard/common/header_dashboard/HeaderDashboard';\r\nimport MobileFooter from '../../features/dashboard/common/mobile_footer/MobileFooter'; \r\nimport Recommended from '../../features/dashboard/discovery/recommended_page/Recommended';\r\nimport HomePage from '../../features/dashboard/discovery/home_page/HomePage';\r\nimport Genre from '../../features/dashboard/discovery/genre_page/Genre';\r\nimport Expertise from '../../features/dashboard/discovery/expertise_page/Expertise';\r\nimport RecentlyJoined from '../../features/dashboard/discovery/recently_joined_page/RecentlyJoined';\r\nimport Location from '../../features/dashboard/discovery/location/Location';\r\nimport Trending from '../../features/dashboard/discovery/trending/Trending';\r\nimport ViewProfile from '../../features/dashboard/view_profile/ViewProfile';\r\nimport Navigation from '../../utils/nav';\r\nimport FeelingRandom from '../../features/dashboard/feeling_random/FeelingRandom';\r\nimport YourNetwork from '../../features/dashboard/common/your_network/YourNetwork';\r\nimport { getPath } from '../../router-paths';\r\nimport { History } from 'history';\r\nimport MyNetworkPage from '../../features/dashboard/hub/mynetwork_page/MyNetworkPage';\r\nimport FooterDashboard from '../../features/dashboard/common/footer_dahboard/FooterDashboard';\r\n\r\ninterface IProps {\r\n    renderActionsMenu?: () => JSX.Element;\r\n    headerType?: number,\r\n    match: any; \r\n    history: History\r\n};\r\n  \r\n\r\nconst Discovery = ({match, history}: IProps) => {  \r\n    const [network, setNetwork] = useState(false);\r\n    \r\n    const [isSideBarOpen, setIsSideBarOpen] = useState(false);\r\n\r\n    const toggleNetwork = () => {\r\n        setNetwork(!network)\r\n      };\r\n    const isAuthenticated = () => {\r\n        return localStorage.getItem(\"token\");\r\n    };\r\n\r\n    if (!isAuthenticated()){\r\n        history.push('/home')\r\n    }\r\n\r\n    return (\r\n        <div className={window.location.hash.split('/')[2] === 'feeling-random' ? 'dashboard feeling-dashboard' : 'dashboard'}>\r\n            <Row className=\"m-0 hash-row\">\r\n                <SideBar history={history} isSideBarOpen={isSideBarOpen} setIsSideBarOpen={setIsSideBarOpen}  menu={Navigation.DISCOVERY} />\r\n                <div className=\"right-section\">\r\n                    <HeaderDashboard history={history}  isSideBarOpen={isSideBarOpen} setIsSideBarOpen={setIsSideBarOpen}/>\r\n                    <div className=\"dashboard-inner\">\r\n                        <Switch>\r\n                            <Route exact path={`${match.path}`} component={HomePage}>\r\n                                { isAuthenticated() ? <Redirect to={`${match.path}/home`} /> : <Redirect to={getPath('home')} /> }\r\n                            </Route>\r\n                            <Route path={`${match.path}/home`} component={HomePage}  />\r\n                            <Route path={`${match.path}/recommended`} component={Recommended}  />\r\n                            <Route path={`${match.path}/genre`} component={Genre}  />\r\n                            <Route path={`${match.path}/expertise`} component={Expertise}  />\r\n                            <Route path={`${match.path}/recent`} component={RecentlyJoined}  />\r\n                            <Route path={`${match.path}/location`} component={Location}  />\r\n                            <Route path={`${match.path}/trending`} component={Trending}  />\r\n                            {/* <Route path={`hub/my-network`} component={MyNetworkPage}  /> */}\r\n                            <Route path={`${match.path}/view-profile/:id`} component={ViewProfile}  />\r\n                            <Route path={`${match.path}/feeling-random`} component={FeelingRandom}  />\r\n                        </Switch>\r\n                        <FooterDashboard />\r\n                     </div>\r\n                </div>\r\n            </Row>\r\n            <Button className=\"network-btn\"  onClick={toggleNetwork}>\r\n                <i className=\"icon icon-network\"></i>\r\n            </Button>\r\n            {network && <YourNetwork toggleNetwork={toggleNetwork}  network={network}/>}\r\n            \r\n            <MobileFooter />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Discovery;","/Users/appleapple/Downloads/loop/src/routes/hubs/Hub.tsx",["518","519","520"],"import React  from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport './hub.scss'\r\nimport 'react-multi-carousel/lib/styles.css';  \r\nimport { match, Switch, Route, Redirect } from 'react-router-dom';\r\n import SideBar from '../../features/dashboard/common/side_bar/SideBar';\r\nimport HeaderDashboard from '../../features/dashboard/common/header_dashboard/HeaderDashboard';\r\nimport MobileFooter from '../../features/dashboard/common/mobile_footer/MobileFooter';  \r\nimport HomePage from '../../features/dashboard/hub/home_page/HomePage'; \r\nimport ViewProfile from '../../features/dashboard/hub/view_profile/ViewProfile';\r\nimport EditProfile from '../../features/dashboard/hub/edit-profile/EditProfile';\r\nimport Navigation from '../../utils/nav';\r\nimport CreateProject from '../../features/dashboard/hub/create_project/CreateProject';\r\nimport StudioPage from '../../features/dashboard/hub/studio_page/StudioPage';\r\nimport MyNetworkPage from '../../features/dashboard/hub/mynetwork_page/MyNetworkPage';\r\nimport Project from '../../features/dashboard/hub/project/Project';\r\nimport TermsCondition from '../../features/dashboard/hub/terms_condition/TermsCondition';\r\nimport PrivacyPolicy from '../../features/dashboard/hub/privacy_policy/PrivacyPolicy';\r\nimport TermService from '../../features/dashboard/hub/terms_service/TermService';\r\nimport { connect } from 'react-redux';\r\nimport CollaboratorsChat from '../../features/dashboard/hub/collaborators_chat/CollaboratorsChat';\r\nimport VirtualSessions from '../../features/dashboard/hub/virtual_sessions/VirtualSessions';\r\nimport { getPath } from '../../router-paths';\r\n\r\nimport { History } from 'history';\r\n\r\ninterface IProps {\r\n    history: History;\r\n     match: match<{ name?: string }>; \r\n     router?: any\r\n};\r\n\r\ninterface IState {\r\n    isSideBarOpen: boolean;\r\n    isAuthenticated?: string | null\r\n};\r\n\r\nclass Hub extends React.Component<IProps, IState> {  \r\n   readonly state: IState = {isSideBarOpen: false};\r\n\r\n   constructor(props: any){\r\n       super(props);\r\n   }\r\n\r\n   componentWillMount(){\r\n    const isAuthenticated = localStorage.getItem(\"token\");\r\n    this.setState({isAuthenticated});\r\n    if (!this.isAuthenticated()){\r\n        this.props.history.push('/home');\r\n    }\r\n   }\r\n\r\n    setIsSideBarOpen = () => {\r\n        this.setState({ isSideBarOpen: !this.state.isSideBarOpen })\r\n    }\r\n\r\n       isAuthenticated = () => {\r\n        return localStorage.getItem(\"token\");\r\n    };\r\n\r\n    \r\n    render(){ \r\n        const { isSideBarOpen, isAuthenticated } = this.state;\r\n        const { match, history } = this.props; \r\n         \r\n        return (\r\n            <div className=\"dashboard\">\r\n                <Row className=\"m-0 hash-row\">\r\n                    <SideBar history={history} isSideBarOpen={isSideBarOpen} setIsSideBarOpen={this.setIsSideBarOpen}  menu={Navigation.HUB} />\r\n                    <div className={window.location.hash.split('/')[3] === 'virtual-sessions' ? 'right-section virtual-right-section': 'right-section'} >\r\n                        <HeaderDashboard history={history} isSideBarOpen={isSideBarOpen} setIsSideBarOpen={this.setIsSideBarOpen}/>\r\n                        <div className=\"dashboard-inner\">\r\n                            <Switch>\r\n                                <Route exact path={`${match.path}`} render={HomePage}>\r\n                                { this.isAuthenticated() ? <Redirect to={`${match.path}/home`} /> : <Redirect to={getPath('home')} /> }\r\n                                </Route>\r\n                                <Route path={`${match.path}/home`} component={HomePage}  />   \r\n                                <Route path={`${match.path}/view-profile`} component={ViewProfile}  />\r\n                                <Route path={`${match.path}/edit-profile`} component={EditProfile}  />\r\n                                <Route path={`${match.path}/edit-project/:id`} component={CreateProject} exact />\r\n                                <Route path={`${match.path}/create-project`} component={CreateProject}  />\r\n                                <Route path={`${match.path}/studio`} render={StudioPage}  />\r\n                                <Route path={`${match.path}/my-network`} component={MyNetworkPage}  />\r\n                                <Route path={`${match.path}/settings/terms-and-condition`} component={TermsCondition}  />\r\n                                <Route path={`${match.path}/settings/privacy-policy`} component={PrivacyPolicy}  />\r\n                                <Route path={`${match.path}/settings/terms-services`} component={TermService}  />\r\n                                <Route path={`${match.path}/project/:id`} component={Project}  />\r\n                                <Route path={`${match.path}/chat/collaborators-chat`} component={CollaboratorsChat}  />\r\n                                <Route path={`${match.path}/chat/virtual-sessions`} component={VirtualSessions}  />\r\n\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </Row>\r\n                {/* <Button className=\"network-btn\">\r\n                    <i className=\"icon icon-network\"></i>\r\n                </Button> */}\r\n               {window.location.hash.split('/')[2] != 'chat' && <MobileFooter /> } \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\ninterface RootState {\r\n    router: object\r\n}\r\n\r\nconst mapStateToProps = ( state: RootState ) => {\r\n    return { router: state.router}\r\n}\r\n\r\nexport default  connect(mapStateToProps, {} )(Hub);","/Users/appleapple/Downloads/loop/src/store/index.ts",[],"/Users/appleapple/Downloads/loop/src/utils/nav.ts",[],"/Users/appleapple/Downloads/loop/src/features/dashboard/feeling_random/FeelingRandom.tsx",["521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544"],"import React from 'react';\r\nimport './FeelingRandom.scss';\r\nimport { Row, Col, Button } from 'reactstrap';\r\n// import classnames from 'classnames';\r\n// import ListCard from '../common/list_card/ListCard';\r\nimport globeBg from \"../../../assets/images/random-bg.svg\"\r\nimport globeBg2 from \"../../../assets/images/random-bg-mobile.svg\"\r\nimport pointer from \"../../../assets/images/pointer.png\"\r\nimport profile1 from \"../../../assets/images/audio1.png\"\r\nimport profile2 from \"../../../assets/images/audio2.png\"\r\nimport profile3 from \"../../../assets/images/audio3.png\"\r\nimport profile4 from \"../../../assets/images/audio4.png\"\r\nimport profile5 from \"../../../assets/images/audio5.png\"\r\nimport { render } from 'react-dom';\r\nimport { connect } from 'react-redux';\r\nimport { random } from '../../../redux/discovery/action'\r\nimport {History} from 'history';\r\n\r\nclass FeelingRandom extends React.Component<IProps, IState > {\r\n  readonly state: IState = {randomObj:{}}\r\n  constructor(props: any){\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount(){\r\n    this.props.random();\r\n    this.genrateData();\r\n  }\r\n\r\n  componentDidUpdate(prevPops: IProps){\r\n    if(prevPops.randomList != this.props.randomList){\r\n      this.genrateData();\r\n    }\r\n  }\r\n\r\n  genrateData = () => {\r\n    let {randomList} = this.props;\r\n    let randomObj: any = {};\r\n    randomList && randomList.forEach((item: any, index: number) => {\r\n      randomObj[index] = item;\r\n    })\r\n    this.setState({randomObj})\r\n  }\r\n\r\n  getName = (data : any) => `${data.first_name || \"\"} ${data.last_name || \"\"}`\r\n  getExpertise = (data : any) => (data && data.expertise && data.expertise.map((item: any) => item && item.name) || []).join(' | ')\r\n\r\n  viewProfile = (data: any) => {\r\n    this.props.history.push(`/discovery/view-profile/${data.user_id}`)\r\n }\r\n  render(){\r\n    let {randomObj} = this.state;\r\n\r\n    return (\r\n        <div className=\"feeling-random\">\r\n          <Row className=\"justify-content-center m-0 top-section\">\r\n            <Col md=\"6\" className=\"text-center\"> \r\n              <h1>Feeling Random</h1>\r\n              <p>Feeling a bit stuck? Press the button below and we’ll generate a LOOP member you’ve never collaborated with before. Let’s get those spontaneous juices flowing…</p>\r\n              <Button className=\"button-btnGradiant\" onClick={()=> this.props.random()} ><i className=\"icon icon-hand-point-up\"></i> Click on Me</Button>\r\n            </Col>\r\n          </Row>\r\n          <div className=\"bottom-section\">\r\n            {randomObj[0] && <div className=\"pointer pointer1\"> \r\n                <div className=\"profile-img\">\r\n                  <div className=\"p-relative\">\r\n                    <div onClick={() => this.viewProfile(randomObj[0])}><img src={randomObj[0].photo || profile1} /></div>\r\n                    <img src={pointer} className=\"pointer-icon\"/>\r\n                  </div>\r\n                </div> \r\n              <div className=\"hover-text\">\r\n                  <p>{this.getName(randomObj[0])}</p>\r\n                  <p>{this.getExpertise(randomObj[0])}</p>\r\n                </div>\r\n            </div>}\r\n            {randomObj[1] && <div className=\"pointer pointer2\"> \r\n                <div className=\"profile-img\">\r\n                  <div className=\"p-relative\">\r\n                    <div onClick={() => this.viewProfile(randomObj[1])}><img src={randomObj[1].photo || profile2} /></div>\r\n                    <img src={pointer} className=\"pointer-icon\"/>\r\n                  </div>\r\n                </div> \r\n              <div className=\"hover-text\">\r\n                  <p>{this.getName(randomObj[1])}</p>\r\n                  <p>{this.getExpertise(randomObj[1])}</p>\r\n                </div>\r\n            </div>}\r\n            {randomObj[2] && <div className=\"pointer pointer3\"> \r\n                <div className=\"profile-img\">\r\n                  <div className=\"p-relative\">\r\n                    <div onClick={() => this.viewProfile(randomObj[2])}><img src={randomObj[2].photo || profile3} /></div>\r\n                    <img src={pointer} className=\"pointer-icon\"/>\r\n                  </div>\r\n                </div> \r\n              <div className=\"hover-text\">\r\n                  <p>{this.getName(randomObj[2])}</p>\r\n                  <p>{this.getExpertise(randomObj[2])}</p>\r\n                </div>\r\n            </div>}\r\n            {randomObj[3] && <div className=\"pointer pointer3\"> \r\n                <div className=\"profile-img\">\r\n                  <div className=\"p-relative\">\r\n                    <div onClick={() => this.viewProfile(randomObj[3])}><img src={randomObj[3].photo || profile3} /></div>\r\n                    <img src={pointer} className=\"pointer-icon\"/>\r\n                  </div>\r\n                </div> \r\n              <div className=\"hover-text\">\r\n                  <p>{this.getName(randomObj[3])}</p>\r\n                  <p>{this.getExpertise(randomObj[3])}</p>\r\n                </div>\r\n            </div>}\r\n            {randomObj[4] && <div className=\"pointer pointer4\"> \r\n                <div className=\"profile-img\">\r\n                  <div className=\"p-relative\">\r\n                    <div onClick={() => this.viewProfile(randomObj[4])}><img src={randomObj[4].photo || profile4} /></div>\r\n                    <img src={pointer} className=\"pointer-icon\"/>\r\n                  </div>\r\n                </div> \r\n              <div className=\"hover-text\">\r\n                  <p>{this.getName(randomObj[4])}</p>\r\n                  <p>{this.getExpertise(randomObj[4])}</p>\r\n                </div>\r\n            </div>}\r\n            {randomObj[5] && <div className=\"pointer pointer5\"> \r\n                <div className=\"profile-img\">\r\n                  <div className=\"p-relative\">\r\n                    <div onClick={() => this.viewProfile(randomObj[5])}><img src={randomObj[5].photo || profile5} /></div>\r\n                    <img src={pointer} className=\"pointer-icon\"/>\r\n                  </div>\r\n                </div> \r\n              <div className=\"hover-text\">\r\n                  <p>{this.getName(randomObj[5])}</p>\r\n                  <p>{this.getExpertise(randomObj[5])}</p>\r\n              </div>\r\n            </div>}\r\n            {randomObj[6] && <div className=\"small-pointer small-pointer1\">\r\n              <img src={randomObj[6].photo || profile5} onClick={() => this.viewProfile(randomObj[6])} />\r\n            </div>\r\n            }\r\n            {randomObj[7] && <div className=\"small-pointer small-pointer2\">\r\n              <img src={randomObj[7].photo || profile5} onClick={() => this.viewProfile(randomObj[7])} />\r\n            </div>}\r\n            {randomObj[8] && <div className=\"small-pointer small-pointer3\">\r\n              <img src={randomObj[8].photo || profile5} onClick={() => this.viewProfile(randomObj[8])} />\r\n            </div>}\r\n            {randomObj[9] && <div className=\"small-pointer small-pointer4\">\r\n              <img src={randomObj[9].photo || profile5} onClick={() => this.viewProfile(randomObj[9])} />\r\n            </div>}\r\n            {randomObj[10] && <div className=\"small-pointer small-pointer5\">\r\n              <img src={randomObj[10].photo || profile5} onClick={() => this.viewProfile(randomObj[10])} />\r\n            </div>}\r\n            <img src={globeBg} className=\"w-100 globedesktop\" />\r\n            <img src={globeBg2} className=\"w-100 globemobile\" />\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\ninterface IProps {\r\n  random: ()=> Promise<any>;\r\n  randomList: any[];\r\n  history: History\r\n}\r\n\r\ninterface IState {\r\n  randomObj: any;\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    randomList: state.discovery.random || [], \r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = { \r\n  random\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FeelingRandom);","/Users/appleapple/Downloads/loop/src/features/dashboard/view_profile/ViewProfile.tsx",["545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569"],"import React, { useState } from 'react';\r\nimport './ViewProfile.scss';\r\nimport audioProfile1 from '../../../assets/images/view-profile.png';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Card,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n} from 'reactstrap';\r\nimport FooterDashboard from '../common/footer_dahboard/FooterDashboard';\r\nimport audioProfile from '../../../assets/images/audioProfile.png';\r\nimport emma from '../../../assets/images/emma.png';\r\nimport { connect } from 'react-redux';\r\nimport { getProfileById, playTrack } from '../../../redux/user/action';\r\nimport {\r\n  addNetwork,\r\n  removeNetwork,\r\n\tacceptRequest,\r\n\tcancelRequest,\r\n  rejectRequest,\r\n} from '../../../redux/network/action';\r\nimport { History } from 'history';\r\nimport moment from 'moment';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport { createConversation } from \"../../../redux/user/action\";\r\nimport _ from 'lodash';\r\n\r\nclass ViewProfile extends React.Component<IProps, IState> {\r\n  readonly state: IState = {\r\n    playingTrack: {},\r\n    modal: false,\r\n    networkRemove: false,\r\n    removeNetwork: false,\r\n  };\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n    const { id } = this.props.match.params;\r\n    this.props.getProfileById(id);\r\n  }\r\n\r\n  componentDidUpdate(prevProps: IProps) {\r\n    if (prevProps.playingTrack != this.props.playingTrack) {\r\n      const playingTrack = this.props.playingTrack && this.props.playingTrack;\r\n      this.setState({ playingTrack });\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({ modal: !this.state.modal, networkRemove: true });\r\n  };\r\n\r\n  toggleRemoveNetwork = () => {\r\n    this.setState({\r\n      removeNetwork: !this.state.removeNetwork,\r\n      networkRemove: false,\r\n    });\r\n  };\r\n\r\n  addToNetwork = () => {\r\n    this.props.addNetwork(this.props.userDetail && this.props.userDetail.user_id).then((data: any) => {\r\n      const { id } = this.props.match.params;\r\n      this.props.getProfileById(id);\r\n      this.toggle();\r\n    });\r\n  };\r\n\r\n  removeFromNetwork = () => {\r\n    this.props\r\n      .removeNetwork(this.props.userDetail && this.props.userDetail.user_id)\r\n      .then((data: any) => {\r\n        const { id } = this.props.match.params;\r\n        this.props.getProfileById(id);\r\n        this.toggleRemoveNetwork();\r\n      });\r\n  };\r\n\r\n  acceptRequest = async (userId: any) => {\r\n    const reponse = await this.props.acceptRequest(userId);\r\n    if (reponse && reponse.data && reponse.data.success) {\r\n      toast.success(reponse.data.message);\r\n      const { id } = this.props.match.params;\r\n      this.props.getProfileById(id);\r\n    } else {\r\n      toast.error('Something went wrong');\r\n    }\r\n\t};\r\n\t\r\n\tcancelRequest = async (userId: any) => {\r\n    const reponse = await this.props.cancelRequest(userId);\r\n    if (reponse && reponse.data && reponse.data.success) {\r\n      toast.success(reponse.data.message);\r\n      const { id } = this.props.match.params;\r\n      this.props.getProfileById(id);\r\n    } else {\r\n      toast.error('Something went wrong');\r\n    }\r\n\t};\r\n\r\n  rejectRequest = async (userId: any) => {\r\n    const reponse = await this.props.rejectRequest(userId);\r\n    if (reponse && reponse.data && reponse.data.success) {\r\n      toast.success(reponse.data.message);\r\n      const { id } = this.props.match.params;\r\n      this.props.getProfileById(id);\r\n    } else {\r\n      toast.error('Something went wrong');\r\n    }\r\n  };\r\n\r\n  backToDiscover = () => {\r\n    this.props.history.push('/discover');\r\n  };\r\n\r\n  trackClicked = (item: any) => {\r\n    const { playingTrack, userDetail } = this.props;\r\n    let isPaused = false;\r\n    if (playingTrack) {\r\n      isPaused =\r\n        playingTrack.track_id != item.track_id ? false : !playingTrack.isPaused;\r\n    }\r\n    item.first_name = userDetail.first_name;\r\n    item.last_name = userDetail.last_name;\r\n    this.props.playTrack(item, isPaused);\r\n  };\r\n\r\n  isPlaying = (id: string) => {\r\n    const { playingTrack } = this.props;\r\n    let isPaused = false;\r\n    if (playingTrack) {\r\n      isPaused = playingTrack.track_id != id ? false : !playingTrack.isPaused;\r\n    }\r\n  };\r\n\r\n  getTime = (timeInSec: number) => {\r\n    let duration = moment.duration(timeInSec, 'seconds');\r\n    let time = '';\r\n    let hours = duration.hours();\r\n    if (hours > 0) {\r\n      time = hours + ':';\r\n    }\r\n    time = time + duration.minutes() + ':' + duration.seconds();\r\n    return time;\r\n  };\r\n\r\n  getSocialMediaIcons = () => {\r\n    let { userDetail } = this.props;\r\n    return (\r\n      <>\r\n        {userDetail &&\r\n          userDetail.social_link &&\r\n          userDetail.social_link.map((item: any) => {\r\n            let jsx = (\r\n              <a href=\"\">\r\n                <i className=\"icon\" />\r\n              </a>\r\n            );\r\n            if (item.includes('www.spotify')) {\r\n              jsx = (\r\n                <a target=\"_blank\" href={item}>\r\n                  <i className=\"icon icon-spotify\" />\r\n                </a>\r\n              );\r\n            } else if (item.includes('www.soundcloud')) {\r\n              jsx = (\r\n                <a target=\"_blank\" href={item}>\r\n                  <i className=\"icon icon-soundcloud\" />\r\n                </a>\r\n              );\r\n            } else if (item.includes('www.youtube')) {\r\n              jsx = (\r\n                <a target=\"_blank\" href={item}>\r\n                  <i className=\"icon icon-youtube\" />\r\n                </a>\r\n              );\r\n            } else if (item.includes('www.instagram')) {\r\n              jsx = (\r\n                <a target=\"_blank\" href={item}>\r\n                  <i className=\"icon icon-instagram\" />\r\n                </a>\r\n              );\r\n            }\r\n            return jsx;\r\n          })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  createNewConversation(usersId: any, title: any) {\r\n    createConversation({\r\n        type: 'direct',\r\n        title: title,\r\n        desc: '',\r\n        usersId: usersId,\r\n        isPublic: true,\r\n        isUber: true,\r\n        avatar: '',\r\n      });\r\n    }\r\n\r\n  render() {\r\n    const { modal, removeNetwork, playingTrack } = this.state;\r\n    const { userDetail = {}, voxUser } = this.props;\r\n    const primaryTrack =\r\n      userDetail.demo_track &&\r\n\t\t\tuserDetail.demo_track.find((item: any) => item.primary === 1);\r\n\t\tconst userName = userDetail && userDetail.email && `${userDetail.email.replace('@', '-loop-')}@loop.cocoworth`;\r\n\t\tconst userinfo = voxUser && voxUser.find((item: any)=> item.userName === userName);\r\n   const statusUpdate = userinfo && userinfo.online ? (\r\n                          <p className=\"status-custom online\">Online</p>\r\n                        ) : (\r\n                          <p className=\"status-custom offline\">\r\n                            Offiline\r\n                          </p>\r\n                        )\r\n    return (\r\n      <div className=\"view-profile-page\">\r\n        <ToastContainer />\r\n        <div className=\"view-profile\">\r\n          <div\r\n            className=\"view-profile-head\"\r\n            style={{\r\n              backgroundImage: `url(${userDetail.photo || audioProfile1})`,\r\n            }}\r\n          >\r\n            {/* <img src={audioProfile1} alt=\"profile\" className=\"w-100 \"/> */}\r\n            <div className=\"profile-section\">\r\n              <Row>\r\n                <Col md=\"8\">\r\n                   {userDetail.connection_status === \"friend\" && statusUpdate}\r\n                  <h2>{`${userDetail.first_name || ''} ${userDetail.last_name ||\r\n                    ''}`}</h2>\r\n                  <p>\r\n                    {userDetail.expertise &&\r\n                      userDetail.expertise\r\n                        .map((item: any) => item && item.name)\r\n                        .join(' | ')}\r\n                  </p>\r\n                </Col>\r\n                <Col md=\"4\" className=\"text-right\">\r\n                  <div className=\"social-icon\">\r\n                    {this.getSocialMediaIcons()}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          </div>\r\n          <Row className=\"bottom-section\">\r\n            <Col lg=\"12\" xl=\"7\">\r\n              <div className=\"left-col\">\r\n                {userDetail.connected != 1 && (\r\n                  <Button\r\n                    className=\"button-btnGradiant add-network-btn\"\r\n                    onClick={this.addToNetwork}\r\n                  >\r\n                    <i className=\"icon icon-plus-circle \" /> Add to Network\r\n                  </Button>\r\n                )}\r\n                {userDetail.connection_status == 'friend' && (\r\n                  <div className=\"remove-network\">\r\n                    <div className=\"text\">\r\n                      <p>\r\n                        {`${userDetail.first_name ||\r\n                          ''} ${userDetail.last_name || ''}`}{' '}\r\n                        is already on your network.{' '}\r\n                      </p>\r\n                      <p>You can remove him/her from your network at any time.</p>\r\n                    </div>\r\n\r\n                    <Button\r\n                      className=\"border-gradiant-btn\"\r\n                      onClick={this.removeFromNetwork}\r\n                    >\r\n                      <div className=\"inner-module\">\r\n                        <span>\r\n                          <i className=\"icon icon-plus-circle \" /> Remove from\r\n                          Network\r\n                        </span>\r\n                      </div>\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n\r\n\t\t\t\t\t\t\t\t{userDetail.connection_status == 'send_request' && (\r\n                  <div className=\"remove-network\">\r\n                    <div className=\"text\">\r\n                      <p>\r\n                        You have send reuest to {`${userDetail.first_name ||\r\n                          ''} ${userDetail.last_name || ''}`}{' '}.{' '}\r\n                      </p>\r\n                      <p>You can cancel your request at any time.</p>\r\n                    </div>\r\n\r\n                    <Button\r\n                      className=\"border-gradiant-btn\"\r\n                      onClick={()=> this.cancelRequest(userDetail.user_id)}\r\n                    >\r\n                      <div className=\"inner-module\">\r\n                        <span>\r\n                          <i className=\"icon icon-plus-circle \" /> Cancel Request\r\n                        </span>\r\n                      </div>\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n\r\n                {userDetail.connection_status == 'received_request' && (\r\n                  <div className=\"remove-network\">\r\n                    <div className=\"text\">\r\n                      <p>\r\n                        {`${userDetail.first_name ||\r\n                          ''} ${userDetail.last_name || ''}`}{' '}\r\n                        is send request to you.{' '}\r\n                      </p>\r\n                      <p>You can accept or reject request.</p>\r\n                    </div>\r\n\r\n                    <Button\r\n                      className=\"border-gradiant-btn\"\r\n                      onClick={() => this.acceptRequest(userDetail.user_id)}\r\n                    >\r\n                      <div className=\"inner-module\">\r\n                        <span>\r\n                          <i className=\"icon icon-plus-circle \" /> Accept\r\n                          Request\r\n                        </span>\r\n                      </div>\r\n                    </Button>\r\n                    <Button\r\n                      className=\"border-gradiant-btn\"\r\n                      onClick={() => this.rejectRequest(userDetail.user_id)}\r\n                    >\r\n                      <div className=\"inner-module\">\r\n                        <span>\r\n                          <i className=\"icon icon-plus-circle \" /> Reject\r\n                          Request\r\n                        </span>\r\n                      </div>\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"d-flex justify-content-between breadcrum\">\r\n                  <div className=\"d-flex align-items-center\">\r\n                    <i className=\"icon icon-map-marked-alt\" />{' '}\r\n                    {(userDetail.location && userDetail.location.location) ||\r\n                      ''}\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center\">\r\n                    {userDetail.trip && userDetail.trip.length > 0 && (\r\n                      <i className=\"icon icon-plane-departure\" />\r\n                    )}\r\n                    {(userDetail.trip &&\r\n                      userDetail.trip.map((city: any, index: number) => (\r\n                        <>\r\n                          <div className=\"d-flex\">\r\n                            {city.trip}\r\n                            {index < userDetail.trip.length - 1 && (\r\n                              <i className=\"icon icon-long-right-arrow\" />\r\n                            )}\r\n                            {/* <i className=\"icon icon-long-right-arrow\"></i> */}\r\n                            {/* Tokyo */}\r\n                          </div>\r\n                        </>\r\n                      ))) || <></>}\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-3\">\r\n                                    <h3>Genre:</h3>\r\n                                      <p>\r\n                                        {\r\n                                            userDetail.genre && userDetail.genre.map((item: any, index: number) => (\r\n                                                <>\r\n         \r\n                                                    {item.name} \r\n                                                    { index < userDetail.genre.length -1  && ', '}\r\n                                                        \r\n                                                </>\r\n                                            )) || <></>\r\n                                        } \r\n                                    </p>\r\n                                </div>\r\n                <div className=\"mt-3\">\r\n                  <h3>Description:</h3>\r\n                  <p>{userDetail.description}</p>\r\n                  <h3>Credits:</h3>\r\n                  <p>{userDetail.credits}</p>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col lg=\"12\" xl=\"5\">\r\n              <div className=\"right-col\">\r\n                {primaryTrack && (\r\n                  <>\r\n                    <div className=\"primary-demo\">\r\n                      <img\r\n                        src={primaryTrack.cover_image || audioProfile}\r\n                        alt=\"\"\r\n                        className=\"w-100\"\r\n                      />\r\n                      <p>\r\n                        <i className=\"icon icon-star\" /> Primary Demo\r\n                      </p>\r\n                    </div>\r\n                    <Card\r\n                      className=\"audioCard\"\r\n                      onClick={() => this.trackClicked(primaryTrack)}\r\n                    >\r\n                      <div>\r\n                        <div className=\"d-flex\">\r\n                          <img\r\n                            src={primaryTrack.cover_image || audioProfile}\r\n                            alt=\"\"\r\n                          />\r\n                          <div className=\"ml-3\">\r\n                            <h1>{primaryTrack.name}</h1>\r\n                            <p>{`${userDetail.first_name ||\r\n                              ''} ${userDetail.last_name || ''}`}</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"d-flex\">\r\n                        <p className=\"time\">\r\n                          {this.getTime(primaryTrack.duration)}\r\n                        </p>\r\n                        <i\r\n                          className={\r\n                            playingTrack.track_id == primaryTrack.track_id &&\r\n                            !playingTrack.isPaused\r\n                              ? 'icon icon-pause'\r\n                              : 'icon icon-next'\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </Card>\r\n                  </>\r\n                )}\r\n                {userDetail.demo_track &&\r\n                  userDetail.demo_track\r\n                    .filter((item: any) => item.primary == 0)\r\n                    .map((item: any) => (\r\n                      <Card\r\n                        className=\"audioCard\"\r\n                        onClick={() => this.trackClicked(item)}\r\n                      >\r\n                        <div>\r\n                          <div className=\"d-flex\">\r\n                            <img\r\n                              src={item.cover_image || audioProfile}\r\n                              alt=\"\"\r\n                            />\r\n                            <div className=\"ml-3\">\r\n                              <h1>{item.name}</h1>\r\n                              <p>{`${userDetail.first_name ||\r\n                                ''} ${userDetail.last_name || ''}`}</p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"d-flex\">\r\n                          <p className=\"time\">{this.getTime(item.duration)}</p>\r\n                          <i\r\n                            className={\r\n                              playingTrack.track_id == item.track_id &&\r\n                              !playingTrack.isPaused\r\n                                ? 'icon icon-pause'\r\n                                : 'icon icon-next'\r\n                            }\r\n                          />\r\n                        </div>\r\n                      </Card>\r\n                    ))}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        {/* <FooterDashboard /> */}\r\n\r\n        <Modal\r\n          isOpen={modal}\r\n          toggle={this.toggle}\r\n          className=\"add-to-netwok-modal\"\r\n        >\r\n          <ModalHeader toggle={this.toggle}> </ModalHeader>\r\n          <ModalBody>\r\n            <h2>\r\n               Your request has been sent to  {`${userDetail.first_name || ''} ${userDetail.last_name}`}\r\n            </h2>\r\n            <img src={userDetail.photo || emma} />\r\n            <h1>{`${userDetail.first_name || ''} ${userDetail.last_name}`}</h1>\r\n            <p>\r\n              {userDetail.expertise &&\r\n                userDetail.expertise\r\n                  .map((item: any) => item && item.name)\r\n                  .join(' | ')}\r\n            </p>\r\n            <Button className=\"button-btnGradiant chat-btn\" onClick={()=>this.createNewConversation(userinfo && userinfo.userId, userDetail.first_name ? `${userDetail.first_name} ${userDetail.last_name}` : userDetail.email)}>\r\n              <i className=\"icon icon-comments\" /> Chat Now\r\n            </Button>\r\n            <Button className=\"discover-btn\" onClick={this.backToDiscover}>\r\n              <i className=\"icon icon-discover \" /> Back to Discover\r\n            </Button>\r\n          </ModalBody>\r\n        </Modal>\r\n\r\n        <Modal\r\n          isOpen={removeNetwork}\r\n          toggle={this.toggleRemoveNetwork}\r\n          className=\"add-to-netwok-modal\"\r\n        >\r\n          <ModalHeader toggle={this.toggleRemoveNetwork}> </ModalHeader>\r\n          <ModalBody>\r\n            <h2>\r\n              {`${userDetail.first_name || ''} ${userDetail.last_name}`} has\r\n              been removed from your network\r\n            </h2>\r\n            <img src={userDetail.photo || emma} />\r\n            <h1>{`${userDetail.first_name || ''} ${userDetail.last_name}`}</h1>\r\n            <p>\r\n              {userDetail.expertise &&\r\n                userDetail.expertise\r\n                  .map((item: any) => item && item.name)\r\n                  .join(' | ')}\r\n            </p>\r\n            <Button\r\n              className=\"button-btnGradiant chat-btn\"\r\n              onClick={this.backToDiscover}\r\n            >\r\n              <i className=\"icon icon-comments\" /> Back to Discover\r\n            </Button>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface IState {\r\n  networkRemove: boolean;\r\n  modal: boolean;\r\n  removeNetwork: boolean;\r\n  playingTrack: any;\r\n}\r\n\r\ninterface IProps {\r\n  getProfileById: (id: string) => Promise<any>;\r\n  addNetwork: (id: string) => Promise<any>;\r\n  removeNetwork: (id: string) => Promise<any>;\r\n  playTrack: (data: any, isPaused: boolean) => Promise<any>;\r\n  playingTrack: any;\r\n  userDetail: any;\r\n  match: any;\r\n  history: History;\r\n  rejectRequest: any;\r\n\tacceptRequest: any;\r\n\tcancelRequest: any,\r\n\tvoxUser: any;\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getProfileById,\r\n  addNetwork,\r\n  removeNetwork,\r\n  playTrack,\r\n\tacceptRequest,\r\n\tcancelRequest,\r\n  rejectRequest,\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    userDetail: state.user.profileById,\r\n\t\tplayingTrack: state.user.playingTrack,\r\n\t\tvoxUser: !_.isEmpty(state.user.vox_users) && state.user.vox_users.users || []\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ViewProfile);\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/privacy_policy/PrivacyPolicy.tsx",["570"],"import React from 'react';\r\nimport './PrivacyPolicy.scss';\r\nimport { Button } from 'reactstrap';\r\nimport YourNetwork from '../../common/your_network/YourNetwork';\r\ninterface State {\r\n    network: boolean;\r\n }\r\n\r\n \r\n\r\nclass PrivacyPolicy extends React.Component<{}, State> {\r\n    readonly state : State = { network: false}\r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    toggleNetwork = () => {\r\n        this.setState({ network : !this.state.network});\r\n    };\r\n\r\n\r\n    render() {\r\n        const { network } =  this.state;\r\n    return( \r\n        <>\r\n        <div className=\"termsPage\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-10\">\r\n                    <h1>Privacy Policy </h1>\r\n                    <p className=\"pg-1\">Please read these Terms and Conditions (\"Terms\") carefully before accessing or using the website at www.loop.com and all related websites, software, apps, and/or plug-ins (together the \"Service\") made available by Loop GmbH (\"LOOP\", \"us\", \"we\" or \"our\").</p>\r\n                </div>\r\n            </div> \r\n            <h2>1. Acceptance of Terms</h2> \r\n            <p>1.1. LOOP operates the website www.loop.com (\"Website\"), a platform that allows you to post, link, store, share and otherwise make available certain information, text, graphics, photos, videos, or other material (together \"Content\"). Our goal is to help designers, bloggers and everyone who is looking for an image to find photos and other Content that you can use for free subject to and in compliance with these Terms.</p>\r\n            <p>1.2. Your access to and use of the Service is conditioned on your acceptance of and compliance with these Terms. These Terms apply to all photographers, visitors, users and others who access and/or use the Service.</p>\r\n            <p>1.3. By accessing or using the Service, whether as a photographer, visitor or user of the Website, you agree to be bound by these Terms. These Terms serve to protect and safeguard your rights, the rights of other users, our rights and the rights of third parties in the course of operating the Website. If you do not agree to the terms of use, you must immediately stop using any part of the Service.</p>\r\n            <p>1.4. We reserve the right to change or adapt these Terms at any time and without giving reasons with effect for the future. You will be notified of these changes at least two weeks before they take effect by posting them on the Website and should you have created a user account on our Website by notifying your registered e-mail address. You have the right to immediately cancel and terminate your account on our Website if you do not agree to the changes to the Terms. Changes shall be deemed approved by you if you continue to use the Service after the new Terms come into effect.</p>\r\n            <p>1.5. The use of the Service is subject to the Terms in force at the time of use.</p>\r\n            \r\n            <h2>2. Accounts and Registration</h2> \r\n            <p>2.1. You have the option of creating a user account on our Website so that you can use the additional functions of the Website, in particular for uploading photos and other Content or for participating in any contests made available through the Service. The opening of a user account can only take place with the agreement to these Terms.</p>\r\n            <p>2.2. Upon registration, Pexels and you enter into a contract for the use of the Website and the Services. There is no claim to the conclusion of this contract. Pexels is entitled to refuse your registration without giving reasons.</p>\r\n            \r\n            <Button className=\"network-btn\" onClick={this.toggleNetwork}>\r\n                <i className=\"icon icon-network\"></i>\r\n            </Button>\r\n        </div>\r\n        {network && <YourNetwork toggleNetwork={this.toggleNetwork}  network={network}/>}\r\n        </>\r\n    )\r\n    }\r\n}\r\nexport default PrivacyPolicy;","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/terms_condition/TermsCondition.tsx",["571"],"import React from 'react';\r\nimport './TermsCondition.scss';\r\nimport { Button } from 'reactstrap';\r\nimport YourNetwork from '../../common/your_network/YourNetwork';interface State {\r\n    network: boolean;\r\n }\r\n\r\n \r\n\r\nclass TermsCondition extends React.Component<{}, State> {\r\n    readonly state : State = { network: false}\r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    toggleNetwork = () => {\r\n        this.setState({ network : !this.state.network});\r\n    };\r\n\r\n\r\n    render() {\r\n        const { network } =  this.state;\r\n    return( \r\n        <>\r\n        <div className=\"termsPage\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-10\">\r\n                    <h1>Terms & Conditions</h1>\r\n                    <p className=\"pg-1\">Please read these Terms and Conditions (\"Terms\") carefully before accessing or using the website at www.loop.com and all related websites, software, apps, and/or plug-ins (together the \"Service\") made available by Loop GmbH (\"LOOP\", \"us\", \"we\" or \"our\").</p>\r\n                </div>\r\n            </div> \r\n            <h2>1. Acceptance of Terms</h2> \r\n            <p>1.1. LOOP operates the website www.loop.com (\"Website\"), a platform that allows you to post, link, store, share and otherwise make available certain information, text, graphics, photos, videos, or other material (together \"Content\"). Our goal is to help designers, bloggers and everyone who is looking for an image to find photos and other Content that you can use for free subject to and in compliance with these Terms.</p>\r\n            <p>1.2. Your access to and use of the Service is conditioned on your acceptance of and compliance with these Terms. These Terms apply to all photographers, visitors, users and others who access and/or use the Service.</p>\r\n            <p>1.3. By accessing or using the Service, whether as a photographer, visitor or user of the Website, you agree to be bound by these Terms. These Terms serve to protect and safeguard your rights, the rights of other users, our rights and the rights of third parties in the course of operating the Website. If you do not agree to the terms of use, you must immediately stop using any part of the Service.</p>\r\n            <p>1.4. We reserve the right to change or adapt these Terms at any time and without giving reasons with effect for the future. You will be notified of these changes at least two weeks before they take effect by posting them on the Website and should you have created a user account on our Website by notifying your registered e-mail address. You have the right to immediately cancel and terminate your account on our Website if you do not agree to the changes to the Terms. Changes shall be deemed approved by you if you continue to use the Service after the new Terms come into effect.</p>\r\n            <p>1.5. The use of the Service is subject to the Terms in force at the time of use.</p>\r\n            \r\n            <h2>2. Accounts and Registration</h2> \r\n            <p>2.1. You have the option of creating a user account on our Website so that you can use the additional functions of the Website, in particular for uploading photos and other Content or for participating in any contests made available through the Service. The opening of a user account can only take place with the agreement to these Terms.</p>\r\n            <p>2.2. Upon registration, Pexels and you enter into a contract for the use of the Website and the Services. There is no claim to the conclusion of this contract. Pexels is entitled to refuse your registration without giving reasons.</p>\r\n            \r\n            <Button className=\"network-btn\" onClick={this.toggleNetwork}>\r\n                <i className=\"icon icon-network\"></i>\r\n            </Button>\r\n        </div>\r\n        {network && <YourNetwork toggleNetwork={this.toggleNetwork}  network={network}/>}\r\n        </>\r\n    )\r\n    }\r\n}\r\nexport default TermsCondition;","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/project/Project.tsx",["572","573","574","575","576","577","578","579","580","581"],"import React, { Fragment } from 'react';\r\nimport './Project.scss';\r\nimport banner from '../../../../assets/images/banner.png';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Button,\r\n  Table,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n} from 'reactstrap';\r\nimport AddCollaborators from '../../common/add_collaborators/AddCollaborators';\r\nimport {\r\n  UploadTrackModal,\r\n  TrackFileType,\r\n} from '../../common/upload_track/UploadTrack';\r\nimport {\r\n  UploadFilesModal,\r\n  FileDataType,\r\n} from '../../common/upload_files/UploadFiles';\r\nimport recordIcon from '../../../../assets/images/record.png';\r\nimport recordingIcon from '../../../../assets/images/recording.png';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  projectById,\r\n  projectAddCollaborator,\r\n  projectAddFile,\r\n  projectAddTrack,\r\n  projectRemoveTrack,\r\n  projectRemoveFile,\r\n  projectRemoveVoice,\r\n  projectAddVoice,\r\n} from '../../../../redux/project/action';\r\nimport { myNetwork } from '../../../../redux/network/action';\r\nimport Util from '../../../../utils/Util';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nimport { ReactMic } from 'react-mic';\r\n// import {Recorder} from 'react-voice-recorder'\r\nimport 'react-voice-recorder/dist/index.css';\r\nimport AudioRecorder from 'react-audio-recorder';\r\nimport _ from 'lodash';\r\nimport { createConversation } from '../../../../redux/user/action';\r\nimport { Link } from 'react-router-dom';\r\n// import MicRecorder from 'mic-recorder-to-mp3';\r\nconst MicRecorder = require('mic-recorder').default;\r\n\r\nconst recorder = new MicRecorder({\r\n  bitRate: 128,\r\n  encoder: 'mp3', // default is mp3, can be wav as well\r\n  sampleRate: 44100, // default is 44100, it can also be set to 16000 and 8000.\r\n});\r\n\r\ninterface IState {\r\n  record: boolean;\r\n  modal: boolean;\r\n  modalTrack: boolean;\r\n  modalAddCollaborators: boolean;\r\n  modalFile: boolean;\r\n  recording: boolean;\r\n  voiceRecord?: any;\r\n  networkList: any[];\r\n  audioDetails: any;\r\n  expendedTrack: boolean;\r\n  expendedMemo: boolean;\r\n  expendedShared: boolean;\r\n}\r\n\r\ninterface IProps {\r\n  match: any;\r\n  projectById: (id: string) => Promise<any>;\r\n  project: any;\r\n  myNetwork: () => Promise<any>;\r\n  networkList: any[];\r\n  projectAddCollaborator: (data: any) => Promise<any>;\r\n  projectAddTrack: (data: any) => Promise<any>;\r\n  projectAddFile: (data: any) => Promise<any>;\r\n  projectRemoveTrack: (id: string) => Promise<any>;\r\n  projectAddVoice: (data: any) => Promise<any>;\r\n  projectRemoveVoice: (id: string) => Promise<any>;\r\n  projectRemoveFile: (id: string) => Promise<any>;\r\n  voxUser: any[];\r\n}\r\n\r\nclass Project extends React.Component<IProps, IState> {\r\n  readonly state: IState = {\r\n    record: false,\r\n    modal: false,\r\n    modalFile: false,\r\n    modalAddCollaborators: false,\r\n    modalTrack: false,\r\n    recording: false,\r\n    expendedTrack: false,\r\n    expendedMemo: false,\r\n    expendedShared: false,\r\n    networkList: [],\r\n    audioDetails: {\r\n      url: null,\r\n      blob: null,\r\n      chunks: null,\r\n      duration: {\r\n        h: 0,\r\n        m: 0,\r\n        s: 0,\r\n      },\r\n    },\r\n  };\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.init();\r\n  }\r\n\r\n  init = () => {\r\n    const { id } = this.props.match.params;\r\n    this.props.projectById(id);\r\n    this.props.myNetwork();\r\n  };\r\n\r\n  toggle = () => {\r\n    if (!this.state.modal) {\r\n      this.setState({ voiceRecord: null });\r\n    }\r\n    this.setState({ modal: !this.state.modal });\r\n  };\r\n\r\n  toggleFile = () => {\r\n    this.setState({ modalFile: !this.state.modalFile });\r\n  };\r\n\r\n  toggleTrack = () => {\r\n    this.setState({ modalTrack: !this.state.modalTrack });\r\n  };\r\n\r\n  startRecording = () => {\r\n    //  this.setState({record: true});\r\n    this.setState({\r\n      voiceRecord: {},\r\n      record: true,\r\n    });\r\n\r\n    // Start recording. Browser will request permission to use your microphone.\r\n    recorder\r\n      .start()\r\n      .then(() => {\r\n        // something else\r\n        this.setState({ voiceRecord: null });\r\n      })\r\n      .catch((e: any) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n\r\n  stopRecording = () => {\r\n    // this.setState({modal: false});\r\n    this.setState({\r\n      record: false,\r\n    });\r\n\r\n    // Once you are done singing your best song, stop and get the mp3.\r\n    recorder\r\n      .stop()\r\n      .getAudio()\r\n      .then(([buffer, blob]: any[]) => {\r\n        const file = new File(buffer, 'me-at-thevoice.mp3', {\r\n          type: blob.type,\r\n          lastModified: Date.now(),\r\n        });\r\n        console.log('#file', file);\r\n\r\n        // const player = new Audio(URL.createObjectURL(file));\r\n        // player.play();\r\n        this.setState({\r\n          voiceRecord: {\r\n            title: Date.now() + '-' + file.name,\r\n            file: file,\r\n          },\r\n        });\r\n      })\r\n      .catch((e: any) => {\r\n        alert('We could not retrieve your message');\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  toggleAddCollaborators = () => {\r\n    let { project, networkList } = this.props;\r\n\r\n    console.log('#networkList', networkList);\r\n    if (!this.state.modalAddCollaborators) {\r\n      networkList =\r\n        networkList &&\r\n        networkList.filter((item: any) => {\r\n          const index =\r\n            (project &&\r\n              project.collaborator &&\r\n              Array.isArray(project.collaborator) &&\r\n              project.collaborator.map(\r\n                (item: any) => item.user_id == item.collaborator_user_id\r\n              )) ||\r\n            -1;\r\n          return index != -1;\r\n        });\r\n    }\r\n    console.log('#networkList', networkList);\r\n\r\n    this.setState({\r\n      modalAddCollaborators: !this.state.modalAddCollaborators,\r\n      networkList,\r\n    });\r\n  };\r\n\r\n  addCollaborator = (newCollaborator: string[]) => {\r\n    this.setState({ modalAddCollaborators: !this.state.modalAddCollaborators });\r\n    const { project } = this.props;\r\n    if (newCollaborator && newCollaborator.length > 0) {\r\n      const data = {\r\n        user_id: newCollaborator,\r\n        project_id: project.project_id,\r\n      };\r\n      this.props.projectAddCollaborator(data).then(res => {\r\n        toast('Collaborator added');\r\n        this.init();\r\n      });\r\n    }\r\n  };\r\n\r\n  trackModalClosed = (data: TrackFileType | null) => {\r\n    console.log('trackModalClosed', data);\r\n    const { project } = this.props;\r\n    const formData = new FormData();\r\n    if (data) {\r\n      formData.append('project_id', project.project_id);\r\n      formData.append('tracks_image[]', data.imageFile[0]);\r\n      formData.append('tracks_title[]', data.title);\r\n      formData.append('tracks_file[]', data.trackFile[0]);\r\n      this.props.projectAddTrack(formData).then((data: any) => {\r\n        toast('Track added');\r\n        this.init();\r\n      });\r\n    }\r\n    this.toggleTrack();\r\n  };\r\n\r\n  removeTrack = (id: string) => {\r\n    this.props.projectRemoveTrack(id).then((data: any) => {\r\n      toast('Track removed');\r\n      this.init();\r\n    });\r\n  };\r\n\r\n  removeVoiceMemo = (id: string) => {\r\n    this.props.projectRemoveVoice(id).then((data: any) => {\r\n      toast('Voice memo removed');\r\n      this.init();\r\n    });\r\n  };\r\n\r\n  removeProjectFile = (id: string) => {\r\n    this.props.projectRemoveFile(id).then((data: any) => {\r\n      toast('Shared file removed');\r\n      this.init();\r\n    });\r\n  };\r\n\r\n  fileModalClosed = (data: FileDataType | null) => {\r\n    console.log('#fileModalClosed', data);\r\n    const { project } = this.props;\r\n    const formData = new FormData();\r\n    if (data) {\r\n      formData.append('project_id', project.project_id);\r\n      formData.append('project_file[]', data.file[0]);\r\n      formData.append('project_file_title[]', data.title);\r\n      this.props.projectAddFile(formData).then((data: any) => {\r\n        toast('File added');\r\n        this.init();\r\n      });\r\n    }\r\n    this.toggleFile();\r\n  };\r\n\r\n  saveVoiceMemo = () => {\r\n    const { project = {} } = this.props;\r\n    const { voiceRecord } = this.state;\r\n    if (!voiceRecord) {\r\n      toast('Voice memo not found');\r\n      return;\r\n    }\r\n    const formData = new FormData();\r\n    formData.append('project_id', project.project_id);\r\n    formData.append('voice_memos_title[]', voiceRecord.title);\r\n    formData.append('voice_memos_files[]', voiceRecord.file);\r\n\r\n    this.props\r\n      .projectAddVoice(formData)\r\n      .then((res: any) => {\r\n        const { id } = this.props.match.params;\r\n        this.props.projectById(id);\r\n        toast('Voice memo added');\r\n      })\r\n      .catch(error => {\r\n        toast('Something went wrong');\r\n      });\r\n\r\n    this.setState({ modal: false });\r\n  };\r\n\r\n  handleAudioStop = (data: any) => {\r\n    console.log(data);\r\n    this.setState({ audioDetails: data });\r\n  };\r\n\r\n  handleAudioUpload = (file: any) => {\r\n    console.log(file);\r\n  };\r\n\r\n  handleRest = () => {\r\n    const reset = {\r\n      url: null,\r\n      blob: null,\r\n      chunks: null,\r\n      duration: {\r\n        h: 0,\r\n        m: 0,\r\n        s: 0,\r\n      },\r\n    };\r\n    this.setState({ audioDetails: reset });\r\n  };\r\n  createNewConversation(usersId: any, title: any) {\r\n    if(usersId) {\r\n      createConversation({\r\n        type: 'direct',\r\n        title: title,\r\n        desc: '',\r\n        usersId: usersId,\r\n        isPublic: true,\r\n        isUber: true,\r\n        avatar: '',\r\n      }); \r\n    }\r\n    \r\n}\r\n  render() {\r\n    const {\r\n      modal,\r\n      modalAddCollaborators,\r\n      modalTrack,\r\n      modalFile,\r\n      networkList = [],\r\n    } = this.state;\r\n    const { project = {}, voxUser } = this.props;\r\n    console.log('project props', this.props);\r\n    \r\n    \r\n    return (\r\n      <Fragment>\r\n        <div className=\"view-profile-page project\">\r\n          <ToastContainer />\r\n          <div className=\"view-profile\">\r\n            <div\r\n              className=\"view-profile-head\"\r\n              style={{\r\n                backgroundImage:\r\n                  'url(' + `${project.cover_image || banner}` + ')',\r\n              }}\r\n            >\r\n              {/* <img src={audioProfile1} alt=\"profile\" className=\"w-100 \"/> */}\r\n              <div className=\"profile-section\">\r\n                <Row>\r\n                  <Col md=\"8\">\r\n                    <p className=\"status\">\r\n                      {project.status == 'current' ? 'CURRENT' : 'ARCHIVED'}{' '}\r\n                      PROJEECT\r\n                    </p>\r\n                    <h2>{project.name}</h2>\r\n                    <p>\r\n                      Last opened:{' '}\r\n                      {Util.getFormattedDate(project.last_updated_at)}{' '}\r\n                      <small>\r\n                        (Created: {Util.getFormattedDate(project.created_date)}{' '}\r\n                        )\r\n                      </small>\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n            </div>\r\n            <Row className=\"bottom-section\">\r\n              <Col xl=\"8\" className=\"left\" lg=\"7\">\r\n              <div className=\"remove-network edit-project-btn\">\r\n                    <Link to={`/hub/edit-project/${project.project_id}`}>\r\n                      <Button className=\"border-gradiant-btn edit-profile-btn\" >\r\n                          <div className=\"inner-module\">\r\n                              <span>\r\n                              <i className=\"icon icon-edit \"></i>  Edit Project\r\n                              </span>\r\n                          </div>\r\n                      </Button>\r\n                    </Link>\r\n                </div> \r\n                <div className=\"left-col\">\r\n                  <div className=\"mt-3\">\r\n                    <h3>Description:</h3>\r\n                    <p>{project.description}</p>\r\n                  </div>\r\n                  <Card\r\n                    className={\r\n                      this.state.expendedShared\r\n                        ? 'project-detail-card expended-card'\r\n                        : 'project-detail-card expend-card'\r\n                    }\r\n                  >\r\n                    <CardHeader>\r\n                      <div className=\"d-flex justify-content-between\">\r\n                        <h3>Shared Files</h3>\r\n                        <Button\r\n                          className=\"add-btn mt-0\"\r\n                          onClick={this.toggleFile}\r\n                        >\r\n                          <i className=\"icon-upload-file\" /> Upload File\r\n                        </Button>\r\n                      </div>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                      <Table>\r\n                        {project.files &&\r\n                          Array.isArray(project.files) &&\r\n                          project.files.map((item: any) => (\r\n                            \r\n                            <tr>\r\n                              <td>\r\n                                <a href={item.file_name} download>\r\n                                  <i className=\"icon-file-alt\" /> {item.title}\r\n                                </a>\r\n                              </td>\r\n                              <td className=\"date-td\">\r\n                                {Util.getFormattedDateTZ(item.create_time)}\r\n                              </td>\r\n                              <td\r\n                                className=\"delete-td\"\r\n                                onClick={() =>\r\n                                  this.removeProjectFile(item.file_id)\r\n                                }\r\n                              >\r\n                                <span>\r\n                                  <i className=\"icon-delete\" /> Delete\r\n                                </span>\r\n                              </td>\r\n                            </tr>\r\n                          ))}\r\n                      </Table>\r\n                    </CardBody>\r\n\r\n                    {project.files && project.files.length > 3 && (\r\n                      <div\r\n                        className={\r\n                          this.state.expendedShared ? '' : 'gradiant-bg-bottom'\r\n                        }\r\n                      >\r\n                        <div\r\n                          className={\r\n                            this.state.expendedShared\r\n                              ? 'down-btn up-btn'\r\n                              : 'down-btn'\r\n                          }\r\n                          onClick={() =>\r\n                            this.setState({\r\n                              expendedShared: !this.state.expendedShared,\r\n                            })\r\n                          }\r\n                        >\r\n                          <i className=\"icon-arrow-right\" />\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </Card>\r\n                  <Card className=\"project-detail-card\">\r\n                    <CardHeader>\r\n                      <div className=\"d-flex justify-content-between\">\r\n                        <h3>Archived sessions</h3>\r\n                        <Button className=\"add-btn mt-0\">\r\n                          <i className=\"icon-file-video\" /> Upload Sessions\r\n                        </Button>\r\n                      </div>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                      <Table>\r\n                        <tr>\r\n                          <td>\r\n                            <i className=\"icon-file-video\" /> Session 1\r\n                          </td>\r\n                          <td className=\"date-td\">02.05.2020</td>\r\n                          <td className=\"delete-td\">\r\n                            <span>\r\n                              <i className=\"icon-delete\" /> Delete\r\n                            </span>\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>\r\n                            <i className=\"icon-file-video\" /> Session 2\r\n                          </td>\r\n                          <td className=\"date-td\">02.05.2020</td>\r\n                          <td className=\"delete-td\">\r\n                            <span>\r\n                              <i className=\"icon-delete\" /> Delete\r\n                            </span>\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>\r\n                            <i className=\"icon-file-video\" /> Session 3\r\n                          </td>\r\n                          <td className=\"date-td\">02.05.2020</td>\r\n                          <td className=\"delete-td\">\r\n                            <span>\r\n                              <i className=\"icon-delete\" /> Delete\r\n                            </span>\r\n                          </td>\r\n                        </tr>\r\n                      </Table>\r\n                    </CardBody>\r\n                    <div className=\"gradiant-bg-bottom\">\r\n                      <div className=\"down-btn\">\r\n                        <i className=\"icon-arrow-right\" />\r\n                      </div>\r\n                    </div>\r\n                  </Card>\r\n                  <Card\r\n                    className={\r\n                      this.state.expendedTrack\r\n                        ? 'project-detail-card expended-card'\r\n                        : 'project-detail-card expend-card'\r\n                    }\r\n                  >\r\n                    <CardHeader>\r\n                      <div className=\"d-flex justify-content-between\">\r\n                        <h3>Tracks</h3>\r\n                        <Button\r\n                          className=\"add-btn mt-0\"\r\n                          onClick={this.toggleTrack}\r\n                        >\r\n                          <i className=\"icon-file-audio\" /> Upload Track\r\n                        </Button>\r\n                      </div>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                      <Table>\r\n                        {project.tracks &&\r\n                          Array.isArray(project.tracks) &&\r\n                          project.tracks.map((item: any, i: any, arr: any) => (\r\n                            <tr>\r\n                              <td>\r\n                                <a href={item.file_name}  download>\r\n                                  <i className=\"icon-file-audio\" /> {item.tracks_title}\r\n                                </a>\r\n                              </td>\r\n                              <td className=\"date-td\">\r\n                                {Util.getFormattedDateTZ(item.date)}\r\n                              </td>\r\n                              <td\r\n                                className=\"delete-td\"\r\n                                onClick={() => this.removeTrack(item.file_id)}\r\n                              >\r\n                                <span>\r\n                                  <i className=\"icon-delete\" /> Delete\r\n                                </span>\r\n                              </td>\r\n                            </tr>\r\n                          ))}\r\n                      </Table>\r\n                    </CardBody>\r\n                    {project.tracks && project.tracks.length > 3 && (\r\n                      <div\r\n                        className={\r\n                          this.state.expendedTrack ? '' : 'gradiant-bg-bottom'\r\n                        }\r\n                      >\r\n                        <div\r\n                          className={\r\n                            this.state.expendedTrack\r\n                              ? 'down-btn up-btn'\r\n                              : 'down-btn'\r\n                          }\r\n                          onClick={() =>\r\n                            this.setState({\r\n                              expendedTrack: !this.state.expendedTrack,\r\n                            })\r\n                          }\r\n                        >\r\n                          <i className=\"icon-arrow-right\" />\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </Card>\r\n                  <Card\r\n                    className={\r\n                      this.state.expendedMemo\r\n                        ? 'project-detail-card expended-card'\r\n                        : 'project-detail-card expend-card'\r\n                    }\r\n                  >\r\n                    <CardHeader>\r\n                      <div className=\"d-flex justify-content-between\">\r\n                        <h3>Voice Memos</h3>\r\n                        <Button className=\"add-btn mt-0\" onClick={this.toggle}>\r\n                          <i className=\"icon-microphone-alt\" /> Voice Memos\r\n                        </Button>\r\n                      </div>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                      <Table>\r\n                        {project.voice_memo &&\r\n                          Array.isArray(project.voice_memo) &&\r\n                          project.voice_memo.map((item: any) => (\r\n                            <tr>\r\n                              <td>\r\n                              <a href={item.file_name} download>\r\n                                <i className=\"icon-microphone-alt\" /> {' '} {item.voice_memo_title}\r\n                                </a>\r\n                              </td>\r\n                              <td className=\"date-td\">\r\n                                {Util.getFormattedDateTZ(item.date)}\r\n                              </td>\r\n                              <td\r\n                                className=\"delete-td\"\r\n                                onClick={() =>\r\n                                  this.removeVoiceMemo(item.file_id)\r\n                                }\r\n                              >\r\n                                <span>\r\n                                  <i className=\"icon-delete\" /> Delete\r\n                                </span>\r\n                              </td>\r\n                            </tr>\r\n                          ))}\r\n                      </Table>\r\n                      {project.voice_memo && project.voice_memo.length > 3 && (\r\n                        <div\r\n                          className={\r\n                            this.state.expendedMemo ? '' : 'gradiant-bg-bottom'\r\n                          }\r\n                        >\r\n                          <div\r\n                            className={\r\n                              this.state.expendedMemo\r\n                                ? 'down-btn up-btn'\r\n                                : 'down-btn'\r\n                            }\r\n                            onClick={() =>\r\n                              this.setState({\r\n                                expendedMemo: !this.state.expendedMemo,\r\n                              })\r\n                            }\r\n                          >\r\n                            <i className=\"icon-arrow-right\" />\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </CardBody>\r\n                  </Card>\r\n                </div>\r\n              </Col>\r\n              <Col xl=\"4\" lg=\"5\">\r\n                <div className=\"right-col\">\r\n                  <div className=\"head\">\r\n                    <div>\r\n                      <h1>Collaborators</h1>\r\n                      <p>{`${(project.collaborator &&\r\n                        project.collaborator.length) ||\r\n                        0} Collaborator${\r\n                        project.collaborator && project.collaborator.length > 1\r\n                          ? 's'\r\n                          : ''\r\n                      }`}</p>\r\n                    </div>\r\n                    <Button\r\n                      className=\"add\"\r\n                      onClick={this.toggleAddCollaborators}\r\n                    >\r\n                      <i className=\"icon-plus-square\" />\r\n                      <span>Add</span>\r\n                    </Button>\r\n                  </div>\r\n                  {project.collaborator &&\r\n                    Array.isArray(project.collaborator) &&\r\n                    project.collaborator.map((item: any) => {\r\n                      const userName = `${item.email && item.email.replace(\r\n                        '@',\r\n                        '-loop-'\r\n                      )}@loop.cocoworth`;\r\n                      const userinfo = voxUser.find(\r\n                        (item: any) => item.userName === userName\r\n                      );\r\n                      return(\r\n                        <Card className=\"audioCard\" onClick={()=>this.createNewConversation(userinfo && userinfo.userId, item.first_name ? `${item.first_name} ${item.last_name}` : item.email)}>\r\n                        \r\n                        <div className=\"d-flex align-items-center\">\r\n                          <img src={item.image} alt=\"\" />\r\n                          <div className=\"ml-3\">\r\n                            <h1>{`${item && item.first_name} ${item && item.last_name}`}</h1>\r\n                            <p>\r\n                              {item.expertise &&\r\n                                Array.isArray(item.expertise) &&\r\n                                item.expertise\r\n                                  .map((item: any) => item && item.name)\r\n                                  .join(' | ')}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                        {userinfo && userinfo.online ? (\r\n                          <span className=\"status-custom online\">Online</span>\r\n                        ) : (\r\n                          <span className=\"status-custom offline\">\r\n                            Offiline\r\n                          </span>\r\n                        )}\r\n                      </Card>\r\n                      )\r\n                      \r\n                    })}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </div>\r\n        <Modal\r\n          isOpen={modal}\r\n          toggle={this.toggle}\r\n          className=\"add-to-netwok-modal upload-modal memo-modal\"\r\n        >\r\n          <ModalHeader toggle={this.toggle}> </ModalHeader>\r\n          <ModalBody>\r\n            <h2>Record Voice Memo</h2>\r\n            <p className=\"text-center mt-5 mb-2\">\r\n              Got an idea for a melody? A cool guitar riff? Get it recorded and\r\n              added to your project\r\n            </p>\r\n            {!this.state.record && (\r\n              <img src={recordIcon} onClick={this.startRecording} />\r\n            )}\r\n            {this.state.record && <img src={recordingIcon} />}\r\n            {this.state.record && (\r\n              <Button\r\n                className=\"stop-recording-btn\"\r\n                onClick={this.stopRecording}\r\n              >\r\n                <i className=\"icon-stop\" /> Stop Recording\r\n              </Button>\r\n            )}\r\n            <div className=\"play-duration\" />\r\n            <div className=\"d-flex justify-content-between your-memo\">\r\n              {this.state.voiceRecord && (\r\n                <>\r\n                  <div>\r\n                    <i className=\"icon-microphone-alt\" />{' '}\r\n                    {this.state.voiceRecord && this.state.voiceRecord.title}\r\n                  </div>\r\n                  <div\r\n                    className=\"delete\"\r\n                    onClick={() => this.setState({ voiceRecord: null })}\r\n                  >\r\n                    <i className=\"icon-delete\" /> Delete\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n\r\n            <Button\r\n              className=\"button-btnGradiant chat-btn\"\r\n              onClick={this.saveVoiceMemo}\r\n            >\r\n              <i className=\"icon icon-microphone-alt\" /> Save Memo\r\n            </Button>\r\n          </ModalBody>\r\n        </Modal>\r\n        <UploadFilesModal\r\n          modalFile={modalFile}\r\n          onClose={(data: FileDataType | null) => this.fileModalClosed(data)}\r\n          toggleFile={this.toggleFile}\r\n        />\r\n        <UploadTrackModal\r\n          modalTrack={modalTrack}\r\n          onClose={(data: TrackFileType | null) => this.trackModalClosed(data)}\r\n          toggleTrack={this.toggleTrack}\r\n        />\r\n        <AddCollaborators\r\n          connections={networkList}\r\n          selectedCollaborator={\r\n            project.collaborator &&\r\n            project.collaborator.map((item: any) => item.user_id)\r\n          }\r\n          modalAddCollaborators={modalAddCollaborators}\r\n          toggleAddCollaborators={this.toggleAddCollaborators}\r\n          addCollaborators={(selecetedMem: string[]) => {\r\n            this.toggleAddCollaborators();\r\n            if (selecetedMem.length > 0) {\r\n              this.addCollaborator(selecetedMem);\r\n            }\r\n            console.log('#selecetedMem', selecetedMem);\r\n          }}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  projectById,\r\n  myNetwork,\r\n  projectAddCollaborator,\r\n  projectAddTrack,\r\n  projectAddFile,\r\n  projectRemoveTrack,\r\n  projectRemoveVoice,\r\n  projectAddVoice,\r\n  projectRemoveFile,\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    project: state.project.project,\r\n    networkList: state.network.myNetwork,\r\n    voxUser:\r\n      (!_.isEmpty(state.user.vox_users) && state.user.vox_users.users) || [],\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Project);\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/mynetwork_page/MyNetworkPage.tsx",[],"/Users/appleapple/Downloads/loop/src/features/dashboard/hub/create_project/CreateProject.tsx",["582","583","584","585","586","587","588","589","590"],"import React from 'react';\r\nimport './CreateProject.scss';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Toast,\r\n  CardBody,\r\n  Table,\r\n  Card,\r\n} from 'reactstrap';\r\nimport cover from '../../../../assets/images/cover.svg';\r\nimport AddCollaborators from '../../common/add_collaborators/AddCollaborators';\r\nimport {\r\n  UploadTrackModal,\r\n  TrackFileType,\r\n} from '../../common/upload_track/UploadTrack';\r\nimport {\r\n  UploadFilesModal,\r\n  FileDataType,\r\n} from '../../common/upload_files/UploadFiles';\r\nimport { myNetwork } from '../../../../redux/network/action';\r\nimport {\r\n  createProject,\r\n  projectById,\r\n\tupdatePoject,\r\n\tcreateProjectInit,\r\n} from '../../../../redux/project/action';\r\nimport { connect } from 'react-redux';\r\nimport { History } from 'history';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport _ from 'lodash';\r\n\r\nclass CreateProject extends React.Component<IProps, IState> {\r\n  readonly state: IState = {\r\n    modalTrack: false,\r\n    modal: false,\r\n    modalFile: false,\r\n    modalAddCollaborators: false,\r\n    selecetedMem: [],\r\n  };\r\n  constructor(props: any) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n    const { id } = this.props.match.params;\r\n\t\tthis.props.myNetwork();\r\n\t\tif (id) {\r\n\t\t\tthis.props.projectById(id);\r\n\t\t}\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps: any) {\r\n    if (!_.isEqual(this.props.projectDetail, nextProps.projectDetail)) {\r\n\t\t\tconst data = nextProps.projectDetail;\r\n      this.setState({\r\n\t\t\t\tname: data.name,\r\n\t\t\t\tdescription: data.description,\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tconst { id } = this.props.match.params;\r\n\t\tif (!_.isEqual(id, nextProps.match.params.id) && !nextProps.match.params.id) {\r\n\t\t\tthis.props.createProjectInit()\r\n\t\t}\r\n  }\r\n\r\n  toggle = () => {\r\n    if (!this.state.modal) {\r\n      this.setState({\r\n        coverFile: undefined,\r\n        cover_image: undefined,\r\n        modal: !this.state.modal,\r\n      });\r\n    } else {\r\n      this.setState({ modal: !this.state.modal });\r\n    }\r\n  };\r\n\r\n  toggleTrack = () => {\r\n    this.setState({ modalTrack: !this.state.modalTrack });\r\n  };\r\n\r\n  toggleFile = () => {\r\n    this.setState({ modalFile: !this.state.modalFile });\r\n  };\r\n\r\n  toggleAddCollaborators = () => {\r\n    this.setState({ modalAddCollaborators: !this.state.modalAddCollaborators });\r\n  };\r\n\r\n  onChangeHandler = (type: string, event: FileList | null) => {\r\n    if (event) {\r\n      if (type == 'cover_image') {\r\n        const cover_image = URL.createObjectURL(event[0]);\r\n        this.setState({ coverFile: event, cover_image });\r\n      }\r\n    }\r\n  };\r\n\r\n  fileModalClosed = (data: FileDataType | null) => {\r\n    if (data) {\r\n      let { voiceFiles, voice_memos_files, voice_memos_title } = this.state;\r\n      if (!voice_memos_files || !voice_memos_title || !voiceFiles) {\r\n        voice_memos_title = [];\r\n        voice_memos_files = [];\r\n        voiceFiles = [];\r\n      }\r\n      voiceFiles.push(data.file[0]);\r\n      voice_memos_title.push(data.title);\r\n      voice_memos_files.push(data.fileName);\r\n      toast('Files added successfully');\r\n      this.setState({ voice_memos_title, voice_memos_files, voiceFiles });\r\n    }\r\n    this.toggleFile();\r\n  };\r\n\r\n  trackModalClosed = (data: TrackFileType | null) => {\r\n    if (data) {\r\n      let {\r\n        tracksImageFile,\r\n        tracksFile,\r\n        tracks_image,\r\n        tracks_file,\r\n        tracks_title,\r\n      } = this.state;\r\n      if (\r\n        !tracks_image ||\r\n        !tracks_file ||\r\n        !tracks_title ||\r\n        !tracksImageFile ||\r\n        !tracksFile\r\n      ) {\r\n        tracks_image = [];\r\n        tracks_file = [];\r\n        tracks_title = [];\r\n        tracksImageFile = [];\r\n        tracksFile = [];\r\n      }\r\n      tracks_image.push(data.trackFileName);\r\n      tracks_file.push(data.trackFileName);\r\n      tracks_title.push(data.title);\r\n      tracksImageFile.push(data.imageFile[0]);\r\n      tracksFile.push(data.trackFile[0]);\r\n      toast('Track added successfully');\r\n      this.setState({\r\n        tracks_image,\r\n        tracks_file,\r\n        tracks_title,\r\n        tracksImageFile,\r\n        tracksFile,\r\n      });\r\n    }\r\n    this.toggleTrack();\r\n  };\r\n\r\n  removeTrack = (index: number) => {\r\n    let {\r\n      tracksImageFile,\r\n      tracksFile,\r\n      tracks_image,\r\n      tracks_file,\r\n      tracks_title,\r\n    } = this.state;\r\n    if (\r\n      tracks_image &&\r\n      tracks_file &&\r\n      tracks_title &&\r\n      tracksImageFile &&\r\n      tracksFile\r\n    ) {\r\n      tracks_image.splice(index, 1);\r\n      tracks_file.splice(index, 1);\r\n      tracks_title.splice(index, 1);\r\n      tracksImageFile.splice(index, 1);\r\n      tracksFile.splice(index, 1);\r\n      this.setState({\r\n        tracks_image,\r\n        tracks_file,\r\n        tracks_title,\r\n        tracksImageFile,\r\n        tracksFile,\r\n      });\r\n      toast('Track removed successfully');\r\n    }\r\n  };\r\n\r\n  removeCollaborator = (index: number) => {\r\n    let { selecetedMem } = this.state;\r\n    if (selecetedMem) {\r\n      selecetedMem.splice(index, 1);\r\n      this.setState({ selecetedMem });\r\n      toast('Collaborator removed successfully');\r\n    }\r\n\t};\r\n\t\r\n  removeFile = (index: number) => {\r\n    let { voiceFiles, voice_memos_title, voice_memos_files } = this.state;\r\n    if (voiceFiles && voice_memos_title && voice_memos_files) {\r\n      voiceFiles.splice(index, 1);\r\n      voice_memos_title.splice(index, 1);\r\n      voice_memos_files.splice(index, 1);\r\n      this.setState({ voiceFiles, voice_memos_title, voice_memos_files });\r\n      toast('File removed successfully');\r\n    }\r\n  };\r\n\r\n  createProject = (e: any) => {\r\n\t\tconst { id } = this.props.match.params;\r\n\t\t\r\n    if (id) {\r\n      e.preventDefault();\r\n      let { name, description, coverFile } = this.state;\r\n      if (!name) {\r\n        toast.error('Please provide project name');\r\n        return;\r\n\t\t\t}\r\n\t\t\t\r\n      if (!description) {\r\n        toast.error('Please provide project description');\r\n        return;\r\n\t\t\t}\r\n\t\t\t\r\n      if (name && description) {\r\n        let data = {\r\n          project_id: id,\r\n          name,\r\n          description,\r\n          ...({coverFile: coverFile && coverFile[0]} || {}),\r\n        };\r\n        this.props\r\n          .updatePoject(data)\r\n          .then(data => {\r\n            toast('Project Updated successfully');\r\n            setTimeout(() => {\r\n              this.props.history.push('/hub');\r\n            }, 1000);\r\n          })\r\n          .catch((err: any) => {\r\n            toast.error('Something went wrong');\r\n          });\r\n      } else {\r\n        toast('All fields reqiured');\r\n\t\t\t}\r\n\r\n    } else {\r\n      e.preventDefault();\r\n      let {\r\n        tracksFile,\r\n        tracksImageFile,\r\n        tracks_title,\r\n        voiceFiles,\r\n        voice_memos_title,\r\n        name,\r\n        description,\r\n        coverFile,\r\n        selecetedMem,\r\n      } = this.state;\r\n      if (!coverFile) {\r\n        toast.error('Please provide cover picture');\r\n        return;\r\n      }\r\n      if (!name) {\r\n        toast.error('Please provide project name');\r\n        return;\r\n      }\r\n      if (!description) {\r\n        toast.error('Please provide project description');\r\n        return;\r\n      }\r\n      // if( !tracksFile || !(tracksFile && tracksFile.length != 0) ){\r\n      //     toast.error(\"Please provide atleast one track\")\r\n      //     return;\r\n      // }\r\n      // if( !voiceFiles || !(voiceFiles && voiceFiles.length != 0) ){\r\n      //     toast.error(\"Please provide atleast one File\")\r\n      //     return;\r\n      // }\r\n      // tracksFile && tracksImageFile && tracks_title && voiceFiles && voice_memos_title &&\r\n      if (name && description && coverFile) {\r\n        let data = {\r\n          collaborator_id: selecetedMem,\r\n          tracksFile,\r\n          tracksImageFile,\r\n          tracks_title,\r\n          voiceFiles,\r\n          voice_memos_title,\r\n          name,\r\n          description,\r\n          coverFile: coverFile[0],\r\n        };\r\n        this.props\r\n          .createProject(data)\r\n          .then(data => {\r\n            toast('Project created successfully');\r\n            setTimeout(() => {\r\n              this.props.history.push('/hub');\r\n            }, 1000);\r\n          })\r\n          .catch((err: any) => {\r\n            toast.error('Something went wrong');\r\n          });\r\n      } else {\r\n        toast('All fields reqiured');\r\n      }\r\n    }\r\n  };\r\n\r\n  inputHandler = (name: string, desc: string) => {\r\n    if (name == 'name') {\r\n      this.setState({ name: desc });\r\n    } else if (name == 'description') {\r\n      this.setState({ description: desc });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const currentProject = this.props.projectDetail;\r\n    const { id } = this.props.match.params;\r\n    const {\r\n      modal,\r\n      modalAddCollaborators,\r\n      selecetedMem,\r\n      modalFile,\r\n      modalTrack,\r\n      cover_image,\r\n      name,\r\n      description,\r\n      voice_memos_title,\r\n      tracks_title,\r\n    } = this.state;\r\n    const { networkList } = this.props;\r\n    return (\r\n      <div className=\"edit-profile-page\">\r\n        <ToastContainer />\r\n        <Row className=\"m-0\">\r\n          <Col md=\"8\">\r\n            <h1>{ !id ? 'Create Project': 'Update Project'}</h1>\r\n            <div className=\"uploadPhoto\">\r\n              <div className=\"dummy\">\r\n                <img\r\n                  src={\r\n                    cover_image ||\r\n                    (currentProject && currentProject.cover_image) ||\r\n                    cover\r\n                  }\r\n                  className=\"w-100\"\r\n                />\r\n              </div>\r\n              <div className=\"d-flex justify-content-between align-items-center\">\r\n                <div>\r\n                  <h2>Add a Cover Photo:</h2>\r\n                  <p className=\"mb-0\">\r\n                    Get creative, add artwork for your project\r\n                  </p>\r\n                </div>\r\n                <Button className=\"add-btn mt-0\" onClick={this.toggle}>\r\n                  <i className=\"icon-upload\" /> Upload\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <Form className=\"form\" onSubmit={this.createProject}>\r\n              <div className=\"input-area\">\r\n                <FormGroup>\r\n                  <Label>Project Title:</Label>\r\n                  <p>What’s the name of this project?</p>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"cardnumber\"\r\n                    id=\"cardid\"\r\n                    value={name ? name : ''}\r\n                    onChange={event =>\r\n                      this.inputHandler('name', event.target.value)\r\n                    }\r\n                    placeholder=\"Enter title here\"\r\n                  />\r\n                  <span className=\"edit-btn\">\r\n                    <i className=\"icon-edit2\" />Edit\r\n                  </span>\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"input-area\">\r\n                <FormGroup>\r\n                  <Label>Description:</Label>\r\n                  {/* <p>Tell the LOOP Community a bit about yourself</p> */}\r\n                  <Input\r\n                    type=\"textarea\"\r\n                    name=\"cardnumber\"\r\n                    id=\"cardid\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={description ? description : ''}\r\n                    onChange={event =>\r\n                      this.inputHandler('description', event.target.value)\r\n                    }\r\n                    placeholder=\"Enter description here\"\r\n                  />\r\n                  <span className=\"edit-btn\">\r\n                    <i className=\"icon-edit2\" />Edit\r\n                  </span>\r\n                </FormGroup>\r\n              </div>\r\n              {!id && <>\r\n              <div className=\"input-area\">\r\n                <h2>Upload Files:</h2>\r\n                <p>Upload audio files, voice memos, documents and more</p>\r\n                <Button className=\"add-btn\" onClick={this.toggleFile}>\r\n                  <i className=\"icon-upload-file\" /> Upload File\r\n                </Button>\r\n                {voice_memos_title && voice_memos_title.length > 0 && (\r\n                  <Card className=\"project-detail-card project-file-lists\">\r\n                    <CardBody>\r\n                      <Table>\r\n                        {voice_memos_title &&\r\n                          voice_memos_title.map(\r\n                            (item: string, index: number) => (\r\n                              <tr>\r\n                                <td>\r\n                                  <i className=\"icon-file-alt\" /> {item}\r\n                                </td>\r\n                                <td className=\"date-td\">\r\n                                  {/* {Util.getFormattedDateTZ(item.create_time)} */}{' '}\r\n                                  {new Date()\r\n                                    .toISOString()\r\n                                    .replace(/T.*/, '')\r\n                                    .split('-')\r\n                                    .reverse()\r\n                                    .join('-')}\r\n                                </td>\r\n                                <td\r\n                                  className=\"delete-td\"\r\n                                  onClick={() => this.removeFile(index)}\r\n                                >\r\n                                  <span>\r\n                                    <i className=\"icon-delete\" /> Delete\r\n                                  </span>\r\n                                </td>\r\n                              </tr>\r\n                            )\r\n                          )}\r\n                      </Table>\r\n                    </CardBody>\r\n                  </Card>\r\n                )}\r\n                {/* { voice_memos_title && voice_memos_title.map((item : string, index: number) => (\r\n                                    <div className=\"project-file-lists\">\r\n                                        <i className=\"icon-file-alt\"></i> <span> { item }</span>\r\n                                        <span onClick={()=> this.removeFile(index)} >  <i className=\"icon-delete\"></i> Delete</span>\r\n                                    </div>\r\n                                )) } */}\r\n              </div>\r\n\r\n              <div className=\"input-area\">\r\n                <h2>Upload Tracks:</h2>\r\n                <p>\r\n                  Any reference tracks or demos you want to upload to this\r\n                  project?\r\n                </p>\r\n                <Button className=\"add-btn\" onClick={this.toggleTrack}>\r\n                  <i className=\"icon-play\" /> Upload Track\r\n                </Button>\r\n                {tracks_title && tracks_title.length > 0 && (\r\n                  <Card className=\"project-detail-card project-file-lists\">\r\n                    <CardBody>\r\n                      <Table>\r\n                        {tracks_title &&\r\n                          tracks_title.map((item: string, index: number) => (\r\n                            <tr>\r\n                              <td>\r\n                                <i className=\"icon-file-audio\" /> {item}\r\n                              </td>\r\n                              <td className=\"date-td\">\r\n                                {/* {Util.getFormattedDateTZ(item.create_time)} */}{' '}\r\n                                {new Date()\r\n                                  .toISOString()\r\n                                  .replace(/T.*/, '')\r\n                                  .split('-')\r\n                                  .reverse()\r\n                                  .join('-')}\r\n                              </td>\r\n                              <td\r\n                                className=\"delete-td\"\r\n                                onClick={() => this.removeTrack(index)}\r\n                              >\r\n                                <span>\r\n                                  <i className=\"icon-delete\" /> Delete\r\n                                </span>\r\n                              </td>\r\n                            </tr>\r\n                          ))}\r\n                      </Table>\r\n                    </CardBody>\r\n                  </Card>\r\n                )}\r\n                {/* { tracks_title && tracks_title.map((item : string, index: number) => (\r\n                                    <div>\r\n                                        <span> { item }</span>\r\n                                        <span onClick={()=> this.removeTrack(index)} >  remove</span>\r\n                                    </div>\r\n                                )) } */}\r\n              </div>\r\n\r\n              <div className=\"input-area\">\r\n                <h2>Add Collaborators:</h2>\r\n                <p>Add others you’d like to work on this project with you</p>\r\n                <Button\r\n                  className=\"add-btn\"\r\n                  onClick={this.toggleAddCollaborators}\r\n                >\r\n                  <i className=\"icon-add-user\" /> Add Collaborators\r\n                </Button>\r\n                <table className=\"table collab-tbl\">\r\n                  {selecetedMem &&\r\n                    selecetedMem.map((item: string, index: number) => {\r\n                      let connection = networkList.find(\r\n                        (user: any) => user.user_id == item\r\n                      );\r\n\r\n                      return (\r\n                        <tr>\r\n                          <td>\r\n                            <img src={connection.photo} />\r\n                          </td>\r\n                          <td>{`${connection.first_name ||\r\n                            ''} ${connection.last_name || ''}`}</td>\r\n                          <td>\r\n                            {connection.expertise &&\r\n                              connection.expertise\r\n                                .map((item: any) => item && item.name)\r\n                                .join(' | ')}\r\n                          </td>\r\n                          <td>\r\n                            {connection.genre &&\r\n                              connection.genre\r\n                                .map((item: any) => item && item.name)\r\n                                .join(' | ')}\r\n                          </td>\r\n                          <td>\r\n                            <span\r\n                              onClick={() => this.removeCollaborator(index)}\r\n                            >\r\n                              <i className=\"icon-delete\" /> Delete\r\n                            </span>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                </table>\r\n              </div>\r\n              </>}\r\n              <Button\r\n                className=\"button-btnGradiant save-btn\"\r\n                onClick={this.createProject}\r\n              >\r\n                <i className=\"icon icon-layer-plus \" />{' '}\r\n                {id ? 'Update' : 'Create'} This Project\r\n              </Button>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Modal\r\n          isOpen={modal}\r\n          toggle={this.toggle}\r\n          className=\"add-to-netwok-modal upload-modal\"\r\n        >\r\n          <ModalHeader toggle={this.toggle}> </ModalHeader>\r\n          <ModalBody>\r\n            <h2>Add a photo to your project</h2>\r\n            <p className=\"pg-1\">Get creative, add artwork for your project</p>\r\n            <p className=\"text-left mt-5 mb-2\">Upload image for project:</p>\r\n            <div className=\"upload-f-device\">\r\n              <img src={cover_image || cover} />\r\n              <div className=\"upload-devicebtn\">\r\n                <input\r\n                  type=\"file\"\r\n                  name=\"file-1[]\"\r\n                  id=\"file-1\"\r\n                  accept=\".jpg,.JPG,.jpeg,.JPEG,.png,.PNG\"\r\n                  onChange={event =>\r\n                    this.onChangeHandler('cover_image', event.target.files)\r\n                  }\r\n                  className=\"inputfile inputfile-1\"\r\n                />\r\n                <label htmlFor=\"file-1\">\r\n                  <i className=\"icon icon-share\" /> Upload from Device\r\n                </label>\r\n              </div>\r\n            </div>\r\n\r\n            <Button\r\n              className=\"button-btnGradiant chat-btn\"\r\n              onClick={this.toggle}\r\n            >\r\n              <i className=\"icon icon-upload \" /> Add cover photo\r\n            </Button>\r\n          </ModalBody>\r\n        </Modal>\r\n\r\n        <UploadFilesModal\r\n          modalFile={modalFile}\r\n          onClose={(data: FileDataType | null) => this.fileModalClosed(data)}\r\n          toggleFile={this.toggleFile}\r\n        />\r\n        <UploadTrackModal\r\n          modalTrack={modalTrack}\r\n          onClose={(data: TrackFileType | null) => this.trackModalClosed(data)}\r\n          toggleTrack={this.toggleTrack}\r\n        />\r\n        <AddCollaborators\r\n          connections={networkList}\r\n          selectedCollaborator={selecetedMem || []}\r\n          modalAddCollaborators={modalAddCollaborators}\r\n          addCollaborators={(selecetedMem: string[]) => {\r\n            this.setState({ selecetedMem });\r\n            this.toggleAddCollaborators();\r\n            toast('Collabortor added successfully');\r\n          }}\r\n          toggleAddCollaborators={this.toggleAddCollaborators}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface IProps {\r\n  networkList: any[];\r\n  myNetwork: () => Promise<any>;\r\n  createProject: (data: any) => Promise<any>;\r\n  updatePoject: (data: any) => Promise<any>;\r\n\tprojectById: (id: string) => Promise<any>;\r\n\tcreateProjectInit: () => Promise<any>;\r\n  history: History;\r\n  projectDetail: any;\r\n  match: any;\r\n}\r\n\r\ninterface IState {\r\n  modal: boolean;\r\n  modalTrack: boolean;\r\n  modalFile: boolean;\r\n  modalAddCollaborators: boolean;\r\n  profileFile?: FileList;\r\n  coverFile?: FileList;\r\n  cover_image?: string;\r\n  tracks_image?: string[];\r\n  tracksImageFile?: any[];\r\n  tracks_title?: string[];\r\n  tracks_file?: string[];\r\n  tracksFile?: any[];\r\n  voice_memos_title?: string[];\r\n  voice_memos_files?: string[];\r\n  voiceFiles?: any[];\r\n  collaborator_id?: string[];\r\n  name?: string;\r\n  description?: string;\r\n  selecetedMem: string[];\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  myNetwork,\r\n  createProject,\r\n  updatePoject,\r\n\tprojectById,\r\n\tcreateProjectInit,\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    networkList: state.network.myNetwork,\r\n    projectDetail: state.project.project,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CreateProject);\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/studio_page/StudioPage.tsx",[],"/Users/appleapple/Downloads/loop/src/features/dashboard/hub/edit-profile/EditProfile.tsx",["591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649"],"import React from 'react';\r\nimport './EditProfile.scss';\r\nimport { Row, Col, Form, FormGroup, Input, Label, Button, Card, Modal, ModalHeader, ModalBody, Toast } from 'reactstrap';\r\nimport cover from '../../../../assets/images/cover.svg'\r\nimport Select, { ValueType } from 'react-select';\r\nimport audioProfile from '../../../../assets/images/audioProfile.png';\r\nimport { IUserDetail, UserDetail } from '../../../../utils/models/user/request.model';\r\nimport { USER } from '../../../../utils/Eums';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { connect } from 'react-redux';\r\nimport { editProfile, uploadProfile, getProfile, addTrack, listTrack, editTrack, deleteTrack } from '../../../../redux/user/action';\r\nimport { expertiseList, genreList,   } from '../../../../redux/master-data/action'; \r\nimport { IExpertiseItem, IGenreItem } from '../../../../utils/models/master-data/response.model';\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng, } from 'react-places-autocomplete';\r\n  import Places from \"google-places-web\";\r\nimport moment from \"moment\";\r\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\r\nimport _ from 'lodash';\r\n// import { geocodeByAddress, getLatLng } from 'react-google-places-autocomplete';\r\n\r\n \r\nconst options2: IOption[] = [\r\n    { value: 'Paris', label: 'Paris'},\r\n    { value: 'Berlin', label: 'Berlin'},\r\n    { value: 'Kiev', label: 'Kiev'},\r\n    { value: 'London', label: 'London'},\r\n    { value: 'New York', label: 'New York'},\r\n    { value: 'Amsterdam', label: 'Amsterdam'},\r\n    { value: 'Los Angeles', label: 'Los Angeles'},\r\n    { value: 'San Antonio', label: 'San Antonio'},\r\n];\r\ninterface IOption {\r\n    label: string,\r\n    value: string\r\n}\r\n\r\ninterface State {\r\n    modal: boolean;\r\n    modalTrack: boolean;\r\n    userDetail: IUserDetail;\r\n    fullName: string;\r\n    expertiseList: IOption[],\r\n    genreList: IOption[],\r\n    profileFile?: FileList,\r\n    coverFile?: FileList,\r\n    trackFile?: FileList,\r\n    trackTitle?: string,\r\n    profileImage?: any,\r\n    coverImage?: any,\r\n    selectedTrack?: string,\r\n    address: any;\r\n    tripAdded: boolean;\r\n    mediaUpdated: boolean;\r\n    locationText?: any;\r\n    trackUrl: string;\r\n    duration: number;\r\n    error: string | undefined;\r\n}\r\n\r\ninterface IProps {\r\n    userDetail?: any,\r\n    editProfile?: (data: IUserDetail) => Promise<any>,\r\n    editTrack?: (data: any) => Promise<any>,\r\n    deleteTrack?: (data: any) => Promise<any>,\r\n    expertiseList?: () => void,\r\n    genreList?: () => void,\r\n    getProfile?: () => void,\r\n    expertiseListArr?: IExpertiseItem[],\r\n    genreListArr?: IGenreItem[],\r\n    listTrack?: () => Promise<any>,\r\n    uploadProfile? : (file: FileList) => Promise<any>,\r\n    history: any,\r\n    addTrack?: (coverFile: FileList, trackFile: FileList, title: string, firstTrack: boolean, duration: string ) => Promise<any>\r\n}\r\n\r\ninterface Window {\r\n    [key:string]: any; // Add index signature\r\n  }\r\n  let windowObj : Window = window;\r\nclass EditProfile extends React.Component<IProps, State> {\r\n    readonly state: State = {error: undefined , duration: 0, trackUrl: '' , mediaUpdated: false, tripAdded: false, address: {}, modal: false, modalTrack: false, userDetail: new UserDetail(), fullName: '' , expertiseList: [], genreList: [] } ;\r\n    autocompleteInput: React.RefObject<any>;\r\n    autocomplete: any;\r\n\r\n    constructor(props: IProps){\r\n        super(props);\r\n        props.expertiseList && props.expertiseList();\r\n        props.genreList && props.genreList();\r\n        // props.listTrack && props.listTrack();\r\n        props.getProfile && props.getProfile();\r\n        this.autocompleteInput = React.createRef();\r\n        this.autocomplete = null;\r\n        this.handlePlaceChanged = this.handlePlaceChanged.bind(this);\r\n        Places.apiKey = \"AIzaSyDOplTnOzQM_tYwPVFqxueCYui4brD2j2g\";\r\n        Places.debug = true; // boolean;\r\n    } \r\n \r\n    \r\n      handlePlaceChanged(){\r\n        const place = this.autocomplete.getPlace();\r\n        // this.props.onPlaceLoaded(place);\r\n      }\r\n\r\n      searchPlaces = (place: string) => {\r\n        \r\n        Places.textsearch({ query: place}).then((response: any) => {\r\n            const { status, results } = response;\r\n            console.log(\"#response\", response);\r\n            \r\n        }).catch((err: any) => {\r\n            console.log(\"#searchPlaces\", err);\r\n            \r\n        });\r\n           \r\n            \r\n       \r\n      }\r\n      \r\n    componentDidMount(){\r\n        const { userDetail } = this.state;\r\n        this.setState({\r\n            fullName: `${userDetail.first_name || ''} ${userDetail.last_name || ''}`\r\n        });\r\n        // this.autocomplete = new windowObj.google.maps.places.Autocomplete(this.autocompleteInput.current,\r\n        //     {\"types\": [\"(cities)\"]});\r\n        //     const request = {\r\n        //         query: \"Museum of Contemporary Art Australia\",\r\n        //         fields: [\"name\", \"geometry\"],\r\n        //       };\r\n        //  let service = new windowObj.google.maps.places.PlacesService();\r\n        //  let that = this;\r\n        //  console.log('DDDDDDDDD');\r\n         \r\n        //  service.findPlaceFromQuery(\r\n        //     request,\r\n        //     (\r\n        //       results: any[],\r\n        //       status: any\r\n        //     ) => {\r\n        //         console.log(\"RESULT===\", status, results );\r\n\r\n        //       if (status === windowObj.google.maps.places.PlacesServiceStatus.OK) {\r\n        //         for (let i = 0; i < results.length; i++) {\r\n        //            console.log(\"RESULT\", i, results[0]);\r\n        //       }\r\n        //     }\r\n        //     }\r\n        //   );\r\n        // this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IProps){\r\n        let { expertiseList, genreList  } = this.state;\r\n        if(prevProps.expertiseListArr != this.props.expertiseListArr){\r\n            expertiseList = this.props.expertiseListArr && this.props.expertiseListArr.map((item : IExpertiseItem ) => { return {value: item.expertise_id, label: item.name}} ) || []\r\n            this.setState({expertiseList});\r\n        }\r\n        else if(prevProps.genreListArr != this.props.genreListArr){\r\n            genreList = this.props.genreListArr && this.props.genreListArr.map((item : IGenreItem ) => { return {value: item.genre_id, label: item.name}} ) || []\r\n            this.setState({genreList});\r\n        }else if(prevProps.userDetail != this.props.userDetail  ){\r\n            const userDetailProp = this.props.userDetail;\r\n            let {userDetail} = this.state;\r\n            if(userDetailProp  && !this.state.mediaUpdated){\r\n                userDetail.area_of_expertise_id = userDetailProp.expertise && userDetailProp.expertise.map((exp: any) => exp && exp.expertise_id).filter((exp: any) => exp != null);\r\n                userDetail.genre_id = userDetailProp.genre && userDetailProp.genre.map((genre: any) => genre && genre.genre_id).filter((exp: any) => exp != null);\r\n                userDetail.social_profile_link = userDetailProp.social_link;\r\n                userDetail.trip_from = userDetailProp.trip_from;\r\n                userDetail.trip_to = userDetailProp.trip_to;\r\n                userDetail.trip = (userDetailProp.trip || []).map((item: any) => item.trip);\r\n                userDetail.first_name = userDetailProp.first_name || \"\";\r\n                userDetail.last_name = userDetailProp.last_name || \"\";\r\n                userDetail.location = userDetailProp.location && userDetailProp.location.location;\r\n                userDetail.lat = (userDetailProp.location && userDetailProp.location.lat || '43.44') - 0;\r\n                userDetail.long =  (userDetailProp.location && userDetailProp.location.long || '12.76') - 0;\r\n                userDetail.zipcode =  (userDetailProp.location && userDetailProp.location.zipcode || \"78945\") - 0;\r\n                userDetail.description = userDetailProp.description;\r\n                userDetail.credits = userDetailProp.credits;\r\n                userDetail.user_status_id = true;\r\n\r\n                this.setState({\r\n                    fullName: `${userDetailProp.first_name || ''} ${userDetailProp.last_name || ''}`,\r\n                    userDetail,\r\n                    profileImage: userDetailProp.photo,\r\n                });\r\n            }else{\r\n                this.setState({ mediaUpdated : false})\r\n            }\r\n\r\n        }\r\n    }\r\n    \r\n    toggle = () => {\r\n      this.setState({ modal: !this.state.modal, profileFile: undefined, profileImage: undefined })\r\n    }; \r\n    \r\n    toggleTrack = () => {\r\n        let { userDetail } = this.props;\r\n        if(userDetail && userDetail.demo_track && userDetail.demo_track.length == 5){\r\n            toast.error(\"You can only add upto 5 tracks\");\r\n            return;\r\n        }\r\n       this.setState({ modalTrack: !this.state.modalTrack, selectedTrack: undefined, coverImage: undefined, coverFile: undefined, trackFile: undefined, trackTitle: undefined })\r\n    };\r\n\r\n    optionSelection = (event: any, field: string, index?: number) => { \r\n        const selectedData = JSON.parse(JSON.stringify(event));        \r\n        const { userDetail } = this.state;\r\n        switch(field){\r\n            case USER.AREA_OF_EXPERTISE :\r\n                    if(userDetail.area_of_expertise_id.includes(selectedData.value)){\r\n                        toast('Already Added');\r\n                        userDetail.area_of_expertise_id[index || 0] = \"\";\r\n                    }else{\r\n                        userDetail.area_of_expertise_id[index || 0] = selectedData.value;\r\n                    }\r\n                break;\r\n            case USER.GENRE :\r\n                if(userDetail.genre_id.includes(selectedData.value)){\r\n                    toast('Already Added');\r\n                    userDetail.genre_id[index || 0] = \"\";\r\n                }else{\r\n                    userDetail.genre_id[index || 0] = selectedData.value;\r\n                }\r\n                    // userDetail.genre_id = selectedData.value;\r\n                break;\r\n            case USER.LOCATION :\r\n                    userDetail.location = selectedData.value;\r\n                break;\r\n            case USER.TRIP1 :\r\n                    userDetail.trip[index || 0] = selectedData.value\r\n                    userDetail.trip_from = selectedData.value;\r\n                break;\r\n        }\r\n       \r\n        this.setState({userDetail}); \r\n    }\r\n\r\n    loadScript = (url: string, callback: () => void) => {\r\n        let script : any = document.createElement(\"script\"); // create script tag\r\n        script.type = \"text/javascript\";\r\n      \r\n        // when script state is ready and loaded or complete we will call callback\r\n        if (script.readyState) {\r\n          script.onreadystatechange = function() {\r\n            if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\r\n              script.onreadystatechange = null;\r\n              callback();\r\n            }\r\n          };\r\n        } else {\r\n          script.onload = () => callback();\r\n        }\r\n      \r\n        script.src = url; // load by url\r\n        document.getElementsByTagName(\"head\")[0].appendChild(script); // append to head\r\n      };\r\n\r\n    inputHandler = (event: any, index?: number) => {\r\n        event.stopPropagation();\r\n        const { userDetail } = this.state;\r\n        this.searchPlaces(event.target.value)\r\n        switch(event.target.name){\r\n            case 'name' :\r\n                    const value = event.target.value;\r\n                    const values = value.trim().split(' ');\r\n                    userDetail.first_name = values[0] || '';\r\n                    userDetail.last_name = values[1] || '';\r\n                    this.setState({fullName: event.target.value});\r\n                    this.setState({userDetail, fullName: event.target.value});\r\n                break;\r\n            case 'description': \r\n                    userDetail.description = event.target.value;   \r\n                    this.setState({userDetail});\r\n                break;\r\n            case 'credits': \r\n                    userDetail.credits = event.target.value;   \r\n                    this.setState({userDetail});\r\n                break;\r\n            case 'social': \r\n                    userDetail.social_profile_link[index || 0] = event.target.value;    \r\n                    this.setState({userDetail});\r\n                break;\r\n            case 'trackTitle': \r\n                    this.setState({trackTitle: event.target.value});\r\n                break;\r\n        }\r\n    }\r\n\r\n    saveProfile = (e:any) => {\r\n        e.preventDefault();\r\n        const { userDetail } = this.state; \r\n        const userDetailProp = this.props.userDetail;\r\n        userDetail.genre_id = userDetail.genre_id && userDetail.genre_id.filter((id: string) => id.trim() != \"\")\r\n        userDetail.area_of_expertise_id = userDetail.area_of_expertise_id && userDetail.area_of_expertise_id.filter((id: string) => id.trim() != \"\")\r\n        userDetail.social_profile_link = userDetail.social_profile_link && userDetail.social_profile_link.filter((id: string) => id.trim() != \"\")\r\n        \r\n        if(userDetail.first_name && userDetail.location &&\r\n             userDetail.genre_id && userDetail.genre_id.length > 0 &&  userDetail.area_of_expertise_id && userDetail.area_of_expertise_id.length > 0 &&  userDetail.social_profile_link && userDetail.social_profile_link.length > 0 && userDetailProp && userDetailProp.demo_track && userDetailProp.demo_track.length > 0 ){\r\n                this.setState({error: undefined})\r\n                this.props.editProfile && this.props.editProfile(this.state.userDetail).then((res) => {\r\n                    this.props.getProfile && this.props.getProfile();\r\n                    toast.success(\"Profile updated successfully\");\r\n                    this.props.history.push('/hub/view-profile');\r\n                }).catch((err : any) => {\r\n                    toast.error(\"Something went wrong\")\r\n                })\r\n        }else{\r\n            this.setState({error: \"error\"});\r\n            if(!userDetail.first_name || !userDetail.last_name){\r\n                toast.error(\"Please provide first and second name both\"); \r\n                return;\r\n            }\r\n            if(!userDetail.area_of_expertise_id || (userDetail.area_of_expertise_id && userDetail.area_of_expertise_id.length == 0)){\r\n                toast.error(\"Please add atleast one expertise\");\r\n                return;\r\n            }\r\n            if(!userDetail.genre_id || (userDetail.genre_id && userDetail.genre_id.length == 0)){\r\n                toast.error(\"Please add atleast one genre\");\r\n                return;\r\n            }\r\n            if(userDetail.social_profile_link && (userDetail.social_profile_link && userDetail.social_profile_link.length == 0)){\r\n                toast.error(\"Please add atleast one profile\");\r\n                return;\r\n            }\r\n            if(!userDetail.location){\r\n                toast.error(\"Please add location\");\r\n                return;\r\n            }\r\n            if(!userDetail.description){\r\n                toast.error(\"Please add description\");\r\n                return;\r\n            }\r\n            if(!userDetail.credits){\r\n                toast.error(\"Please add credits\");\r\n                return;\r\n            }\r\n            if(!userDetailProp.demo_track || (userDetailProp.demo_track && userDetailProp.demo_track.length == 0)){\r\n                toast.error(\"Please add atleast one track\");\r\n                return;\r\n            }\r\n            // toast.error(\"All fields required\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    addExpertise = () => {\r\n        const { userDetail } = this.state;\r\n        userDetail.area_of_expertise_id = userDetail.area_of_expertise_id ? userDetail.area_of_expertise_id : []\r\n        const index = userDetail.area_of_expertise_id.findIndex(val => val.trim() == \"\" ) ;\r\n        if(index > -1){\r\n            userDetail.area_of_expertise_id.splice(index,1);\r\n        }\r\n        userDetail.area_of_expertise_id.push(\"\");\r\n        this.setState({ userDetail });\r\n    }\r\n\r\n    addTrip = () => {\r\n        const { userDetail } = this.state;\r\n        userDetail.trip = userDetail.trip ? userDetail.trip : []\r\n        if(userDetail.trip.length < 3) {\r\n            const index = userDetail.trip.findIndex(val => val  == \"\" || false );\r\n            if(index > -1){\r\n                userDetail.trip.splice(index,1);\r\n            }\r\n            userDetail.trip.push( '');\r\n            this.setState({ userDetail });\r\n        }else{\r\n            toast(\"Cann't add more than 3 trips\")\r\n        }\r\n        \r\n    }\r\n\r\n    addGenre = () => {\r\n        const { userDetail } = this.state;\r\n        userDetail.genre_id = userDetail.genre_id ? userDetail.genre_id : []\r\n        const index = userDetail.genre_id.findIndex(val => val.trim() == \"\" )  ;\r\n        if(index > -1){\r\n            userDetail.genre_id.splice(index,1);\r\n        }\r\n        userDetail.genre_id.push(\"\");\r\n        this.setState({ userDetail });\r\n    }\r\n\r\n    addSocialMediaLink = () => {\r\n        const { userDetail } = this.state;\r\n        userDetail.social_profile_link = userDetail.social_profile_link ? userDetail.social_profile_link : []\r\n        const index = userDetail.social_profile_link && userDetail.social_profile_link.findIndex(val => val.trim() == \"\" ) || -1; \r\n        if(index > -1){\r\n            userDetail.social_profile_link.splice(index,1);\r\n        }\r\n        userDetail.social_profile_link.push(\"\");\r\n        this.setState({ userDetail });\r\n    }\r\n\r\n    deleteSocialMediaLink = (index: number) => {\r\n        const { userDetail } = this.state;\r\n        if(userDetail.social_profile_link.length == 1){\r\n            userDetail.social_profile_link = [];\r\n        }else {\r\n            userDetail.social_profile_link.splice(index, 1);\r\n        }\r\n        this.setState({userDetail});\r\n    }\r\n\r\n    deleteAreaOfExpertise = (index: number) => {\r\n        const { userDetail } = this.state;\r\n        if(userDetail.area_of_expertise_id.length == 1){\r\n            userDetail.area_of_expertise_id = [];\r\n        }else{\r\n            userDetail.area_of_expertise_id.splice(index, 1);\r\n        }\r\n        this.setState({userDetail});\r\n    }\r\n\r\n    deleteGenre = (index: number) => {\r\n        const { userDetail } = this.state;\r\n        if(userDetail.genre_id.length == 1){\r\n            userDetail.genre_id = []\r\n        }else{\r\n            userDetail.genre_id.splice(index, 1);\r\n        }\r\n        this.setState({userDetail});\r\n    }\r\n\r\n    onChangeHandler = (type: string, event:  FileList | null ) => {       \r\n        if(event){\r\n            if(type == 'profile'){\r\n                const profileImage = URL.createObjectURL(event[0]);\r\n                this.setState({profileFile: event, profileImage})\r\n            }\r\n            else if(type == 'cover_pic'){\r\n                const coverImage = URL.createObjectURL(event[0])\r\n                this.setState({coverFile: event, coverImage})\r\n            }\r\n            else if(type == 'track'){\r\n                const trackUrl = URL.createObjectURL(event[0]);\r\n                const selectedTrack = event[0].name;\r\n                this.setState({trackUrl, trackFile: event, selectedTrack})\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    saveProfilePic = () => {\r\n        const { profileFile } = this.state;\r\n        if(profileFile){\r\n            this.props.uploadProfile && this.props.uploadProfile(profileFile).then((res) => {\r\n                this.props.getProfile && this.props.getProfile();\r\n                toast(\"Profile pic updated\");\r\n                this.setState({modal: false, mediaUpdated: true})\r\n            })\r\n            .catch((error) => {\r\n                toast(\"Something went wrong\");\r\n            });\r\n        }else{\r\n            toast(\"Provide profile pic\");\r\n        }\r\n    }\r\n\r\n    addTrack = () => {\r\n        const { coverFile, trackFile, trackTitle, duration } = this.state; \r\n        if(coverFile && trackFile && trackTitle){\r\n            const firstTrack = this.props.userDetail.demo_track && this.props.userDetail.demo_track.length == 0;\r\n            this.props.addTrack && this.props.addTrack(coverFile, trackFile, trackTitle, firstTrack, duration+\"\" ).then((res) => {\r\n                this.props.getProfile && this.props.getProfile();\r\n                toast('Track added successfully');\r\n                this.setState({modalTrack: false, mediaUpdated: true});\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"error\", error);\r\n                toast('something went wrong');\r\n            });\r\n        }else{\r\n            toast(\"Provide all fields\");\r\n        }\r\n    }\r\n\r\n    editTrackStatus = (trackId : string, primary: number) => {\r\n        const data = {\r\n            track_id: trackId,\r\n            primary\r\n        }\r\n        this.props.editTrack && this.props.editTrack(data).then((res:any) => {\r\n            toast(\"Track updated\");\r\n            this.props.getProfile && this.props.getProfile();\r\n        }).catch((err: any) => {\r\n            toast('something went wrong')\r\n        })\r\n    }\r\n    \r\n    removeDemoTrack = (trackId : string) => {\r\n        const data = {\r\n            track_id: trackId,\r\n        }\r\n        this.props.deleteTrack && this.props.deleteTrack(data).then((res:any) => {\r\n            toast(\"Track deleted\");\r\n            this.props.getProfile && this.props.getProfile();\r\n        }).catch((err: any) => {\r\n            toast('something went wrong')\r\n        })\r\n    }\r\n\r\n    handleChange = (address : any) => {\r\n        \r\n        this.setState({ address });\r\n    };\r\n    \r\n    handleSelect = (address : any) => {\r\n        geocodeByAddress(address)\r\n        .then(results => getLatLng(results[0]))\r\n        .then(latLng => console.log('Success', latLng))\r\n        .catch(error => console.error('Error', error));\r\n    };\r\n \r\n    removeLocation = () => {\r\n        let {userDetail} = this.state;\r\n        userDetail.location = '';\r\n        userDetail.lat = 43.44;\r\n        userDetail.long = 43.44;\r\n        this.setState({userDetail});\r\n    }\r\n\r\n    removeTripTo = ( index: number ) => {\r\n        let {userDetail} = this.state;\r\n        if(userDetail.trip){\r\n             userDetail.trip.splice(index, 1)\r\n        } \r\n        this.setState({userDetail});\r\n\r\n        \r\n        \r\n    }\r\n\r\n     \r\n\r\n    getTime = (timeInSec: number) => {\r\n        let duration = moment.duration(timeInSec, \"seconds\");\r\n        let time = \"\";\r\n        let hours = duration.hours();\r\n        if (hours > 0) { time = hours + \":\" ; }\r\n        time = time + duration.minutes() + \":\" + duration.seconds();\r\n        return time;\r\n    }\r\n\r\n    render() { \r\n        const userDetailProp = this.props.userDetail;\r\n        console.log('this props userDetail', this.props.userDetail);\r\n        \r\n        const {  error, modal, modalTrack, userDetail, tripAdded, coverImage, selectedTrack, fullName, expertiseList, genreList, profileImage } = this.state;\r\n        \r\n        return(\r\n            <div className=\"edit-profile-page\">\r\n                <ToastContainer />\r\n                <Row className=\"m-0\">\r\n                    <Col md=\"8\">\r\n                        {/* EDIT COVER PHOTO */}\r\n                        <h1>Edit Profile</h1>\r\n                        <div className=\"uploadPhoto\">\r\n                            <div className=\"dummy\">\r\n                                <img src={profileImage || cover} className=\"w-100\"/>\r\n                            </div>\r\n                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                <div>\r\n                                    <h2>Edit Photo:</h2>\r\n                                    <p className=\"mb-0\">Upload a new photo from your device</p>\r\n                                </div> \r\n                                <Button className=\"add-btn mt-0\" onClick={this.toggle}><i className=\"icon-upload\"></i> Upload Photo</Button>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        <Form className=\"form\" onSubmit={this.saveProfile}>\r\n                            <div className=\"input-area\">\r\n                                {/* FULL NAME */}\r\n                                <FormGroup>\r\n                                    <Label>Name:</Label>\r\n                                    {console.log('fullName', fullName)}\r\n                                    \r\n                                    <Input type=\"text\" name=\"name\" id=\"cardid\" className={ _.isEmpty(fullName) && error ? \"border-error\" : \"\"} placeholder=\"Enter Name Here\" onChange={this.inputHandler} value={fullName !== \" \" ? fullName : undefined} />\r\n                                    {/* <span className=\"edit-btn\"><i className=\"icon-edit2\"></i>Edit</span> */}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"input-area\">\r\n                                <Label>Area of expertise:</Label>\r\n                                {\r\n                                    userDetail.area_of_expertise_id && userDetail.area_of_expertise_id.map((experties, index) => (\r\n                                        <div className=\"d-flex\"> \r\n                                            <Select\r\n                                                options={expertiseList}\r\n                                                // value={expertiseList.filter(e => e.value == userDetail.area_of_expertise_id[index])}\r\n                                                placeholder={'Choose Area of Expertise'}\r\n                                                className={error && expertiseList.filter(e => e.value == userDetail.area_of_expertise_id[index]).length == 0 ? \"select-custom mb-2 border-error\" : \"select-custom mb-2\"}\r\n                                                onChange= { (event: any) => {\r\n                                                    this.optionSelection(event, USER.AREA_OF_EXPERTISE, index)\r\n                                                } }\r\n                                                \r\n                                            />\r\n                                            <div className={error && expertiseList.filter(e => e.value == userDetail.area_of_expertise_id[index]).length == 0 ? \"delete border-error\" : \"delete\"}  onClick={() => this.deleteAreaOfExpertise(index)} >\r\n                                                <i className=\"icon-delete\"></i> Delete\r\n                                            </div>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                                <div>\r\n                                    <Button className=\"add-btn\"  onClick={ this.addExpertise} ><i className=\"icon-plus-square\" ></i>Add New</Button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"input-area\">\r\n                                <Label>Genre:</Label>\r\n                                {\r\n                                    userDetail.genre_id && userDetail.genre_id.map((genre, index) => (\r\n                                        <div className=\"d-flex\"> \r\n                                            <Select\r\n                                                options={genreList}\r\n                                                // value={ge dnreList.filter(e => e.value == userDetail.genre_id[index])}\r\n                                                placeholder={'Choose Genre'} \r\n                                                className={error && genreList.filter(e => e.value == userDetail.genre_id[index]).length == 0 ? \"select-custom mb-2 border-error\" : \"select-custom mb-2\"}\r\n                                                onChange= { (event: any) => {\r\n                                                    this.optionSelection(event, USER.GENRE, index)\r\n                                                } }\r\n                                            />\r\n                                            <div className={error && genreList.filter(e => e.value == userDetail.genre_id[index]).length == 0 ? \"delete border-error\" : \"delete\"} onClick={() => this.deleteGenre(index)} >\r\n                                                <i className=\"icon-delete\"></i> Delete\r\n                                            </div>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                                <div>\r\n                                    <Button className=\"add-btn\"  onClick={ this.addGenre} ><i className=\"icon-plus-square\"></i>Add New</Button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"input-area\">\r\n                                <FormGroup className=\"link-group\">\r\n                                    <Label>Links to your social networks:</Label>\r\n                                    <p>Make sure members will be able to get in touch with you through your socials</p>\r\n                                    {\r\n                                        userDetail.social_profile_link && userDetail.social_profile_link.map((element, index) => (\r\n                                            <div  className=\"d-flex mb-2\">\r\n                                                <Input type=\"text\" name=\"social\" value={userDetail.social_profile_link[index]} \r\n                                                onChange={(event) => this.inputHandler(event, index)} \r\n                                                placeholder=\"Put Your Social Media Link Here\"\r\n                                                className={ _.isEmpty(userDetail.social_profile_link[index]) && error ? \"border-error\" : \"\"}  />\r\n                                                <div className={_.isEmpty(userDetail.social_profile_link[index]) && error ? \"delete border-error\" : \"delete\"} onClick={() => this.deleteSocialMediaLink(index)} >\r\n                                                    <i className=\"icon-delete\"></i> Delete\r\n                                                </div>\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                    <div>\r\n                                    <Button className=\"add-btn\" onClick={this.addSocialMediaLink} ><i className=\"icon-plus-square\"></i>Add New</Button>\r\n                                </div>\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"input-area location-input-area\">\r\n                                <Label>Your location:</Label>\r\n                                <p>Where are you based?</p>\r\n                                <div className=\"d-flex\">\r\n                                {/* <PlacesAutocomplete\r\n                                    value={this.state.locationText}\r\n                                    onChange={value => { console.log(\"Value\", value);\r\n                                     this.setState({ locationText: value })}}\r\n                                    >\r\n                                    {this.renderFunc}\r\n                                </PlacesAutocomplete> */}\r\n                                <GooglePlacesAutocomplete\r\n                                    apiKey=\"AIzaSyDOplTnOzQM_tYwPVFqxueCYui4brD2j2g\" \r\n                                    selectProps={{\r\n                                        placeholder : \"Enter location\",\r\n                                        value: this.state.userDetail.location && {label: this.state.userDetail.location, value: {} } || null,\r\n                                        onChange: (data: any) => {  \r\n                                            let {userDetail} = this.state;\r\n                                            userDetail.location = data.label;\r\n                                            geocodeByAddress(data.label)\r\n                                            .then(results => getLatLng(results[0]))\r\n                                            .then(({ lat, lng }) =>{\r\n                                                userDetail.lat = lat;\r\n                                                userDetail.long= lng;\r\n                                                this.setState({userDetail})\r\n                                            });\r\n                                        },\r\n                                      }}\r\n                                />\r\n                                {/* <input ref={this.autocompleteInput} value={this.state.locationText} style={{ display: \"none\", backgroundColor:\"#000000\"}}  id=\"autocomplete\" placeholder=\"Enter your address\" type=\"text\"></input>  */}\r\n                                    {/* <Select\r\n                                        options={options2}\r\n                                        value={options2.filter(e => e.value == userDetail.location)}\r\n                                        placeholder={'Los Angeles'}\r\n                                        className=\"select-custom\"\r\n                                        onChange= { (event: ValueType<IOption>) => {\r\n                                            console.log(\"#onChange\", event);\r\n                                            \r\n                                            this.optionSelection(event, USER.LOCATION)\r\n                                        } }\r\n                                        onInputChange = {(event: any) => {\r\n                                            console.log(\"#onInputChange\", event);\r\n                                            // this.setState({locationText: event})\r\n                                            geocodeByAddress(event).then((res: any) => {\r\n                                                console.log(\"$geocodeByAddress\", res);\r\n                                            })\r\n                                        }}\r\n                                    /> */}\r\n\r\n                                    {/* <PlacesAutocomplete\r\n                                        value={this.state.address}\r\n                                        onChange={this.handleChange}\r\n                                        onSelect={this.handleSelect} >\r\n                                        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                                        <div>\r\n                                            <input\r\n                                            {...getInputProps({\r\n                                                placeholder: 'Search Places ...',\r\n                                                className: 'location-search-input',\r\n                                            })}\r\n                                            />\r\n                                            <div className=\"autocomplete-dropdown-container\">\r\n                                            {loading && <div>Loading...</div>}\r\n                                            {suggestions.map(suggestion => {\r\n                                                const className = suggestion.active\r\n                                                ? 'suggestion-item--active'\r\n                                                : 'suggestion-item';\r\n                                                // inline style for demonstration purpose\r\n                                                const style = suggestion.active\r\n                                                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                                                : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                                                return (\r\n                                                <div\r\n                                                    {...getSuggestionItemProps(suggestion, {\r\n                                                    className,\r\n                                                    style,\r\n                                                    })}\r\n                                                >\r\n                                                    <span>{suggestion.description}</span>\r\n                                                </div>\r\n                                                );\r\n                                            })}\r\n                                            </div>\r\n                                        </div>\r\n                                        )}\r\n                                </PlacesAutocomplete> */}\r\n                                    <div className=\"delete\" onClick={ this.removeLocation } >\r\n                                        <i className=\"icon-delete\"></i> Delete\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"input-area\">\r\n                                <Label>Upcoming trips:</Label>\r\n                                <p>Got any travel plans? Add the destinations here so that members can get in touch to book in a session.</p>\r\n                                    {\r\n                                        userDetail.trip && userDetail.trip.map((item: any, index: number) => ( \r\n                                            <div className=\"mb-2\">\r\n                                                <div className=\"d-flex\">\r\n                                                <FormGroup className=\"w-100\"> \r\n                                                {\r\n                                                    /* <Select\r\n                                                        options={options2}\r\n                                                        value={options2.filter(e => e.value == userDetail.trip[index])}\r\n                                                        placeholder={'Los Angeles'}\r\n                                                        className=\"select-custom\"\r\n                                                        onChange= { (event: ValueType<IOption>) => {\r\n                                                            this.optionSelection(event, USER.TRIP1, index)\r\n                                                        } }\r\n                                                    /> */\r\n                                                }\r\n                                                <Input type=\"text\" name={\"trip\"+index} id={\"cardid\"+index} placeholder=\"Enter the Destination of Your Trip\"\r\n                                                 onChange={(event: any) => {this.optionSelection({value: event.target.value}, USER.TRIP1, index)}}\r\n                                                  value={userDetail.trip[index]}\r\n                                                  className={ _.isEmpty(userDetail.trip[index]) && error ? \"border-radius-right-none w-100 border-error\" : \"border-radius-right-none w-100\"}/>\r\n                                                </FormGroup>\r\n                                                <div className=\"delete\"  onClick={ () => this.removeTripTo(index) } >\r\n                                                    <i className=\"icon-delete\"></i> Delete\r\n                                                </div>\r\n                                            \r\n                                            </div>        \r\n                                            </div>\r\n                                        ))\r\n                                    }   \r\n                                <Button className=\"add-btn\"  onClick={ this.addTrip} ><i className=\"icon-plus-square\" ></i> Add New </Button>\r\n\r\n                            </div>\r\n                            <div className=\"input-area\">\r\n                                <FormGroup>\r\n                                    <Label>Description:</Label>\r\n                                    <p>Tell the LOOP Community a bit about yourself</p>\r\n                                    <Input type=\"textarea\" name=\"description\" id=\"cardid\" onChange={this.inputHandler} \r\n                                    placeholder=\"My work explores the relationship between multiculturalism and romance tourism. With influencers as diverse as Machiavelli and Andy Warhol, new letiations are created from both orderly and random textures.\" \r\n                                    value={userDetail.description} className={ _.isEmpty(userDetail.description) && error ? \"border-error\" : \"\"} />\r\n                                    {/* <span className=\"edit-btn\"><i className=\"icon-edit2\"></i>Edit</span> */}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"input-area\">\r\n                                <FormGroup>\r\n                                    <Label>Credits:</Label>\r\n                                    <p>Who have you  worked with?</p>\r\n                                    <Input type=\"textarea\" name=\"credits\" id=\"cardid\" onChange={this.inputHandler} \r\n                                        placeholder=\"Jean Tanner, Lucas Milo, Lily Hame, Jeff Rine, Sam Tolkin, Maria Wes\" \r\n                                        value={userDetail.credits} className={ _.isEmpty(userDetail.credits) && error ? \"border-error\" : \"\"} />\r\n                                    {/* <span className=\"edit-btn\"><i className=\"icon-edit2\"></i>Edit</span> */}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <h2>Demo tracks:</h2>\r\n                            <p>Upload up to 5 tracks showcasing your skills. Make sure one is starred - this will be the first track to play when members find you on the Discover page (make it a good one).</p>\r\n                            {\r\n                                userDetailProp && userDetailProp.demo_track.map((track: any, index:number) => (\r\n                                    <Card className=\"audioCard\"> \r\n                                        <div className=\"reswidth1\">\r\n                                            <div className=\"d-flex\">\r\n                                                <img src={track.cover_image || audioProfile} alt=\"\"  />\r\n                                                <div  className=\"ml-3\">\r\n                                                    <h1>{track.name}</h1>\r\n                                                    <p>{`${userDetail.first_name || ''} ${userDetail.last_name || ''}`}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"d-flex justify-content-between w-50 reswidth2\">\r\n                                            <p className=\"time\">{this.getTime(track.duration)}</p>\r\n                                            <p className=\"primary-text active\"><i className={ track.primary == 1 ? \"icon-star\": \"icon-rating\"} onClick={()=>{ this.editTrackStatus(track.track_id, track.primary == 1 ? 0 : 1)\r\n                                                }} ></i> <span>{ track.primary == 0 ? '' : 'Primary Demo'}</span></p>\r\n                                            <div className=\"delete delete-track\" onClick={ () => this.removeDemoTrack(track && track.track_id) }><i className=\"icon-delete\"></i> Delete</div>\r\n                                        </div>\r\n                                    </Card>\r\n                                ) )\r\n                                } \r\n                            \r\n                            <Button className=\"add-btn mobilenone\" onClick={this.toggleTrack}><i className=\"icon-play\"></i> Upload Track</Button>\r\n                            <Button className=\"button-btnGradiant save-btn\" type=\"submit\" onClick={this.saveProfile} >\r\n                                <i className=\"icon icon-save \"></i>   Save Changes\r\n                            </Button>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            <div>\r\n\r\n            </div>\r\n\r\n            <Modal isOpen={modal} toggle={this.toggle} className=\"add-to-netwok-modal upload-modal\">\r\n                <ModalHeader toggle={this.toggle}> </ModalHeader>\r\n                <ModalBody>\r\n                    <h2>Add a photo to your profile</h2>\r\n                    <p className=\"text-left mt-5 mb-2\">Upload image for profile:</p>\r\n                    <div className=\"upload-f-device\">\r\n                        <img src={profileImage || cover} />\r\n                        <div className=\"upload-devicebtn\">\r\n                            <input type=\"file\" name=\"file-1[]\" id=\"file-1\" accept=\".jpg,.JPG,.jpeg,.JPEG,.png,.PNG\" onChange={(event) => this.onChangeHandler('profile', event.target.files)} className=\"inputfile inputfile-1\" />\r\n                            <label htmlFor=\"file-1\"><i className=\"icon icon-share \"></i>  Upload from Device</label>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <Button className=\"button-btnGradiant chat-btn\" onClick={this.saveProfilePic} >\r\n\r\n                        <i className=\"icon icon-upload \"></i>  Add profile photo\r\n                    </Button>\r\n                </ModalBody>\r\n            </Modal>\r\n\r\n            <Modal isOpen={modalTrack} toggle={this.toggleTrack} className=\"add-to-netwok-modal upload-modal track-modal\">\r\n                <ModalHeader toggle={this.toggleTrack}> </ModalHeader>\r\n                <ModalBody>\r\n                    <h2>Upload Tracks</h2>\r\n                    <p className=\"pg-1\">Any reference tracks or demos you want to upload to this project?</p>\r\n                    <p className=\"text-left mt-4 mb-2\">Upload image for cover:</p>\r\n                    <div className=\"upload-f-device\">\r\n                        <img src={ coverImage || cover} />\r\n                        <div className=\"upload-devicebtn\">\r\n                            <input type=\"file\" name=\"file-1[]\" id=\"file-3\" accept=\".jpeg,.png,.jpg,.JPEG,.JPG,.PNG\" onChange={(event) => this.onChangeHandler('cover_pic', event.target.files)} className=\"inputfile inputfile-1\" />\r\n                            <label htmlFor=\"file-3\"><i className=\"icon icon-share \"></i>  Upload from Device</label>\r\n                        </div>\r\n                    </div>\r\n                    <FormGroup>\r\n                        <Label className=\"text-left d-block\">Title:</Label>\r\n                        <Input type=\"text\" name=\"trackTitle\" id=\"trackTitle\" onChange={this.inputHandler} placeholder=\"Enter the title of the the track\" />\r\n                    </FormGroup>\r\n                    <FormGroup className=\"trackFile\">\r\n                        <Label  className=\"text-left d-block\">Upload track file:</Label>\r\n                        <Input type=\"textarea\" name=\"cardnumber\" id=\"cardid\" value={selectedTrack} placeholder=\"We support AIFF, WAVE, FLAC, OGG, MP2, MP3, AAC, AMR and WMA file\" />\r\n                        <div className=\"upload-devicebtn\">\r\n                            <input type=\"file\" name=\"file-1[]\" accept=\".mp3,audio/*\" id=\"file-2\" onChange={(event) => this.onChangeHandler('track', event.target.files)} className=\"inputfile inputfile-1\" />\r\n                            <label htmlFor=\"file-2\"><i className=\"icon icon-share \"></i>  Upload from Device</label>\r\n                        </div>\r\n                    </FormGroup>\r\n                    {console.log(\"trackUrl\", this.state.trackUrl)}\r\n                    <audio id=\"audio\" src={this.state.trackUrl} onCanPlayThrough={(e: any) => {\r\n                        console.log(\"#current\", e);\r\n                        console.log(\"#current file\", e.currentTarget.duration);\r\n                        let seconds = e.currentTarget.duration;\r\n                        this.setState({duration: seconds})\r\n                    }} ></audio>\r\n                    <Button className=\"button-btnGradiant chat-btn\" onClick={this.addTrack}  >\r\n                        <i className=\"icon icon-play \"></i>  Add Track\r\n                    </Button>\r\n                </ModalBody>\r\n            </Modal>\r\n            </div>\r\n        )\r\n    } \r\n    \r\n}\r\n \r\n\r\nconst mapDispatchToProps = {\r\n    editProfile,\r\n    expertiseList,\r\n    genreList,\r\n    uploadProfile,\r\n    addTrack,\r\n    listTrack,\r\n    getProfile,\r\n    editTrack,\r\n    deleteTrack\r\n}\r\n\r\nconst mapStateToProps = ( state: any ) => {\r\n    return { \r\n        expertiseListArr: state.masterData.expertiseList,\r\n        genreListArr: state.masterData.genreList,\r\n        userDetail: state.user.profile,\r\n    }\r\n} \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProfile);","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/home_page/HomePage.tsx",[],"/Users/appleapple/Downloads/loop/src/features/dashboard/hub/view_profile/ViewProfile.tsx",["650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667"],"import React from 'react';\r\nimport './ViewProfile.scss';\r\nimport audioProfile1 from '../../../../assets/images/view-my-profile.png'\r\nimport { Row, Col, Button, Card } from 'reactstrap';\r\nimport audioProfile from '../../../../assets/images/audioProfile.png';\r\nimport FooterDashboard from '../../common/footer_dahboard/FooterDashboard';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getProfile, playTrack } from '../../../../redux/user/action';\r\nimport moment from 'moment';\r\n\r\nclass ViewUserProfile extends React.Component<IProps, IState> {\r\n    \r\n    readonly state: IState = { playingTrack: {}};\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n    \r\n    componentWillMount(){\r\n        this.props.getProfile && this.props.getProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IProps){\r\n        if(prevProps.playingTrack != this.props.playingTrack){\r\n            const playingTrack = this.props.playingTrack && this.props.playingTrack;\r\n            this.setState({playingTrack})\r\n        }\r\n    }\r\n\r\n    trackClicked = (item: any) => {\r\n        const { playingTrack, userDetail } = this.props;\r\n        console.log(\"#playingTrack\", playingTrack);\r\n        let isPaused  = false;\r\n        if(playingTrack){\r\n            isPaused =  playingTrack.track_id != item.track_id ? false : !playingTrack.isPaused ;\r\n        }\r\n        item.first_name = userDetail.first_name;\r\n        item.last_name = userDetail.last_name;\r\n        this.props.playTrack(item, isPaused)\r\n    }\r\n\r\n    \r\n    getTime = (timeInSec: number) => {\r\n        let duration = moment.duration(timeInSec, \"seconds\");\r\n        let time = \"\";\r\n        let hours = duration.hours();\r\n        if (hours > 0) { time = hours + \":\" ; }\r\n        time = time + duration.minutes() + \":\" + duration.seconds();\r\n        return time;\r\n    }\r\n\r\n    getSocialMediaIcons = () => {\r\n        let { userDetail } = this.props;\r\n        return ( \r\n            <> \r\n            {\r\n                userDetail && userDetail.social_link && userDetail.social_link.map((item : any) => {\r\n                    let jsx = <a target=\"_blank\"  href=\"\"><i className=\"icon\" /></a>\r\n                    if(item.includes(\"spotify.com\")){ \r\n                        jsx = <a target=\"_blank\"  href={item}><i className=\"icon icon-spotify\" /></a>\r\n                    }else if(item.includes(\"soundcloud.com\")){ \r\n                        jsx = <a target=\"_blank\"  href={item}><i className=\"icon icon-soundcloud\" /></a>\r\n                    }else if(item.includes(\"youtube.com\")){ \r\n                        jsx = <a  target=\"_blank\" href={item}><i className=\"icon icon-youtube\" /></a>\r\n                    }else if(item.includes(\"instagram.com\")){ \r\n                        jsx = <a target=\"_blank\"  href={item}><i className=\"icon icon-instagram\" /></a>\r\n                    }\r\n                    return jsx;\r\n                })\r\n            }\r\n                \r\n            </>\r\n         )\r\n    }\r\n\r\n    render() {\r\n        console.log(\"props\", this.props.userDetail);\r\n        const { userDetail = {} } = this.props;\r\n        const {playingTrack} = this.state;\r\n        const primaryTrack =  userDetail.demo_track && userDetail.demo_track.find((item: any) => item.primary == '1');\r\n\r\n        return(\r\n            <div className=\"view-profile-page\">\r\n                <div className=\"view-profile\">\r\n                    <div className=\"view-profile-head\" style={{backgroundImage: 'url(' + userDetail.photo + ')'}}>\r\n                            {/* <img src={audioProfile1} alt=\"profile\" className=\"w-100 \"/> */}\r\n                            <div className=\"profile-section\">\r\n                            <Row>\r\n                                <Col md=\"8\">\r\n                                    <p className=\"status\">{ userDetail.online == '1' ? 'ONLINE' : 'OFFLINE'}</p>\r\n                                    <h2>{`${userDetail.first_name || \"\"} ${userDetail.last_name || \"\"}`}</h2>\r\n                                    <p>{ userDetail.expertise && userDetail.expertise.map((item : any) => item && item.name).join(' | ')  }</p>\r\n                                </Col>\r\n                                <Col md=\"4\" className=\"text-right\">\r\n                                    <div className=\"social-icon\">\r\n                                        {this.getSocialMediaIcons()}\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            \r\n                            \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <Row className=\"bottom-section\">\r\n                        <Col  lg=\"12\" xl=\"7\">\r\n                            <div className=\"left-col\">\r\n                                \r\n                                <div className=\"remove-network\">\r\n                                    <Link to=\"/hub/edit-profile\">\r\n                                    <Button className=\"border-gradiant-btn edit-profile-btn\" >\r\n                                        <div className=\"inner-module\">\r\n                                            <span>\r\n                                            <i className=\"icon icon-edit \"></i>  Edit Profile\r\n                                            </span>\r\n                                        \r\n                                        </div>\r\n                                        \r\n                                    </Button>\r\n                                    </Link>\r\n                                \r\n                                </div> \r\n                                \r\n                                <div className=\"d-flex justify-content-between breadcrum\">\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <i className=\"icon icon-map-marked-alt\"></i> {userDetail.location && userDetail.location.location }\r\n                                    </div>\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        { userDetail.trip && userDetail.trip.length > 0 && <i className=\"icon icon-plane-departure\"></i> }\r\n                                        {\r\n                                            userDetail.trip && userDetail.trip.map((city: any, index: number) => (\r\n                                                <>\r\n                                                    <div className=\"d-flex\">\r\n                                                    {city.trip} \r\n                                                    { index < userDetail.trip.length -1  && <i className=\"icon icon-long-right-arrow\"></i>}\r\n                                                    {/* <i className=\"icon icon-long-right-arrow\"></i> */}\r\n                                                    {/* Tokyo */}\r\n                                                    </div>\r\n                                                </>\r\n                                            )) || <></>\r\n                                        } \r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mt-3\">\r\n                                    <h3>Genre:</h3>\r\n                                      <p>\r\n                                        {\r\n                                            userDetail.genre && userDetail.genre.map((item: any, index: number) => (\r\n                                                <>\r\n         \r\n                                                    {item.name} \r\n                                                    { index < userDetail.genre.length -1  && ', '}\r\n                                                        \r\n                                                </>\r\n                                            )) || <></>\r\n                                        } \r\n                                    </p>\r\n                                </div>\r\n                                \r\n                                <div className=\"mt-3\">\r\n                                    <h3>Description:</h3>\r\n                                      <p>{userDetail.description}</p>\r\n                                    <h3>Credits:</h3>\r\n                                    <p>{ userDetail.credits }</p>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col  lg=\"12\" xl=\"5\">\r\n                            <div className=\"right-col\">\r\n                                {  primaryTrack && \r\n                                    <>\r\n                                        <div className=\"primary-demo\">\r\n                                            <img src={primaryTrack.cover_image || audioProfile} alt=\"\" className=\"w-100\" />\r\n                                            <p><i className=\"icon icon-star\"></i> Primary Demo</p>\r\n                                        </div> \r\n                                        <Card className=\"audioCard\" onClick={() => this.trackClicked(primaryTrack)}> \r\n                                            <div>\r\n                                                <div className=\"d-flex\">\r\n                                                    <img src={primaryTrack.cover_image || audioProfile} alt=\"\"  />\r\n                                                    <div  className=\"ml-3\">\r\n                                                        <h1>{primaryTrack.name}</h1>\r\n                                                        <p>{`${userDetail.first_name} ${userDetail.last_name}`}</p>\r\n                                                    </div>\r\n                                                </div>\r\n                                                \r\n                                            </div>\r\n                                            <div className=\"d-flex\">\r\n                                                <p className=\"time\">{this.getTime(primaryTrack.duration)}</p>\r\n                                                <i className={ playingTrack.track_id == primaryTrack.track_id && !playingTrack.isPaused ? \"icon icon-pause\" : \"icon icon-next\"}></i>\r\n                                            </div>\r\n                                        </Card> \r\n                                    </>\r\n                                }\r\n                                {\r\n                                    userDetail.demo_track && userDetail.demo_track.filter((item: any) => item.primary == '0').map((track: any) => (\r\n                                        <Card className=\"audioCard\"  onClick={() => this.trackClicked(track)}> \r\n                                            <div>\r\n                                                <div className=\"d-flex\">\r\n                                                    <img src={track.cover_image || audioProfile} alt=\"\"  />\r\n                                                    <div  className=\"ml-3\">\r\n                                                        <h1>{track.name}</h1>\r\n                                                        <p>{`${userDetail.first_name} ${userDetail.last_name}`}</p>\r\n                                                    </div>\r\n                                                </div>\r\n                                                \r\n                                            </div>\r\n                                            <div className=\"d-flex\">\r\n                                                <p className=\"time\">{this.getTime(track.duration)}</p>\r\n                                                <i className={ playingTrack.track_id == track.track_id && !playingTrack.isPaused ? \"icon icon-pause\" : \"icon icon-next\"}></i>\r\n                                            </div>\r\n                                        </Card>\r\n                                    ))\r\n                                }\r\n                                {/*  icon-pause icon-next */}\r\n                              </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                <FooterDashboard />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ninterface IState {\r\n    playingTrack: any\r\n}\r\n\r\ninterface IProps {\r\n    getProfile?: () => void,\r\n    userDetail?: any;\r\n    playingTrack: any;\r\n    playTrack: (data: any, isPaused: boolean) => Promise<any>,\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getProfile, \r\n    playTrack\r\n}\r\n\r\nconst mapStateToProps = ( state: any ) => {\r\n    return {  \r\n        userDetail: state.user.profile,\r\n        playingTrack: state.user.playingTrack,\r\n    }\r\n} \r\n\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewUserProfile);","/Users/appleapple/Downloads/loop/src/features/dashboard/common/mobile_footer/MobileFooter.tsx",["668","669"],"import React  from 'react';\r\nimport { Nav } from 'reactstrap';\r\nimport './MobileFooter.scss'\r\nimport { Link } from 'react-router-dom';\r\nimport YourNetwork from '../your_network/YourNetwork';\r\ninterface State {\r\n    network: boolean;\r\n }\r\n class MobileFooter extends React.Component<{}, State> { \r\n    readonly state : State = { network: false}\r\n    constructor(props: any){\r\n        super(props)\r\n    }\r\n    toggleNetwork = () => {\r\n        this.setState({ network : !this.state.network});\r\n    };\r\n\r\n    render () {\r\n        const { network } =  this.state;\r\n    return(\r\n        <>\r\n       <Nav className=\"mobile-footer mobile\">\r\n       <li className={window.location.hash.split('/')[1] === 'discovery' ? 'active' : '' }>\r\n            <Link to='/discovery'><i className=\"icon icon-discover\"></i> Discover</Link>\r\n        </li>\r\n       <li className={window.location.hash.split('/')[1] === 'hub' && window.location.hash !== '#/hub/create-project' ? 'active' : '' }>\r\n        <Link to='/hub'><i className=\"icon icon-hub\"></i> Hub</Link>\r\n       </li>\r\n       <li onClick={this.toggleNetwork}>\r\n        <a><i className=\"icon icon-network\"></i> My Network</a>\r\n        </li>\r\n       <li className={window.location.hash === '#/hub/create-project' ? 'active' : '' }>\r\n       <Link to='/hub/create-project'><i className=\"icon icon-plus-square\"></i> Create</Link>\r\n           </li>\r\n   </Nav>\r\n   {network && <YourNetwork toggleNetwork={this.toggleNetwork}  network={network}/>}\r\n   </>\r\n    )\r\n}\r\n }\r\n\r\nexport default  MobileFooter;","/Users/appleapple/Downloads/loop/src/features/dashboard/common/header_dashboard/HeaderDashboard.tsx",["670","671","672"],"import React  from 'react';\r\nimport { Row, Nav, Col, Button } from 'reactstrap';\r\nimport './HeaderDashboard.scss'\r\nimport logo from '../../../../assets/images/logo.svg'\r\nimport Notification from '../../common/notification/Notification'\r\nimport {     Link } from 'react-router-dom';\r\nimport { History } from 'history';\r\nimport { getNotification, notificationFailure } from '../../../../redux/user/action';\r\nimport { connect } from 'react-redux';\r\nimport { voxService }  from '../../../../services/voximplant-service/vox.service';\r\n\r\ntype SideBarProps = {\r\n    history: History,\r\n    isSideBarOpen: boolean,\r\n    setIsSideBarOpen: Function,\r\n    getNotification: () => Promise<any>, \r\n    notifications: any[]\r\n}\r\nclass HeaderDashboard extends React.Component<SideBarProps, {}> {\r\n \r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount(){\r\n        setInterval(()=> {\r\n            this.props.getNotification();\r\n        }, 1000*60)\r\n    }\r\n\r\n    logOut = () => {\r\n        localStorage.clear();\r\n        voxService.get().disconnect();\r\n        this.props.history.push('/sign-in');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <header className=\"top-header\">\r\n                    <Row>\r\n                        <Col sm=\"6\">\r\n                            <Link to={'/'}>\r\n                                <img src={logo} className=\"mobile logo\" />\r\n                            </Link>\r\n                            <Nav className=\"left-nav\">\r\n                            <li className={window.location.hash.split('/')[1] === 'discovery' ? 'active' : '' }>\r\n                                <Link to='/discovery'>\r\n                                    <i className=\"icon icon-discover\"></i> Discover \r\n                                </Link>\r\n                            </li>\r\n                            <li className={window.location.hash.split('/')[1] === 'hub' ? 'active' : '' }>\r\n                                <Link to='/hub'>\r\n                                    <i className=\"icon icon-hub\"></i> Hub \r\n                                </Link>\r\n                            </li>\r\n                            \r\n                            </Nav>\r\n                        </Col>\r\n                        <Col sm=\"6\">\r\n                            <Nav className=\"text-right right-nav\">\r\n                                <li>\r\n                                    <Link to=\"/hub/create-project\">\r\n                                        <Button className=\"create-project-btn\"><i className=\"icon-plus-square\"></i> Create a Project</Button> \r\n                                    </Link>\r\n                                </li>\r\n                                <Notification  {...this.props}/>\r\n                                <li onClick={ this.logOut }><i className=\"icon icon-share\"></i></li>\r\n                                \r\n                                <li className=\"mobile\"><i className=\"icon icon-bars\" onClick={() => this.props.setIsSideBarOpen(true)}></i></li>\r\n                            </Nav>\r\n                        </Col>\r\n                    </Row>\r\n                </header>  \r\n            )\r\n    }\r\n    \r\n} \r\n\r\nlet mapStateToProps = (state: any) => {\r\n    return { notifications : state.user.notification}\r\n}\r\n\r\nlet actionToProps = {\r\n    getNotification\r\n}\r\n\r\nexport default connect(mapStateToProps, actionToProps )(HeaderDashboard);","/Users/appleapple/Downloads/loop/src/features/dashboard/common/side_bar/SideBar.tsx",["673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689"],"import React from 'react';\r\nimport { Nav, Button } from 'reactstrap';\r\nimport './SideBar.scss';\r\nimport logo from '../../../../assets/images/logo.svg';\r\nimport profile from '../../../../assets/images/profile.png';\r\nimport AuthFooter from '../../../../layouts/auth_footer/AuthFooter';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport Notification from '../../common/notification/Notification';\r\nimport { connect } from 'react-redux';\r\nimport Chat from '../chat/Chat';\r\nimport { getProfile, getNotification } from '../../../../redux/user/action';\r\nimport { History } from 'history';\r\nimport { voxService } from '../../../../services/voximplant-service/vox.service';\r\nimport _ from 'lodash';\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\ninterface IProps {\r\n  isSideBarOpen: boolean;\r\n  setIsSideBarOpen: (value: boolean) => void;\r\n  menu: any[];\r\n  router?: any;\r\n  getProfile: () => void;\r\n  userDetail: any;\r\n  history: History;\r\n  getNotification: () => Promise<any>;\r\n  notifications: [];\r\n  conversations: [];\r\n  myNetworkList: any;\r\n  voxUserList: any;\r\n  voxUserCurrentUser: any;\r\n  conversationHistory: any[];\r\n}\r\n\r\ninterface IState {\r\n  menu: any[];\r\n  user: any | null;\r\n}\r\n\r\nconst calendar = {\r\n  lastDay: '[Yesterday]',\r\n  sameDay: 'LT',\r\n  lastWeek: 'dddd',\r\n  sameElse: 'L',\r\n};\r\n\r\nconst ConversationList = (props: any) => {\r\n  const {\r\n    setIsSideBarOpen,\r\n    conversations,\r\n    goBack,\r\n    getUserDetail,\r\n    activeUId,\r\n    newConversations,\r\n    conversationHistory,\r\n  } = props;\r\n\r\n  const getChatTitle = (item: any, loopUser: any) => {\r\n    let chatTitle = '';\r\n    if (item.direct) {\r\n      chatTitle = loopUser.first_name\r\n        ? loopUser.first_name + ' ' + loopUser.last_name\r\n        : loopUser.email;\r\n    } else {\r\n      loopUser.map((item: any, index: any) => {\r\n        if (item.first_name) {\r\n          chatTitle =\r\n            index !== 0\r\n              ? `${chatTitle},${item.first_name} ${item.last_name}`\r\n              : `${item.first_name} ${item.last_name}`;\r\n        } else {\r\n          chatTitle = index !== 0 ? `${chatTitle},${item.email}` : item.email;\r\n        }\r\n      });\r\n    }\r\n    return chatTitle;\r\n  };\r\n\r\n  const getLastMessageAndTime = (item: any) => {\r\n    const currentConversation =\r\n      !_.isEmpty(conversationHistory) && conversationHistory[item._uuid];\r\n    const lastEvent =\r\n      !_.isEmpty(currentConversation) &&\r\n      currentConversation[currentConversation.length - 1];\r\n    if (lastEvent) {\r\n      return {\r\n        lastMessage: lastEvent.text\r\n          ? lastEvent.text\r\n          : lastEvent.payload &&\r\n            lastEvent.payload[0] &&\r\n            lastEvent.payload[0]['name'],\r\n        timestamp: lastEvent.timestamp,\r\n      };\r\n    }\r\n    return {\r\n      lastMessage: '',\r\n      timestamp: '',\r\n    };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mobile mobile-menu-icon\">\r\n        <ul>\r\n          <Notification {...props} />\r\n          <li>\r\n            <i\r\n              className=\"icon icon-close\"\r\n              onClick={() => setIsSideBarOpen(false)}\r\n            />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"chat-sidebar\">\r\n        <Button className=\"go-back\" onClick={goBack}>\r\n          <i className=\"icon-long-right-arrow\" /> Go Back\r\n        </Button>\r\n        <div className=\"profile-card-section\">\r\n          {conversations.map((item: any, index: any) => {\r\n            const loopUser = getUserDetail(item.participants, item.direct);\r\n            const chatTitle = getChatTitle(item, loopUser);\r\n            const chatPhoto =\r\n              item.direct && loopUser.first_name ? loopUser.photo : profile;\r\n            const { lastMessage, timestamp } = getLastMessageAndTime(item);\r\n            return (\r\n              <div\r\n                key={index}\r\n                className={\r\n                  activeUId === item.uuid\r\n                    ? 'profile-card d-flex active2'\r\n                    : 'profile-card d-flex'\r\n                }\r\n                onClick={() => {\r\n                  newConversations(item.uuid);\r\n                  props.setIsSideBarOpen(false);\r\n                }}\r\n              >\r\n                <div className=\"chatPhoto\">\r\n                  <img src={chatPhoto} />\r\n                  <span className=\"active-dot\"></span>\r\n                </div>\r\n                <div>\r\n                  <div className=\"d-flex justify-content-between align-items-center mb-1\">\r\n                    <h2 title={chatTitle}>{chatTitle}</h2>\r\n                    <p className=\"time\">\r\n                      {timestamp && <Moment calendar={calendar}>{timestamp}</Moment>}\r\n                    </p>\r\n                  </div>\r\n                  <p className=\"last-message\" title={lastMessage}>{lastMessage}</p>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nclass SideBar extends React.Component<IProps, IState> {\r\n  readonly state: IState = {\r\n    menu: this.props.menu,\r\n    user: JSON.parse(JSON.stringify(localStorage.getItem('userData'))),\r\n  };\r\n  constructor(props: any) {\r\n    super(props);\r\n  }\r\n  componentWillMount() {\r\n    this.props.getProfile();\r\n    this.props.getNotification();\r\n    setInterval(() => {\r\n      this.props.getNotification();\r\n    }, 1000 * 60);\r\n  }\r\n\r\n  componentDidUpdate(preProps: IProps) {\r\n    if (preProps.router != this.props.router) {\r\n      let matched = false;\r\n      const menu = this.state.menu.map((item, i) => {\r\n        item.hasChild &&\r\n          item.child.forEach((childItem: any) => {\r\n            if (!matched) {\r\n              matched = childItem.route == this.props.router.location.pathname;\r\n            }\r\n          });\r\n        if (!matched) {\r\n          item.isOpened = false;\r\n        }\r\n        return item;\r\n      });\r\n      this.setState({ menu });\r\n    }\r\n  }\r\n\r\n  newConversations = (uuid: string) => {\r\n    this.props.history.push(\r\n      `${this.props.history.location.pathname}?uuid=${uuid}`\r\n    );\r\n  };\r\n\r\n  getCurrentMessageUUID = () => {\r\n    const {\r\n      location: { search },\r\n    } = this.props.history;\r\n    const uuid = new URLSearchParams(search).get('uuid');\r\n    return uuid;\r\n  };\r\n\r\n  goBack = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkEmail(userName: any) {\r\n    if (userName) {\r\n      const tempEmail = userName.replace('-loop-', '@').slice(0, -15);\r\n      return tempEmail;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getUserDetail = (participants: any, direct: boolean) => {\r\n    const { myNetworkList, voxUserList, voxUserCurrentUser } = this.props;\r\n    if (participants) {\r\n      const participantsInfo = participants.map((item: any) => {\r\n        const findUser = voxUserList.find(\r\n          (subItem: any) => item.userId === subItem.userId\r\n        );\r\n        const userEmail =\r\n          findUser && findUser.userName && this.checkEmail(findUser.userName);\r\n        if (userEmail && myNetworkList) {\r\n          const info = myNetworkList.find(\r\n            (item: any) => item.email === userEmail\r\n          );\r\n          return {\r\n            ...item,\r\n            first_name: (info && info.first_name) || null,\r\n            last_name: (info && info.last_name) || null,\r\n            photo: (info && info.photo) || null,\r\n            email: (info && info.email) || userEmail,\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n      if (voxUserCurrentUser && direct) {\r\n        return participantsInfo.find(\r\n          (item: any) => item.userId !== voxUserCurrentUser.userId\r\n        );\r\n      } else if (voxUserCurrentUser) {\r\n        return participantsInfo.filter(\r\n          (item: any) => item.userId !== voxUserCurrentUser.userId\r\n        );\r\n      }\r\n      return participantsInfo;\r\n    }\r\n    return participants;\r\n  };\r\n\r\n  navToggle = () => this.props.setIsSideBarOpen(false);\r\n\r\n  setMenuChange = (menu: any[]) => this.setState({ menu: [...menu] });\r\n\r\n  isSettingItemMatched = (menuIndex: number, path?: string): boolean => {\r\n    let matched = false;\r\n    const menu = this.state.menu;\r\n\r\n    if (path) {\r\n      matched = path == this.props.router.location.pathname;\r\n    } else {\r\n      menu[menuIndex].hasChild &&\r\n        menu[menuIndex].child.forEach((item: any) => {\r\n          if (!matched) {\r\n            matched = item.route == this.props.router.location.pathname;\r\n          }\r\n        });\r\n    }\r\n    if (matched && !menu[menuIndex].isOpened) {\r\n      menu[menuIndex].onClick();\r\n      this.setMenuChange(menu);\r\n    }\r\n    return matched;\r\n  };\r\n\r\n  logOut = () => {\r\n    localStorage.clear();\r\n    voxService.get().disconnect();\r\n    this.props.history.push('/sign-in');\r\n  };\r\n\r\n  render() {\r\n    const { menu, user } = this.state;\r\n    const { userDetail = {}, isSideBarOpen, setIsSideBarOpen } = this.props;\r\n\r\n    const activeUId = this.getCurrentMessageUUID();\r\n\r\n    return (\r\n      <>\r\n        {window.location.hash.split('/')[3] != 'virtual-sessions' && (\r\n          <div\r\n            className={\r\n              isSideBarOpen\r\n                ? 'sidebar mobile-sidebar'\r\n                : 'sidebar mobile-sidebar2'\r\n            }\r\n          >\r\n            <Link to={'/'}>\r\n              <img src={logo} alt=\"logo\" className=\"logo\" />\r\n            </Link>\r\n            {window.location.hash.split('/')[2] != 'chat' && (\r\n              <>\r\n                <div className=\"mobile mobile-menu-icon\">\r\n                  <ul>\r\n                    <Notification {...this.props} />\r\n                    <li>\r\n                      <i\r\n                        className=\"icon icon-close\"\r\n                        onClick={() => setIsSideBarOpen(false)}\r\n                      />\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                {window.location.hash.split('/')[1] === 'discovery' && (\r\n                  <>\r\n                    <Link\r\n                      to={\r\n                        userDetail.first_name == null\r\n                          ? '/hub/edit-profile'\r\n                          : '/hub/view-profile'\r\n                      }\r\n                      onClick={event => {\r\n                        event.stopPropagation();\r\n                        this.navToggle();\r\n                      }}\r\n                    >\r\n                      <div className=\"profile-section d-flex\">\r\n                        <div className=\"proifleImg\">\r\n                          <img\r\n                            src={userDetail.photo || profile}\r\n                            alt=\"profile\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"profileText\">\r\n                          <div className=\"mobile-online\">\r\n                            <p className=\"status\">\r\n                              {userDetail && userDetail.online == '1'\r\n                                ? 'ONLINE'\r\n                                : 'OFFLINE'}\r\n                            </p>\r\n                            <h2>\r\n                              {userDetail && userDetail.first_name}{' '}\r\n                              {userDetail && userDetail.last_name}\r\n                            </h2>\r\n                          </div>\r\n                          <p className=\"designation\">\r\n                            {userDetail.expertise &&\r\n                              Array.isArray(userDetail.expertise) &&\r\n                              userDetail.expertise\r\n                                .map((item: any) => item && item.name)\r\n                                .join(' | ')}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\" discover-text\">\r\n                        <i className=\"icon icon-discover\" />\r\n                        <h1 className=\"mobile\">Discover</h1>\r\n                      </div>\r\n                    </Link>\r\n                  </>\r\n                )}\r\n                {window.location.hash.split('/')[1] === 'hub' && (\r\n                  <Link\r\n                    to={\r\n                      userDetail.first_name == null\r\n                        ? '/hub/edit-profile'\r\n                        : '/hub/view-profile'\r\n                    }\r\n                    onClick={event => {\r\n                      event.stopPropagation();\r\n                      this.navToggle();\r\n                    }}\r\n                  >\r\n                    <div className=\"profile-section d-flex\">\r\n                      <div className=\"proifleImg\">\r\n                        <img\r\n                          src={(userDetail && userDetail.photo) || profile}\r\n                          alt=\"profile\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"profileText\">\r\n                        <div className=\"mobile-online\">\r\n                          <p className=\"status\">\r\n                            {userDetail && userDetail.online == '1'\r\n                              ? 'ONLINE'\r\n                              : 'OFFLINE'}\r\n                          </p>\r\n                          <h2>\r\n                            {userDetail && userDetail.first_name}{' '}\r\n                            {userDetail && userDetail.last_name}\r\n                          </h2>\r\n                        </div>\r\n                        <p className=\"designation\">\r\n                          {userDetail.expertise &&\r\n                            Array.isArray(userDetail.expertise) &&\r\n                            userDetail.expertise\r\n                              .map((item: any) => item && item.name)\r\n                              .join(' | ')}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\" discover-text\">\r\n                      <i className=\"icon icon-hub\" />\r\n                      <h1 className=\"mobile\">Hub</h1>\r\n                    </div>\r\n                  </Link>\r\n                )}\r\n\r\n                <Nav className=\"sideNav\">\r\n                  {menu.map((navItem, i) => {\r\n                    if (!navItem.hasChild) {\r\n                      return (\r\n                        <li\r\n                          key={i}\r\n                          onClick={event => {\r\n                            event.stopPropagation();\r\n                            this.navToggle();\r\n                          }}\r\n                        >\r\n                          <NavLink to={navItem.route}>\r\n                            <i className={navItem.className} />\r\n                            {navItem.title}\r\n                          </NavLink>\r\n                        </li>\r\n                      );\r\n                    } else {\r\n                      this.isSettingItemMatched(i);\r\n                      return (\r\n                        <>\r\n                          <li>\r\n                            <div\r\n                              className={\r\n                                navItem.isOpened\r\n                                  ? 'settings-link active'\r\n                                  : 'settings-link'\r\n                              }\r\n                            >\r\n                              <div\r\n                                className=\"setting-dropdown\"\r\n                                onClick={() => {\r\n                                  if (navItem.onClick) {\r\n                                    let s = navItem.onClick();\r\n                                    this.setMenuChange(s);\r\n                                  }\r\n                                }}\r\n                              >\r\n                                <i className={navItem.className} />\r\n                                <p className=\"mb-0\">{navItem.title} </p>\r\n                                {navItem.isOpened && (\r\n                                  <i className=\"icon-caret-up\" />\r\n                                )}\r\n                                {!navItem.isOpened && (\r\n                                  <i className=\"icon-sort-down\" />\r\n                                )}\r\n                              </div>\r\n\r\n                              {navItem.isOpened && navItem.child ? (\r\n                                navItem.child.map((childNavItem: any) => (\r\n                                  <li\r\n                                    onClick={event => {\r\n                                      event.stopPropagation();\r\n                                      this.navToggle();\r\n                                    }}\r\n                                  >\r\n                                    <NavLink to={childNavItem.route}>\r\n                                      <div className=\"filter-section\">\r\n                                        <input\r\n                                          type=\"radio\"\r\n                                          id=\"test1\"\r\n                                          checked={this.isSettingItemMatched(\r\n                                            i,\r\n                                            childNavItem.route\r\n                                          )}\r\n                                          name=\"radio-group\"\r\n                                        />\r\n                                        <label htmlFor=\"test1\">\r\n                                          <i\r\n                                            className={childNavItem.className}\r\n                                            onClick={event => {\r\n                                              event.stopPropagation();\r\n                                              this.props.setIsSideBarOpen(\r\n                                                false\r\n                                              );\r\n                                            }}\r\n                                          />\r\n                                          {childNavItem.title}\r\n                                        </label>\r\n                                      </div>\r\n                                    </NavLink>\r\n                                  </li>\r\n                                ))\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </div>\r\n                          </li>\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n                </Nav>\r\n                {window.location.hash.split('/')[1] === 'discovery' && (\r\n                  <div className=\"text-center sidebar-bottom\">\r\n                    <Link\r\n                      to=\"/discovery/feeling-random\"\r\n                      onClick={event => {\r\n                        event.stopPropagation();\r\n                        this.navToggle();\r\n                      }}\r\n                    >\r\n                      <Button className=\"button-btnGradiant feeling-random\">\r\n                        <i className=\"icon icon-random\" /> Feeling Random\r\n                      </Button>\r\n                    </Link>\r\n                    <Nav className=\"sideNav mobile\">\r\n                      <li className=\"border-0\" onClick={this.logOut}>\r\n                        <a>\r\n                          <i className=\"icon icon-download-right\" /> Sign Out\r\n                        </a>\r\n                      </li>\r\n                    </Nav>\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n\r\n            {this.props.history.location.pathname ===\r\n              '/hub/chat/collaborators-chat' && (\r\n              <ConversationList\r\n                goBack={this.goBack}\r\n                getUserDetail={this.getUserDetail}\r\n                activeUId={activeUId}\r\n                newConversations={this.newConversations}\r\n                {...this.props}\r\n              />\r\n            )}\r\n            {window.location.hash.split('/')[3] != 'virtual-sessions' && (\r\n              <AuthFooter />\r\n            )}\r\n          </div>\r\n        )}\r\n        {window.location.hash.split('/')[3] === 'virtual-sessions' && (\r\n          <div\r\n            className={\r\n              isSideBarOpen\r\n                ? 'sidebar mobile-sidebar VirtualSidebar'\r\n                : 'sidebar mobile-sidebar2 VirtualSidebar'\r\n            }\r\n          >\r\n            <Link to={'/'}>\r\n              <img src={logo} alt=\"logo\" className=\"logo\" />\r\n            </Link>\r\n            <div className=\"mobile mobile-menu-icon\">\r\n              <ul>\r\n                <Notification {...this.props} />\r\n                <li>\r\n                  <i\r\n                    className=\"icon icon-close\"\r\n                    onClick={() => setIsSideBarOpen(false)}\r\n                  />\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <Chat />\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\ninterface IUser {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface RootState {\r\n  router: object;\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    router: state.router,\r\n    userDetail: state.user.profile,\r\n    notifications: state.user.notification,\r\n    conversations:\r\n      (!_.isEmpty(state.user.vox_users) &&\r\n        state.user.vox_users.conversations) ||\r\n      [],\r\n    conversationHistory:\r\n      (!_.isEmpty(state.user.vox_users) && state.user.conversationHistory) ||\r\n      [],\r\n    myNetworkList: state.network.myNetwork || [],\r\n    voxUserList:\r\n      (state.user && state.user.vox_users && state.user.vox_users.users) || [],\r\n    voxUserCurrentUser:\r\n      (state.user &&\r\n        state.user.vox_users &&\r\n        state.user.vox_users.currentUser) ||\r\n      {},\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getProfile, getNotification }\r\n)(SideBar);\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/common/your_network/YourNetwork.tsx",["690","691","692","693","694","695","696"],"import React  from 'react';\r\nimport { Card, Button } from 'reactstrap';\r\nimport './YourNetwork.scss'\r\nimport audio1 from '../../../../assets/images/audio1.png'\r\nimport audio2 from '../../../../assets/images/audio2.png'\r\nimport audio3 from '../../../../assets/images/audio3.png'\r\nimport audio4 from '../../../../assets/images/audio4.png'\r\nimport audio5 from '../../../../assets/images/audio5.png'\r\nimport { connect } from 'react-redux';\r\nimport { myNetwork } from \"../../../../redux/network/action\";\r\nimport { createConversation } from \"../../../../redux/user/action\";\r\nimport _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\ninterface IProps  {\r\n    network: boolean,\r\n    toggleNetwork(): void,\r\n    myNetwork: (showloader: boolean) => Promise<any>,\r\n    myNetworkList: any[],\r\n    voxUser: any[],\r\n}\r\n\r\nclass YourNetwork extends React.Component<IProps, {}> {\r\n    \r\n    constructor(props: any){\r\n        super(props)\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.props.myNetwork(false);\r\n    }\r\n\r\n    createNewConversation(usersId: any, title: any) {\r\n        createConversation({\r\n            type: 'direct',\r\n            title: title,\r\n            desc: '',\r\n            usersId: usersId,\r\n            isPublic: true,\r\n            isUber: true,\r\n            avatar: '',\r\n          });\r\n    }\r\n\r\n    render () {\r\n        let { myNetworkList, voxUser } = this.props;\r\n        return(\r\n            <>\r\n            <div className=\"background-overlay\"  onClick={this.props.toggleNetwork}></div>\r\n            <div className=\"your-network\">\r\n                \r\n            <div className=\"gradiant-border\"></div>\r\n            <div className=\"your-network-card\">\r\n            <div className=\"head\">\r\n                <div>\r\n                    <h1>Your Network</h1>\r\n                    <p>{myNetworkList.length} People</p>\r\n                </div>\r\n                <Link to=\"/hub/my-network\">\r\n                <Button className=\"arrow-right\" onClick={this.props.toggleNetwork}>\r\n                    <i className=\"icon-arrow-right\"></i>\r\n                </Button>\r\n                </Link>\r\n            </div>\r\n            <div className=\"network-peoples\">\r\n            { myNetworkList && myNetworkList.map((item : any) => {\r\n                const userName = `${item.email.replace('@', '-loop-')}@loop.cocoworth`;\r\n                const userinfo = voxUser.find((item: any)=> item.userName === userName);\r\n                return <Card className=\"audioCard\" onClick={()=>this.createNewConversation(userinfo && userinfo.userId, item.first_name ? `${item.first_name} ${item.last_name}` : item.email)}>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <img src={item.photo || audio1} alt=\"\"  />\r\n                        <div  className=\"ml-3 networks-name\">\r\n                            <h1>{item.first_name ? `${item.first_name} ${item.last_name}` : item.email}</h1>\r\n                            <p>{item.expertise && item.expertise.map((item: any) => item && item.name).join(' | ')}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                    { userinfo && userinfo.online ? <span className=\"status-custom online\">\r\n                        Online\r\n                      </span> : <span className=\"status-custom offline\">\r\n                        Offiline\r\n                      </span>}\r\n                    </div>\r\n                </Card>\r\n            })\r\n                 \r\n            }\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return { \r\n      myNetworkList: state.network.myNetwork || [],\r\n      voxUser: !_.isEmpty(state.user.vox_users) && state.user.vox_users.users || []\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = { \r\n    myNetwork\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(YourNetwork); ","/Users/appleapple/Downloads/loop/src/features/dashboard/common/footer_dahboard/FooterDashboard.tsx",["697","698"],"import React from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\nimport './FooterDashboard.scss'\r\nimport 'react-multi-carousel/lib/styles.css';\r\nimport AudioPlayer from 'react-h5-audio-player';\r\nimport playProfile from '../../../../assets/images/playPImage.png'\r\nimport 'react-h5-audio-player/lib/styles.css';\r\nimport { connect } from 'react-redux';\r\nimport { playTrack } from '../../../../redux/user/action';\r\n\r\nclass FooterDashboard extends React.Component<IProps,{}> {\r\n    private myRef: React.RefObject<AudioPlayer>;\r\n    constructor(props: any){\r\n        super(props)\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    updateTrack = (isPaused: boolean) => {\r\n        let {playingTrack} = this.props;\r\n        this.props.playTrack(playingTrack, isPaused);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IProps) {\r\n        if ( this.props.playingTrack !== undefined && nextProps.playingTrack.isPaused !== undefined && this.props.playingTrack.isPaused !== nextProps.playingTrack.isPaused) {\r\n            if (nextProps.playingTrack.isPaused) {\r\n                this.myRef.current && this.myRef.current.audio.current && this.myRef.current.audio.current.pause();\r\n            } else {\r\n                this.myRef.current && this.myRef.current.audio.current && this.myRef.current.audio.current.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {playingTrack, userDetail, } = this.props  ;\r\n        return(\r\n            playingTrack ? (<div className=\"footerInner\">\r\n                    <Row className=\"m-0\">\r\n                    <Col md=\"10\" lg=\"3\" className=\"pl-0\">\r\n                        <div className=\"footer-song-profile\">\r\n                            <img src={playingTrack.cover_image || playProfile} />\r\n                            <div>\r\n                                <h1>{playingTrack.name}</h1>\r\n                                <p>{`${playingTrack.first_name || ''} ${playingTrack.last_name || ''}`}</p>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md=\"2\" lg=\"9\">\r\n                        <div className=\"position-relative\">\r\n                            <AudioPlayer\r\n                                src={playingTrack.filename}\r\n                                autoPlay={!playingTrack.isPaused}\r\n                                autoPlayAfterSrcChange={true}\r\n                                onPlay={e => this.updateTrack(false)}\r\n                                onPause={e=> this.updateTrack(true)}\r\n                                ref={this.myRef}\r\n                            /> \r\n                            <i className=\"icon icon-random random-btn\"></i>\r\n                        </div>\r\n                    </Col>\r\n                    </Row>\r\n                </div> ) : <></>\r\n            )\r\n    } \r\n}\r\n\r\ninterface IProps {\r\n    userDetail: any;\r\n    playingTrack: any;\r\n    playTrack: (data: any, isPaused: boolean) => Promise<any>,\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    playTrack,\r\n}\r\n\r\nconst mapStateToProps = ( state: any ) => {\r\n    return {   \r\n        playingTrack: state.user.playingTrack,\r\n        userDetail: state.user.profile,\r\n    }\r\n} \r\n\r\n export default connect(mapStateToProps, mapDispatchToProps)(FooterDashboard);","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/location/Location.tsx",["699","700","701","702","703","704","705","706","707","708","709"],"import React, { Component } from \"react\"\r\nimport { connect } from 'react-redux';\r\nimport './location.scss'\r\nimport { Row } from 'reactstrap';\r\nimport {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n  InfoWindow\r\n} from \"react-google-maps\"\r\nimport { location, searchlocation, discoverLocationData } from '../../../../redux/discovery/action';\r\nimport locationicon1 from '../../../../assets/images/location-icon1.png';\r\nimport locationicon2 from '../../../../assets/images/location-icon2.png';\r\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng, } from 'react-places-autocomplete';\r\nimport _ from 'lodash';\r\nimport { Link } from \"react-router-dom\";\r\ninterface IState {\r\n  selectedMarker: any,\r\n  searchedLocation: any,\r\n  address: any,\r\n}\r\n\r\nconst exampleMapStyles: any[] = [\r\n  {\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#212121\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"elementType\": \"labels.icon\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#757575\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"elementType\": \"labels.text.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#212121\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#757575\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.country\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#9e9e9e\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.land_parcel\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.locality\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#bdbdbd\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#757575\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi.park\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#181818\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi.park\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#616161\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi.park\",\r\n    \"elementType\": \"labels.text.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#1b1b1b\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"geometry.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#2c2c2c\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#8a8a8a\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.arterial\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#373737\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.highway\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#3c3c3c\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.highway.controlled_access\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#4e4e4e\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.local\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#616161\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"transit\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#757575\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#3d3d3d\"\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nconst MapWithAMarker = withScriptjs(withGoogleMap((props: {\r\n  isMarkerShown: boolean, googleMapURL: string,\r\n  loadingElement: any, containerElement: any, mapElement: any, locationList: any[],\r\n  onClick: any,\r\n  selectedMarker: any,\r\n  user: any,\r\n}) => {\r\n  const [position, setPosition] = React.useState({\r\n    lat: 37.0902, lng: 95.7129\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (props.user && props.user.location) {\r\n      setPosition({\r\n        lat: props.user && props.user.location && parseFloat(props.user.location.lat) || 37.0902,\r\n        lng: props.user && props.user.location && parseFloat(props.user.location.long) || 95.7129\r\n      })\r\n    }\r\n  }, [props.user])\r\n\r\n  return (\r\n    <GoogleMap defaultOptions={{\r\n      styles: exampleMapStyles,\r\n    }}\r\n      defaultZoom={10}\r\n      center={position}\r\n    >\r\n      {props.locationList && props.locationList.map((marker, index) => {\r\n        const templat = marker.location.latitude ? parseFloat(marker.location.latitude) : parseFloat(marker.lat);\r\n        if (props.user && props.user.location && props.user.location.lat != templat)\r\n          return (\r\n            <Marker\r\n              key={marker.id}\r\n              onClick={() => props.onClick(marker)}\r\n              // onMouseOut={() => props.onClick(false)}\r\n              position={{ lat: marker.location.latitude ? parseFloat(marker.location.latitude) : parseFloat(marker.lat), lng: marker.location.longitude ? parseFloat(marker.location.longitude) : parseFloat(marker.long) }}\r\n              icon={locationicon2}\r\n            >\r\n              {props.selectedMarker === marker &&\r\n                <InfoWindow>\r\n                  <Link to={`/discovery/view-profile/${marker.user_id}`} className=\"location-redirect\">\r\n                    <div className=\"loc-prof-img\">\r\n                      <img src={marker.photo} />\r\n                    </div>\r\n                    {marker.first_name} {marker.last_name}\r\n                    <div className=\"expertise-name\">\r\n                      {marker.expertise && marker.expertise.map((data: any, i: any) => {\r\n                        if (data)\r\n                        return (\r\n                          <div style={{ marginRight: '3px' }}> {data.name} {marker && marker.expertise.length - 1 !== i ? ' | ' : ''}  </div>\r\n                        )\r\n                      })}\r\n                    </div>\r\n                  </Link>\r\n                </InfoWindow>}\r\n            </Marker>\r\n          )\r\n      })}\r\n      <Marker\r\n        onClick={() => props.onClick(props.user)}\r\n        // onMouseOut={() => props.onClick(false)}\r\n        position={{ lat: props.user && props.user.location && parseFloat(props.user.location.lat), lng: props.user && props.user.location && parseFloat(props.user.location.long) }}\r\n        icon={locationicon1}\r\n      >\r\n        {props.selectedMarker === props.user &&\r\n          <InfoWindow>\r\n            <Link to={`/hub/view-profile/${props.user.user_id}`} className=\"location-redirect\">\r\n              <div className=\"loc-prof-img\">\r\n                <img src={props.user && props.user.photo} />\r\n\r\n              </div>\r\n              {props.user.first_name} {props.user.last_name}\r\n              <div className=\"expertise-name\">\r\n                {props.user && props.user.expertise && props.user.expertise.map((data: any, i: any) => {\r\n                  return (\r\n                    <div style={{ marginRight: '3px' }}> {data.name} {props.user && props.user.expertise.length - 1 !== i ? ' | ' : ''}  </div>\r\n                  )\r\n                })}\r\n              </div>\r\n\r\n            </Link>\r\n          </InfoWindow>}\r\n      </Marker>\r\n    </GoogleMap>\r\n  )\r\n}));\r\n\r\nclass Location extends Component<IProps, IState> {\r\n  constructor(props: any) {\r\n    super(props)\r\n    this.state = {\r\n      selectedMarker: false,\r\n      searchedLocation: {},\r\n      address: '',\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.props.location();\r\n    this.props.discoverLocationData();\r\n  }\r\n\r\n  handleClick = (marker: any) => {\r\n    if(this.state.selectedMarker !== marker){\r\n      this.setState({ selectedMarker: marker })\r\n    } else {\r\n      this.setState({ selectedMarker: false })\r\n    }\r\n  }\r\n\r\n  handleChange = (address: any) => {\r\n    if (_.isEmpty(address)) {\r\n      this.props.location();\r\n    }\r\n    this.setState({ address });\r\n  };\r\n \r\n  handleSelect = (address: any) => {\r\n    this.setState({ address });\r\n    geocodeByAddress(address)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => {\r\n        if (latLng.lat && latLng.lng) {\r\n          this.props.searchlocation({\r\n            lat: latLng.lat,\r\n            long: latLng.lng,\r\n          })\r\n        }\r\n      })\r\n      .catch(error => console.error('Error', error));\r\n  };\r\n\r\n  render() {\r\n    let { locationList, user } = this.props;\r\n    const titlesData = this.props && this.props.locationDataTitle;\r\n    const title = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'title')\r\n    const description = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'description')\r\n    \r\n    return (\r\n      <div className=\"recently\">\r\n        <div className=\"top-head\">\r\n          <div>\r\n            <h1>{title && title.text}</h1>\r\n            <p className=\"f-p\">{description && description.text}</p>\r\n          </div>\r\n          <div className=\"input-area location-search\">\r\n            <div className=\"search-location-in\">\r\n               <i className=\"icon icon-search\"></i>\r\n            </div>\r\n            <PlacesAutocomplete\r\n             value={this.state.address}\r\n             onChange={this.handleChange}\r\n             onSelect={this.handleSelect}\r\n             shouldFetchSuggestions={this.state.address.length > 2}\r\n            >\r\n              {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                <div>\r\n                  <input\r\n                    {...getInputProps({\r\n                      placeholder: 'Enter Location',\r\n                      className: 'location-search-input',\r\n                    })}\r\n                    value={this.state.address}\r\n                  />\r\n                  {/* \"autocomplete-dropdown-container\" */}\r\n                  <div className={suggestions.length > 0 ? 'autocomplete-dropdown-container autocomplete-shadow': 'autocomplete-dropdown-container'}>\r\n                    {loading && <div>Loading...</div>}\r\n                    {suggestions.map(suggestion => {\r\n                      const className = suggestion.active\r\n                        ? 'suggestion-item--active'\r\n                        : 'suggestion-item';\r\n                      // inline style for demonstration purpose\r\n                      const style = suggestion.active\r\n                        ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                        : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                      return (\r\n                        <div\r\n                          {...getSuggestionItemProps(suggestion, {\r\n                            className,\r\n                            style,\r\n                          })}\r\n                        >\r\n                          <span>{suggestion.description}</span>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </PlacesAutocomplete>\r\n          </div>\r\n        </div>\r\n        {/* AIzaSyDOplTnOzQM_tYwPVFqxueCYui4brD2j2g */}\r\n        <MapWithAMarker\r\n          selectedMarker={this.state.selectedMarker}\r\n          isMarkerShown={true}\r\n          locationList={locationList}\r\n          onClick={this.handleClick}\r\n          user={user}\r\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDOplTnOzQM_tYwPVFqxueCYui4brD2j2g&v=3.exp&libraries=geometry,drawing,places&callback=myCallbackFunc\"\r\n          loadingElement={<div style={{ height: `100%` }} />}\r\n          containerElement={<div style={{ height: `500px` }} className=\"location-area\"/>}\r\n          mapElement={<div style={{ height: `100%` }} />}\r\n        />\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\ninterface IProps {\r\n  locationList: any[];\r\n  location: () => Promise<any>;\r\n  searchlocation: (latlong: any) => Promise<any>;\r\n  history: History;\r\n  user: any;\r\n  discoverLocationData: any,\r\n  locationDataTitle: any\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    locationList: state.discovery.location || [],\r\n    user: state.user.profile || {},\r\n    locationDataTitle: state.discovery.locData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  location,\r\n  discoverLocationData,\r\n  searchlocation\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Location);","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/trending/Trending.tsx",["710","711"],"import React from 'react';\r\nimport './Trending.scss'\r\nimport { Row, Col } from 'reactstrap';\r\nimport 'react-multi-carousel/lib/styles.css';\r\n// import audioProfile1 from '../../../assets/images/audio1.png'\r\n// import audioProfile2 from '../../../assets/images/audio2.png'\r\n// import audioProfile3 from '../../../assets/images/audio3.png'\r\n// import audioProfile4 from '../../../assets/images/audio4.png'\r\n// import audioProfile5 from '../../../assets/images/audio5.png'\r\nimport ListCard from '../../common/list_card/ListCard';\r\nimport { connect } from 'react-redux';\r\nimport { trending, discoverTrendingData } from '../../../../redux/discovery/action'\r\nimport {History} from 'history';\r\nimport { getProfileById, playTrack } from '../../../../redux/user/action'; \r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport _ from 'lodash';\r\n\r\nclass Trending extends React.Component<IProps, IState> {\r\n        \r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount(){ \r\n        this.props.trending();\r\n        this.props.discoverTrendingData();\r\n    }\r\n\r\n\r\n    trackClicked = (item: any) => {\r\n        const { playingTrack } = this.props;\r\n        this.props.getProfileById(item.user_id).then((res: any) => {\r\n            let demoTrack = (res.data.demo_track || []).find((item: any) => item.primary === 1);\r\n            if(demoTrack){\r\n                demoTrack.first_name = res.data.first_name;\r\n                demoTrack.last_name = res.data.last_name;\r\n                let isPaused  = false;\r\n                if(playingTrack){\r\n                    isPaused =  playingTrack.track_id != demoTrack.track_id ? false : !playingTrack.isPaused ;\r\n                }\r\n                this.props.playTrack(demoTrack, isPaused)\r\n            }else{\r\n                toast.error(\"Demo track not found\")\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const titlesData = this.props && this.props.trendingDataTitle;\r\n        const title = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'title')\r\n        const description = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'description')\r\n        \r\n        let { trendingArr } = this.props;\r\n        return (\r\n            <div className=\"trending\">\r\n                <ToastContainer />\r\n                <div className=\"top-head\">\r\n                    <h1>{title && title.text}</h1>\r\n                    <p className=\"f-p\">{description && description.text}</p>\r\n                </div>\r\n                \r\n                <Row>\r\n                    {\r\n                        trendingArr && trendingArr.map((item, index) => (\r\n                            <Col>\r\n                                <ListCard history={this.props.history}  data={item} onClick={ this.trackClicked } />\r\n                            </Col>\r\n                        ))\r\n                    } \r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\ninterface IProps{\r\n    trending: ()=> Promise<any> \r\n    trendingArr: any[], \r\n    history: History\r\n    playTrack: (data: any, isPaused: boolean) => Promise<any>,\r\n    playingTrack: any;\r\n    getProfileById: (id: string) => Promise<any>,\r\n    discoverTrendingData: any,\r\n    trendingDataTitle: any,\r\n}\r\n\r\ninterface IState{\r\n\r\n}\r\n\r\nconst mapStateToProps = ( state: any ) => {\r\n    return { \r\n        trendingArr: state.discovery.trending, \r\n        trendingDataTitle: state.discovery.trendData, \r\n        playingTrack: state.user.playingTrack,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =  {\r\n    trending, playTrack, discoverTrendingData,\r\n    getProfileById \r\n}\r\n\r\nexport default  connect(mapStateToProps, mapDispatchToProps )(Trending);\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/recently_joined_page/RecentlyJoined.tsx",["712","713"],"import React from 'react';\r\nimport './RecentlyJoined.scss'\r\nimport { Row, Col } from 'reactstrap';\r\nimport 'react-multi-carousel/lib/styles.css';\r\nimport ListCard from '../../common/list_card/ListCard';\r\nimport { connect } from 'react-redux';\r\nimport { recentlyJoined, discoverRecentlyData } from '../../../../redux/discovery/action'\r\nimport {History} from \"history\";\r\nimport {  getProfileById, playTrack } from '../../../../redux/user/action'; \r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport _ from 'lodash';\r\n\r\nclass RecentlyJoined extends React.Component<IProps, IState> {\r\n        \r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount(){ \r\n        this.props.recentlyJoined();\r\n        this.props.discoverRecentlyData();\r\n    }\r\n\r\n\r\n    trackClicked = (item: any) => {\r\n        const { playingTrack } = this.props;\r\n        this.props.getProfileById(item.user_id).then((res: any) => {\r\n            let demoTrack = (res.data.demo_track || []).find((item: any) => item.primary === 1);\r\n            if(demoTrack){\r\n                demoTrack.first_name = res.data.first_name;\r\n                demoTrack.last_name = res.data.last_name;\r\n                let isPaused  = false;\r\n                if(playingTrack){\r\n                    isPaused =  playingTrack.track_id != demoTrack.track_id ? false : !playingTrack.isPaused ;\r\n                }\r\n                this.props.playTrack(demoTrack, isPaused)\r\n            }else{\r\n                toast.error(\"Demo track not found\")\r\n            }\r\n        });\r\n    }\r\n    \r\n        render() {\r\n                \r\n        const titlesData = this.props && this.props.recentDataTitle;\r\n        const title = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'title')\r\n        const description = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'description')\r\n        let { recentJoinedArr } = this.props;\r\n\r\n            return (\r\n                <div className=\"recently\">\r\n                    <ToastContainer />\r\n                    <div className=\"top-head\">\r\n                        <div>\r\n                        <h1>{title && title.text}</h1>\r\n                        <p className=\"f-p\">{description && description.text}</p>\r\n                        </div>  \r\n                    </div>\r\n                    <Row>\r\n                        {\r\n                            recentJoinedArr && recentJoinedArr.map((item, index) => (\r\n                                <Col>\r\n                                <ListCard history={this.props.history}  data={item} onClick={ this.trackClicked } />\r\n                                \r\n                                </Col>\r\n                            ))\r\n                        } \r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\n\r\ninterface IProps{\r\n    getProfileById: (id: string) => Promise<any>,\r\n    recentlyJoined: ()=> Promise<any> \r\n    recentJoinedArr: any[], \r\n    history: History\r\n    playTrack: (data: any, isPaused: boolean) => Promise<any>,\r\n    playingTrack: any;\r\n    discoverRecentlyData: any,\r\n    recentDataTitle: any\r\n}\r\n\r\ninterface IState{\r\n\r\n}\r\n\r\nconst mapStateToProps = ( state: any ) => {\r\n    return { \r\n        recentJoinedArr: state.discovery.recentJoined, \r\n        playingTrack: state.user.playingTrack,\r\n        recentDataTitle: state.discovery.recentData\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =  {\r\n   recentlyJoined, playTrack, discoverRecentlyData,\r\n   getProfileById,\r\n}\r\n\r\nexport default  connect(mapStateToProps, mapDispatchToProps )(RecentlyJoined);\r\n\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/recommended_page/Recommended.tsx",["714","715"],"import React from 'react';\r\nimport './Recommended.scss'\r\nimport { Row, Col } from 'reactstrap';\r\nimport 'react-multi-carousel/lib/styles.css'; \r\nimport ListCard from '../../common/list_card/ListCard';\r\nimport { recommended, discoverRecommendedData} from '../../../../redux/discovery/action'\r\nimport { connect } from 'react-redux';\r\nimport { History} from 'history'\r\nimport { getProfileById, playTrack } from '../../../../redux/user/action'; \r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport _ from 'lodash';\r\n\r\ninterface IProps{\r\n    recommended: ()=> Promise<any>\r\n    recommendedArr: any[],\r\n    history: History\r\n    playTrack: (data: any, isPaused: boolean) => Promise<any>,\r\n    playingTrack: any;\r\n    getProfileById: (id: string) => Promise<any>,\r\n    discoverRecommendedData: any,\r\n    recommendedData: any\r\n }\r\n\r\ninterface IState{\r\n\r\n}\r\n\r\nclass Recommended extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.props.recommended();\r\n        this.props.discoverRecommendedData();\r\n    }\r\n\r\n\r\n    trackClicked = (item: any) => {\r\n        const { playingTrack } = this.props;\r\n        this.props.getProfileById(item.user_id).then((res: any) => {\r\n            let demoTrack = (res.data.demo_track || []).find((item: any) => item.primary === 1);\r\n            if(demoTrack){\r\n                demoTrack.first_name = res.data.first_name;\r\n                demoTrack.last_name = res.data.last_name;\r\n                let isPaused  = false;\r\n                if(playingTrack){\r\n                    isPaused =  playingTrack.track_id != demoTrack.track_id ? false : !playingTrack.isPaused ;\r\n                }\r\n                this.props.playTrack(demoTrack, isPaused)\r\n            }else{ \r\n                toast.error(\"Demo track not found\")\r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const titlesData = this.props && this.props.recommendedData;\r\n        const title = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'title')\r\n        const description = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'description')\r\n        let {recommendedArr } = this.props\r\n        return (\r\n            <div className=\"recommended\">\r\n                <ToastContainer />\r\n                <div className=\"top-head\">\r\n                    <h1>{title && title.text}</h1>\r\n                    <p className=\"f-p\">{description && description.text}</p>\r\n                </div>\r\n                <Row>\r\n                    {/* <Col className=\"first-row-col\">\r\n                        <ListCard />\r\n                    </Col> */}\r\n                    \r\n                    {recommendedArr && recommendedArr.map((user) => (\r\n                        <Col>\r\n                                        <ListCard history={this.props.history}  data={user} onClick={ this.trackClicked } />\r\n                        \r\n                        </Col>\r\n                                    )) }\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\nconst mapStateToProps = ( state: any ) => {\r\n    return { \r\n        recommendedArr: state.discovery.recommended,\r\n        playingTrack: state.user.playingTrack,\r\n        recommendedData: state.discovery.recData,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =  {\r\n    recommended, playTrack, \r\n    getProfileById,\r\n    discoverRecommendedData\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps )(Recommended);\r\n\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/expertise_page/Expertise.tsx",["716","717","718","719","720","721"],"import React, {useState} from 'react';\r\nimport './Expertise.scss'\r\nimport { Row, Col, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport 'react-multi-carousel/lib/styles.css'; \r\nimport ListCard from '../../common/list_card/ListCard';\r\nimport { getExpertiseView, discoverExpertiseData } from '../../../../redux/discovery/action'\r\nimport { connect } from 'react-redux';\r\nimport { expertiseList } from '../../../../redux/master-data/action';\r\nimport {History} from 'history'\r\nimport { getProfileById, playTrack } from '../../../../redux/user/action';  \r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport _ from 'lodash';\r\n\r\nclass Expertise extends React.Component<IProps, IState> {\r\n\r\n    readonly state : IState = {activeTab: 0}\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount(){\r\n      this.props.expertiseList(); \r\n      this.props.discoverExpertiseData();\r\n      this.props.expertiseArr && this.props.expertiseArr[this.state.activeTab] && this.props.getExpertiseView(this.props.expertiseArr[this.state.activeTab].expertise_id);\r\n    }\r\n\r\n    toggle = (activeTab: number, expertise_id: string) => {\r\n      this.setState({activeTab});\r\n      this.props.getExpertiseView(expertise_id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IProps){\r\n      if( prevProps.expertiseArr != this.props.expertiseArr ){\r\n        this.props.getExpertiseView(this.props.expertiseArr[this.state.activeTab].expertise_id)\r\n      }\r\n    }\r\n\r\n\r\n  trackClicked = (item: any) => {\r\n    const { playingTrack } = this.props;\r\n    this.props.getProfileById(item.user_id).then((res: any) => {\r\n      let demoTrack = (res.data.demo_track || []).find((item: any) => item.primary === 1);\r\n      if(demoTrack){\r\n          demoTrack.first_name = res.data.first_name;\r\n          demoTrack.last_name = res.data.last_name;\r\n          let isPaused  = false;\r\n          if(playingTrack){\r\n              isPaused =  playingTrack.track_id != demoTrack.track_id ? false : !playingTrack.isPaused ;\r\n          }\r\n          this.props.playTrack(demoTrack, isPaused)\r\n      }else{\r\n          toast.error(\"Demo track not found\")\r\n      }\r\n    });\r\n  }\r\n\r\n  render(){\r\n    console.log('data exp', this.props);\r\n    \r\n    const titlesData = this.props && this.props.expertiseData;\r\n    const title = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'title')\r\n    const description = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'description')\r\n    \r\n    const { activeTab } = this.state;\r\n    const { expertiseViewArr, expertiseArr } = this.props;\r\n    return (\r\n        <div className=\"expertise\">\r\n          <ToastContainer />\r\n            <div className=\"top-head\">\r\n                <h1>{title && title.text}</h1>\r\n                <p className=\"f-p\">{description && description.text}</p>\r\n            </div>\r\n            <div  className=\"dashboardTab\">\r\n            <Nav tabs>\r\n            {\r\n              expertiseArr && expertiseArr.map((item, index) => (\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({ active: activeTab === index })}\r\n                    onClick={() => {\r\n                      this.toggle(index, item.expertise_id); }}>\r\n                      {item.name}\r\n                  </NavLink>\r\n                </NavItem>\r\n              ))\r\n            }\r\n            </Nav>\r\n      \r\n            <Row>\r\n              {\r\n                expertiseViewArr && expertiseViewArr.map((item, index) => (\r\n                  <Col>\r\n                    <ListCard history={this.props.history} data={item}  onClick={ this.trackClicked }/>\r\n                  </Col>\r\n                ))\r\n              } \r\n            </Row>\r\n        \r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\ninterface IProps{\r\n  getExpertiseView: (expertise_id?: string)=> Promise<any>\r\n  expertiseList: ()=> Promise<any>\r\n  expertiseViewArr: any[]\r\n  expertiseArr: any[]\r\n  history: History\r\n  playTrack: (data: any, isPaused: boolean) => Promise<any>,\r\n  playingTrack: any;\r\n  getProfileById: (id: string) => Promise<any>,\r\n  discoverExpertiseData: any,\r\n  expertiseData: any\r\n}\r\n\r\ninterface IState{\r\n  activeTab: number\r\n}\r\n\r\nconst mapStateToProps = ( state: any ) => {\r\n  return { \r\n    expertiseViewArr: state.discovery.expertiseView,\r\n    expertiseArr: state.masterData.expertiseList,\r\n    playingTrack: state.user.playingTrack,\r\n    expertiseData: state.discovery.expData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps =  {\r\n  getExpertiseView, \r\n  expertiseList, playTrack, getProfileById,\r\n  discoverExpertiseData\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps )(Expertise);\r\n\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/genre_page/Genre.tsx",["722","723","724","725","726","727"],"import React, {useState} from 'react';\r\nimport './Genre.scss';\r\nimport { Row, Col, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport ListCard from '../../common/list_card/ListCard'; \r\nimport { genreView, discoverGenreData} from '../../../../redux/discovery/action'\r\nimport { connect } from 'react-redux';\r\nimport { genreList } from '../../../../redux/master-data/action';\r\nimport {History} from \"history\";\r\nimport {getProfileById, playTrack } from '../../../../redux/user/action'; \r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport _ from 'lodash';\r\n\r\ninterface IProps{\r\n    genreView: (genre_id?: string)=> Promise<any>\r\n    genreList: ()=> Promise<any>\r\n    genreViewArr: any[]\r\n    genreArr: any[]\r\n    history: History\r\n    playTrack: (data: any, isPaused: boolean) => Promise<any>,\r\n    playingTrack: any;\r\n    getProfileById: (id: string) => Promise<any>,\r\n    discoverGenreData: any,\r\n    genreData: any\r\n }\r\n\r\ninterface IState{\r\n  activeTab: number\r\n}\r\n\r\nclass Genre extends React.Component<IProps, IState> {\r\n\r\n    readonly state : IState = {activeTab: 0}\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount(){\r\n      this.props.genreList();\r\n      this.props.discoverGenreData();\r\n      this.props.genreArr && this.props.genreArr[this.state.activeTab] && this.props.genreView(this.props.genreArr[this.state.activeTab].expertise_id)\r\n    }\r\n\r\n    toggle = (activeTab: number, genre_id: string) => {\r\n      this.setState({activeTab})\r\n      this.props.genreView(genre_id);\r\n    }\r\n    componentDidUpdate(prevProps: IProps){\r\n      if( prevProps.genreArr != this.props.genreArr ){\r\n        this.props.genreView(this.props.genreArr[this.state.activeTab].expertise_id)\r\n      }\r\n    }\r\n    \r\n\r\n    trackClicked = (item: any) => {\r\n      const { playingTrack } = this.props;\r\n      this.props.getProfileById(item.user_id).then((res: any) => {\r\n        let demoTrack = (res.data.demo_track || []).find((item: any) => item.primary === 1);\r\n        if(demoTrack){\r\n            demoTrack.first_name = res.data.first_name;\r\n            demoTrack.last_name = res.data.last_name;\r\n            let isPaused  = false;\r\n            if(playingTrack){\r\n                isPaused =  playingTrack.track_id != demoTrack.track_id ? false : !playingTrack.isPaused ;\r\n            }\r\n            this.props.playTrack(demoTrack, isPaused)\r\n        }else{ \r\n            toast.error(\"Demo track not found\")\r\n        }\r\n    });\r\n  }\r\n\r\n    render(){\r\n      const titlesData = this.props && this.props.genreData;\r\n      const title = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'title')\r\n      const description = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'description')\r\n      \r\n      \r\n      const { activeTab } = this.state;\r\n      const { genreViewArr, genreArr } = this.props;\r\n      return (\r\n        <div className=\"genre\">\r\n          <ToastContainer />\r\n            <div className=\"top-head\">\r\n                <h1>{title && title.text}</h1>\r\n                <p className=\"f-p\">{description && description.text}</p>\r\n            </div>\r\n            <div  className=\"dashboardTab\">\r\n            <Nav tabs>\r\n              {\r\n                genreArr && genreArr.map((item, index) => (\r\n                  <NavItem>\r\n                    <NavLink\r\n                      className={classnames({ active: activeTab === index })}\r\n                      onClick={() => { this.toggle(index, item.genre_id); }}>\r\n                        {item.name}\r\n                    </NavLink>\r\n                  </NavItem>\r\n                ))\r\n              }\r\n            </Nav>\r\n              {/* <TabContent activeTab={activeTab}>\r\n                <TabPane tabId={1}> */}\r\n            <Row>\r\n                {\r\n                  genreViewArr && genreViewArr.map((item, index) => (\r\n                    <Col>\r\n                    <ListCard history={this.props.history}  data={item} onClick={ this.trackClicked } />\r\n                    </Col>\r\n                  ))\r\n                } \r\n            </Row>\r\n                {/* </TabPane> */}\r\n                {/* <TabPane tabId={2}>\r\n                <Row>\r\n                        <Col className=\"first-row-col\">\r\n                            <ListCard />\r\n                        </Col>\r\n                      \r\n                    </Row>\r\n                </TabPane> */}\r\n              {/* </TabContent> */}\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n    }\r\n\r\n    \r\n}\r\n\r\nconst mapStateToProps = ( state: any ) => {\r\n  return { \r\n    genreViewArr: state.discovery.genreView,\r\n    genreArr: state.masterData.genreList,\r\n    playingTrack: state.user.playingTrack,\r\n    genreData: state.discovery.genData,\r\n\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps =  {\r\n  genreView, \r\n  genreList, playTrack, \r\n  getProfileById,\r\n  discoverGenreData\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps )(Genre);\r\n\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/discovery/home_page/HomePage.tsx",["728","729","730","731","732","733","734"],"import React from 'react';\r\nimport './HomePage.scss'\r\nimport Carousel from 'react-multi-carousel';\r\nimport 'react-multi-carousel/lib/styles.css'; \r\nimport ListCard from '../../common/list_card/ListCard';\r\nimport FooterDashboard from '../../common/footer_dahboard/FooterDashboard';\r\nimport { connect } from 'react-redux';\r\nimport { discovery, discoveryFeatured, discoverHomeData } from '../../../../redux/discovery/action';\r\nimport { getProfileById, playTrack } from '../../../../redux/user/action'; \r\nimport { History } from 'history';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport _ from 'lodash';\r\n\r\nconst responsive = {\r\n    superLargeDesktop: {\r\n        // the naming can be any, depends on you.\r\n        breakpoint: { max: 4000, min: 1366 },\r\n        items: 5\r\n    }, \r\n    desktop: {\r\n        breakpoint: { max: 1365, min: 1001 },\r\n        items: 4\r\n    },\r\n    desktop2: {\r\n        breakpoint: { max: 1000, min: 768 },\r\n        items: 4\r\n    },\r\n    tablet: {\r\n        breakpoint: { max: 767, min: 499 },\r\n        items: 3\r\n    },\r\n    mobile: {\r\n        breakpoint: { max: 500, min: 0 },\r\n        items: 2.5\r\n    }\r\n};\r\n\r\ninterface IProps{\r\n    getProfileById: (id: string) => Promise<any>,\r\n    discovery: ()=> Promise<any>,\r\n    discoveryFeatured: ()=> Promise<any>,\r\n    playTrack: (data: any, isPaused: boolean) => Promise<any>,\r\n    discover: any[],\r\n    discoverFeatured: any[],\r\n    history: History, \r\n    playingTrack: any,\r\n    discoverHomeData: any,\r\n    discoverTitles: any\r\n}\r\n\r\ninterface IState{\r\n    filteredDiscover: any[],\r\n    filteredDiscoverFeatured: any[],\r\n    searchKey: string;\r\n    user: any | null\r\n}\r\n\r\nclass HomePage extends React.Component<IProps, IState> {\r\n    \r\n    readonly state: IState = {filteredDiscover: [], filteredDiscoverFeatured: [], searchKey: '', user: JSON.parse( JSON.stringify(localStorage.getItem(\"userData\")) )};\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.props.discoveryFeatured();\r\n        this.props.discovery();\r\n        this.props.discoverHomeData();\r\n    }\r\n\r\n    componentDidUpdate(props: IProps){\r\n        if(props.discover != this.props.discover || props.discoverFeatured != this.props.discoverFeatured){\r\n            this.onSearch(this.state.searchKey);\r\n        }\r\n    }\r\n\r\n    onSearch = (searchKey: string) => {\r\n        let { filteredDiscoverFeatured, filteredDiscover } = this.state;\r\n        let { discover, discoverFeatured } = this.props;\r\n        searchKey = searchKey.toLowerCase();\r\n        filteredDiscover = discover.filter((item: any) => `${item.first_name} ${item.last_name}`.toLowerCase().includes(searchKey))\r\n        filteredDiscoverFeatured = discoverFeatured.filter((item: any) => `${item.first_name} ${item.last_name}`.toLowerCase().includes(searchKey))\r\n        this.setState({ searchKey, filteredDiscoverFeatured, filteredDiscover });\r\n    }\r\n\r\n    trackClicked = (item: any) => {\r\n        const { playingTrack } = this.props;\r\n        this.props.getProfileById(item.user_id).then((res: any) => {\r\n            let demoTrack = (res.data.demo_track || []).find((item: any) => item.primary === 1);\r\n            if(demoTrack){\r\n                demoTrack.first_name = res.data.first_name;\r\n                demoTrack.last_name = res.data.last_name;\r\n                let isPaused  = false;\r\n                if(playingTrack){\r\n                    isPaused =  playingTrack.track_id != demoTrack.track_id ? false : !playingTrack.isPaused ;\r\n                }\r\n                this.props.playTrack(demoTrack, isPaused)\r\n            }else{\r\n                toast.error(\"Demo track not found\")\r\n            }\r\n        });\r\n    }\r\n\r\n    isPlaying = (id: string) => {\r\n        const { playingTrack } = this.props;\r\n        let isPaused  = false;\r\n        if(playingTrack){\r\n            isPaused =  playingTrack.track_id !=  id ? false : !playingTrack.isPaused ;\r\n        }\r\n    }\r\n\r\n    render () {\r\n        let { history } = this.props;\r\n        const titlesData = this.props && this.props.discoverTitles;\r\n        const title = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'title')\r\n        const title2 = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'title_home_1')\r\n        const description = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'description')\r\n        const description2 = !_.isEmpty(titlesData) && _.toArray(titlesData).find(element => element.place === 'description_home_1')\r\n        const myDate = new Date();\r\n        const hrs = myDate.getHours();\r\n\r\n        let { filteredDiscoverFeatured, filteredDiscover } = this.state;\r\n        const { user } = this.state;\r\n        let parsedUser : any   = {}\r\n        if(user   ){\r\n            parsedUser = JSON.parse(  user  )\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"homePage\">\r\n                <ToastContainer />\r\n                    <div className=\"top-head\">\r\n                        <h1>{hrs < 12 ? 'Good Morning' : (hrs >= 12 && hrs <= 17) ? 'Good Afternoon' : (hrs >= 17 && hrs <= 24) ? 'Good Evening' : null }, {parsedUser.first_name || \"\"}</h1>\r\n                        <div className=\"search-field\">\r\n                            <input type=\"text\" placeholder=\"Search\" onChange={(event: any) => this.onSearch(event.target.value)} />\r\n                            <i className=\"icon icon-search\"></i>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"featured\">\r\n                        <p className=\"f-p1\">{title && title.text}</p>\r\n                        <p className=\"f-p\">{description && description.text}</p>\r\n                        <div className=\"position-relative\">\r\n                            <Carousel responsive={responsive} className=\"carousel-custom\">\r\n                                {\r\n                                    filteredDiscover && filteredDiscover.map((user, index) => (\r\n                                        <ListCard key={index} history={history} data={user} onClick={ this.trackClicked }/>\r\n                                    )) \r\n                                }\r\n                            </Carousel>\r\n                            {/* <div className={filteredDiscover.length === 4  ? '' : 'gradiant'}></div> */}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"featured  \">\r\n                        <p className=\"f-p1\">{title2 && title2.text}</p>\r\n                        <p className=\"f-p\">{description2 && description2.text}</p>\r\n                        <div className=\"position-relative\">\r\n                            <Carousel responsive={responsive} className=\"carousel-custom\">\r\n                            {\r\n                                    filteredDiscoverFeatured && filteredDiscoverFeatured.map((user, index) => (\r\n                                        <ListCard  key={index} history={history}  data={user} onClick={ this.trackClicked } />\r\n                                    )) \r\n                                }\r\n                            </Carousel>\r\n                            {/* <div className={filteredDiscoverFeatured.length === 4  ? '' : 'gradiant'}></div> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* <FooterDashboard /> */}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\nconst mapStateToProps = ( state: any ) => {\r\n    return { \r\n        discover: state.discovery.discover,\r\n        discoverFeatured: state.discovery.discoverFeatured,\r\n        discoverTitles: state.discovery.disData,\r\n        playingTrack: state.user.playingTrack,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =  {\r\n    discovery, discoveryFeatured, playTrack, getProfileById , discoverHomeData \r\n}\r\n\r\nexport default  connect(mapStateToProps, mapDispatchToProps )(HomePage);\r\n\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/collaborators_chat/CollaboratorsChat.tsx",["735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758"],"import React from 'react';\r\nimport './CollaboratorsChat.scss';\r\nimport { Button } from 'reactstrap';\r\nimport profile from '../../../../assets/images/profile.png';\r\nimport { connect } from 'react-redux';\r\nimport { getCurrentConversation } from '../../../../redux/user/action';\r\nimport { myNetwork } from \"../../../../redux/network/action\";\r\nimport _ from 'lodash';\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\nimport MessengerService from '../../../../services/voximplant-service/messenger.service';\r\ninterface IProps {\r\n  history: any;\r\n  currentUser: any;\r\n  currentConversation: any;\r\n  currentProfile: any;\r\n  allConversation: any;\r\n  currentConversationID: any;\r\n  getCurrentConversation: any;\r\n  myNetwork: any;\r\n  myNetworkList: any;\r\n  voxUserList: any;\r\n  voxUserCurrentUser: any;\r\n}\r\n\r\ninterface IState {\r\n  message: string;\r\n  searchMessage: any\r\n}\r\n\r\nclass CollaboratorsChat extends React.Component<IProps, IState> {\r\n  private messageContainer: React.RefObject<HTMLDivElement>;\r\n  private fileSelect: React.RefObject<HTMLInputElement>;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      message: '',\r\n      searchMessage: false\r\n    };\r\n    this.messageContainer = React.createRef();\r\n    this.fileSelect = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const uuid = this.getCurrentMessageUUID();\r\n    if (uuid) {\r\n      getCurrentConversation(uuid);\r\n    }\r\n    this.props.myNetwork(true);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // this.scrollToBottom();\r\n  }\r\n\r\n  scrollToBottom = () => {\r\n    this.messageContainer &&\r\n      this.messageContainer.current &&\r\n      this.messageContainer.current.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps: any) {\r\n    const uuid = this.getCurrentMessageUUID();\r\n    if (uuid && nextProps.currentConversationID !== uuid) {\r\n      getCurrentConversation(uuid);\r\n    }\r\n\r\n    if (!_.isEqual(this.props.currentConversation, nextProps.currentConversation)) {\r\n      setTimeout(()=>{\r\n        this.scrollToBottom();\r\n      }, 300);\r\n    }\r\n\r\n  }\r\n\r\n  selectFile = () => {\r\n    this.fileSelect &&\r\n      this.fileSelect.current &&\r\n      this.fileSelect.current.click();\r\n  };\r\n\r\n  toBase64 = (file: any) =>\r\n    new Promise((resolve, reject) => {\r\n      const reader: any = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = (error: any) => reject(error);\r\n    });\r\n\r\n  onChangeFile = async (event: any) => {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    var file = event.target.files[0];\r\n    const uuid = this.getCurrentMessageUUID();\r\n    const { allConversation } = this.props;\r\n    const currentConversation =\r\n      allConversation &&\r\n      allConversation.find((item: any) => item._uuid === uuid);\r\n    if (file && currentConversation) {\r\n      const messenger = MessengerService.get();\r\n      const blob = await this.toBase64(file);\r\n      messenger\r\n        .sendMessage(currentConversation, '', { file: blob, name: file.name, type: file.type})\r\n        .then((data: any) => {\r\n          console.log('Attachment send successfully', data);\r\n        })\r\n        .catch((e: any) => {\r\n          console.log('Attachment send got error', e);\r\n        });\r\n    }\r\n  };\r\n\r\n  getCurrentMessageUUID() {\r\n    const {\r\n      location: { search },\r\n    } = this.props.history;\r\n    const uuid = new URLSearchParams(search).get('uuid');\r\n    return uuid;\r\n  }\r\n\r\n  searchFilter = (e:any) => {\r\n    if(e.target.value.trim()){\r\n      this.setState({searchMessage: e.target.value.trim().toLowerCase()})\r\n    } else {\r\n      this.setState({searchMessage: false})\r\n    }\r\n  }\r\n\r\n  checkEmail(userName: any) {\r\n    if (userName) {\r\n      const tempEmail = userName.replace('-loop-', '@').slice(0, -15);\r\n      return tempEmail;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getUserDetailByEmail = (email: string)=> {\r\n    const { myNetworkList } = this.props;\r\n    if (email && myNetworkList) {\r\n      return myNetworkList.find((item:any)=> item.email === email)\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getUserDetail = (participants: any, direct: boolean)=> {\r\n    const { myNetworkList, voxUserList, voxUserCurrentUser } = this.props;\r\n    if (participants) {\r\n      const participantsInfo = participants.map((item:any)=>{\r\n        const findUSer = voxUserList.find((subItem: any)=> item.userId === subItem.userId);\r\n        const userEmail = findUSer && findUSer.userName && this.checkEmail(findUSer.userName);\r\n        if (userEmail && myNetworkList) {\r\n          const info = myNetworkList.find((item:any)=> item.email === userEmail)\r\n          return {\r\n            ...item,\r\n            first_name: info && info.first_name || null,\r\n            last_name: info &&info.last_name || null,\r\n            photo: info && info.photo || null,\r\n            email: info && info.email || userEmail,\r\n            online: findUSer && findUSer.online\r\n          }\r\n        }\r\n        return item;\r\n      })\r\n      if (voxUserCurrentUser && direct) {\r\n        return participantsInfo.find((item: any)=> item.userId !== voxUserCurrentUser.userId)\r\n      } else if (voxUserCurrentUser) {\r\n        return participantsInfo.filter((item: any)=> item.userId !== voxUserCurrentUser.userId)\r\n      }\r\n      return participantsInfo;\r\n    }\r\n    return participants\r\n  }\r\n\r\n  getCurrentConversationInfo() {\r\n    const uuid = this.getCurrentMessageUUID();\r\n    const { allConversation } = this.props;\r\n    const currentInfo =\r\n      allConversation &&\r\n      allConversation.find((item: any) => item._uuid === uuid);\r\n    const currentTime =\r\n      currentInfo &&\r\n      moment.unix(currentInfo.lastUpdate).format('MMM DD YYYY h:mm A');\r\n\r\n    const realUser = currentInfo && currentInfo.participants && this.getUserDetail(currentInfo.participants, currentInfo.direct);\r\n    let chatTitle = '';\r\n    let chatPhoto = profile;\r\n    if (currentInfo && currentInfo.direct) {\r\n      chatTitle = realUser.first_name ? realUser.first_name +' '+ realUser.last_name : realUser.email;\r\n      chatPhoto = realUser.photo;\r\n    } else {\r\n      realUser && realUser.map((item:any, index: any)=> {\r\n        if (item.first_name) {\r\n          chatTitle = index !==0 ? `${chatTitle},${item.first_name} ${item.last_name}` : `${item.first_name} ${item.last_name}`;\r\n        } else {\r\n          chatTitle = index !== 0? `${chatTitle},${item.email}` : `${item.email}`;\r\n        }\r\n      })\r\n    }\r\n   \r\n    return (\r\n      <div className=\"row header-chat m-0\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"d-flex justify-content-between\">\r\n            <div className=\"chat-top-mobile \">\r\n              <Button className=\"go-back\" onClick={this.props.history.goBack}>\r\n                <span className=\"icon-arrow-right\" />\r\n              </Button>\r\n            </div>\r\n             \r\n            <div className=\"active-user\">\r\n              <h1>{chatTitle}</h1>\r\n              <p className=\"pg-1\">\r\n                { realUser.online ? 'Online' : 'Last seen '} {!realUser.online && currentTime && <Moment fromNow>{currentTime}</Moment>}\r\n              </p>\r\n            </div>\r\n            <div className=\"search-field\">\r\n              <input type=\"text\" placeholder=\"Search\" onChange={this.searchFilter}/>\r\n              <i className=\"icon icon-search\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  sendMessage = () => {\r\n    const uuid = this.getCurrentMessageUUID();\r\n    const { allConversation } = this.props;\r\n    const currentConversation =\r\n      allConversation &&\r\n      allConversation.find((item: any) => item._uuid === uuid);\r\n    if (this.state.message && currentConversation) {\r\n      const messenger = MessengerService.get();\r\n      messenger.sendMessage(currentConversation, this.state.message);\r\n      this.setState({\r\n        message: '',\r\n      });\r\n    }\r\n  };\r\n\r\n  writeMessage = (e: any) => {\r\n    this.setState({\r\n      message: e.target.value,\r\n    });\r\n  };\r\n\r\n  downloadURI = (e:any, uri:any, name:any) => {\r\n    e.preventDefault();\r\n    let link = document.createElement(\"a\");\r\n    link.download = name;\r\n    link.href = uri;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  }\r\n\r\n  getCurrentConversationMessages() {\r\n    const uuid = this.getCurrentMessageUUID();\r\n    const { currentConversation, currentProfile } = this.props;\r\n    let currStoreTime = '';\r\n    let dateHeader: any = '';\r\n    const calendar = {\r\n      lastDay: '[Yesterday]',\r\n      sameDay: '[Today]',\r\n      lastWeek: 'dddd',\r\n      sameElse: 'L',\r\n    };\r\n    if (uuid && !_.isEmpty(currentConversation)) {\r\n      const conversation = currentConversation[uuid];\r\n      let imageShow = false;\r\n      let previousAligment: boolean | undefined = undefined;\r\n      return (\r\n        conversation &&\r\n        conversation.map((item: any) => {\r\n          if(this.state.searchMessage && \r\n            (\r\n              (item.text && !item.text.toLowerCase().includes(this.state.searchMessage)) || \r\n              (item.payload && \r\n                item.payload[0] && \r\n                item.payload[0]['name'] && \r\n                !item.payload[0]['name'].toLowerCase().includes(this.state.searchMessage)\r\n              )\r\n            )\r\n            ){\r\n              return false\r\n          }\r\n          const currentTime = moment(item.timestamp).format(\r\n            'MMM DD YYYY h:mm A'\r\n          );\r\n          const currExactTime = moment(item.timestamp).format('DD/MM/YYYY');\r\n          if (!currStoreTime || currStoreTime !== currExactTime) {\r\n            currStoreTime = currExactTime;\r\n            dateHeader = (\r\n              <div className=\"text-center no-message mb-4\">\r\n                <p>\r\n                  <Moment calendar={calendar}>{item.timestamp}</Moment>\r\n                </p>\r\n              </div>\r\n            );\r\n          } else {\r\n            dateHeader = '';\r\n          }\r\n          const email =\r\n            item.user &&\r\n            item.user.userName &&\r\n            this.checkEmail(item.user.userName);\r\n          const leftAligement = currentProfile && email == currentProfile.email ? false : true;\r\n          const userInfo = this.getUserDetailByEmail(email) || currentProfile;\r\n    \r\n          if(leftAligement && leftAligement != previousAligment) {\r\n            previousAligment = true;\r\n            imageShow = true\r\n          } else if (!leftAligement && leftAligement != previousAligment) {\r\n            previousAligment = false;\r\n            imageShow = true\r\n          } else {\r\n            imageShow = false\r\n          }\r\n\r\n          return (\r\n            <>\r\n              {dateHeader}\r\n              <div\r\n                className={\r\n                  leftAligement ? 'row m-0' : 'row m-0 justify-content-end'\r\n                }\r\n              >\r\n                <div\r\n                  className={\r\n                    leftAligement ? 'col-md-6 right-chat' : 'col-md-6 left-chat'\r\n                  }\r\n                >\r\n                  \r\n                    <div className=\"image\">\r\n                    {leftAligement && imageShow && (\r\n                      <img\r\n                        src={leftAligement &&  userInfo.photo || profile}\r\n                      />\r\n                      )}\r\n                    </div>\r\n                  \r\n                  <div className={imageShow ? 'message-box chat-tringle': 'message-box'}>\r\n                    <p>\r\n                      {item.payload &&\r\n                      item.payload[0] &&\r\n                      item.payload[0]['file'] ? (\r\n                        <a href=\"#\" onClick={(e:any)=>this.downloadURI(e, item.payload[0]['file'], item.payload[0]['name'])}>\r\n                          { item.payload[0]['name'] || 'Attachment' }\r\n                        </a>\r\n                      ) : (\r\n                        item._text\r\n                      )}\r\n                    </p>\r\n                    <br />\r\n                    <span className=\"time\">\r\n                      {moment(currentTime).format('LT')}\r\n                    </span>\r\n                  </div>\r\n                  \r\n                    <div className=\"image\">\r\n                    {!leftAligement && imageShow && (\r\n                      <img\r\n                        src={leftAligement &&  userInfo.photo || profile}\r\n                      />\r\n                      )}\r\n                    </div>\r\n                  \r\n                </div>\r\n              </div>\r\n            </>\r\n          );\r\n        })\r\n      );\r\n    }\r\n    return [];\r\n  }\r\n\r\n  render() {\r\n    const uuid = this.getCurrentMessageUUID();\r\n    if(!uuid){\r\n      return null\r\n    }\r\n    return (\r\n      <div className=\"collaboratorsChat\">\r\n        {this.getCurrentConversationInfo()}\r\n        <div className=\"chatting-section\">\r\n          <div className=\"text-center no-message mb-4\">\r\n            <p>\r\n              There are no messages yet, this is your first conversation with\r\n              the member\r\n            </p>\r\n          </div>\r\n          {this.getCurrentConversationMessages()}\r\n          <span ref={this.messageContainer} />\r\n        </div>\r\n        <div className=\"row header-footer m-0\">\r\n          <input\r\n            type=\"file\"\r\n            ref={this.fileSelect}\r\n            onChange={this.onChangeFile}\r\n            style={{display: 'none'}}\r\n          />\r\n          <div className=\"col-md-12\">\r\n            <input\r\n              className=\"form-control\"\r\n              placeholder=\"Enter your message\"\r\n              value={this.state.message}\r\n              onChange={this.writeMessage}\r\n              onKeyUp={\r\n                (event: any)=> {\r\n                  if (event.keyCode === 13) {\r\n                      event.preventDefault();\r\n                      this.sendMessage()\r\n                  }\r\n                }\r\n              }\r\n            />\r\n            <i className=\"icon-paperclip\" onClick={this.selectFile} />\r\n            <i\r\n              className=\"icon-paper-plane\"\r\n              onClick={() => this.sendMessage()}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    currentUser:\r\n      !_.isEmpty(state.user.vox_users) && state.user.vox_users.currentUser,\r\n    allConversation:\r\n      !_.isEmpty(state.user.vox_users) && state.user.vox_users.conversations,\r\n    currentProfile: !_.isEmpty(state.user) && state.user.profile,\r\n    currentConversation: state.user.conversationHistory,\r\n    currentConversationID: state.user.currentConversationId,\r\n    myNetworkList: state.network.myNetwork || [],\r\n    voxUserList: state.user && state.user.vox_users && state.user.vox_users.users || [],\r\n    voxUserCurrentUser: state.user && state.user.vox_users && state.user.vox_users.currentUser || {},\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getCurrentConversation,\r\n  myNetwork,\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CollaboratorsChat);\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/virtual_sessions/VirtualSessions.tsx",["759","760","761","762","763","764","765","766","767","768","769","770"],"import React from 'react';\r\nimport './VirtualSessions.scss';\r\nimport audio2 from '../../../../assets/images/audio2.png'\r\nimport audio1 from '../../../../assets/images/audio1.png'\r\nimport { Button } from 'reactstrap';\r\nimport profile from '../../../../assets/images/profile.png'\r\n\r\nclass VirtualSessions extends React.Component<{}> {\r\n    \r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    render() { \r\n        return(\r\n             <div className=\"virtual-chat\">\r\n                 <div className=\"chat-top-mobile virtual-chat-side\">\r\n                 <Button className=\"go-back\">\r\n                    <span className=\"icon-arrow-right\"></span>\r\n                </Button>\r\n                <span className=\"collab-profile\">\r\n                    <span>\r\n                        <img src={profile} />\r\n                        <img src={profile} />\r\n                        <img src={profile} />\r\n                        <img src={profile} />\r\n                        <img src={profile} />\r\n                    </span>\r\n                    <h1>5 Collaborators</h1>\r\n\r\n                </span>\r\n                 </div>\r\n                    <div className=\"image-virtual img1\">\r\n                        <img src={audio1} className=\"img-fluid w-100\"/>\r\n                    </div>\r\n                    <div className=\"image-virtual img2\">\r\n                        <img src={audio1} className=\"img-fluid w-100\"/>\r\n                    </div>\r\n                    <div className=\"image-virtual img3\">\r\n                        <img src={audio1} className=\"img-fluid w-100\"/>\r\n                    </div>\r\n                    <div className=\"image-virtual img4\">\r\n                        <img src={audio1} className=\"img-fluid w-100\"/>\r\n                    </div>\r\n                    <div className=\"image-virtual img5 \">\r\n                        <img src={audio1} className=\"img-fluid w-100\"/>\r\n                    </div>\r\n\r\n                 <div className=\"active-img\">\r\n                     <div className=\"position-relative\">\r\n                        <img src={audio2} className=\"img-fluid w-100\"/>\r\n                        <div className=\"chat-audio\">\r\n                            <div className=\"line\"></div>\r\n                            <i className=\"icon-microphone-alt-slash\"></i>\r\n                            <i className=\"icon-comments2\"></i>\r\n                        </div>\r\n                     </div>\r\n                 </div>\r\n\r\n                <div className=\"icons-section\">\r\n                    <span>\r\n                        <i className=\"icon-microphone-alt-slash\"></i>\r\n                        <p>MUTE</p>\r\n                    </span>\r\n                    <span>\r\n                        <i className=\"icon-webcam-slash\"></i>\r\n                        <p>OFF</p>\r\n                    </span>\r\n                    <span>\r\n                        <i className=\"icon-comments2\"></i>\r\n                        <p>CHAT</p>\r\n                    </span>\r\n                    <span>\r\n                        <i className=\"icon-close\"></i>\r\n                        <p>END</p>\r\n                    </span>\r\n                </div> \r\n             </div>\r\n        )\r\n    }\r\n}\r\nexport default VirtualSessions;","/Users/appleapple/Downloads/loop/src/features/dashboard/hub/terms_service/TermService.tsx",["771"],"import React from 'react';\r\nimport './TermService.scss';\r\nimport { Button } from 'reactstrap';\r\nimport YourNetwork from '../../common/your_network/YourNetwork';\r\ninterface State {\r\n    network: boolean;\r\n }\r\n\r\n \r\n\r\nclass TermService extends React.Component<{}, State> {\r\n    readonly state : State = { network: false}\r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    toggleNetwork = () => {\r\n        this.setState({ network : !this.state.network});\r\n    };\r\n\r\n\r\n    render() {\r\n        const { network } =  this.state;\r\n    return( \r\n        <>\r\n        <div className=\"termsPage\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-10\">\r\n                    <h1>Terms of Services </h1>\r\n                    <p className=\"pg-1\">Please read these Terms and Conditions (\"Terms\") carefully before accessing or using the website at www.loop.com and all related websites, software, apps, and/or plug-ins (together the \"Service\") made available by Loop GmbH (\"LOOP\", \"us\", \"we\" or \"our\").</p>\r\n                </div>\r\n            </div> \r\n            <h2>1. Acceptance of Terms</h2> \r\n            <p>1.1. LOOP operates the website www.loop.com (\"Website\"), a platform that allows you to post, link, store, share and otherwise make available certain information, text, graphics, photos, videos, or other material (together \"Content\"). Our goal is to help designers, bloggers and everyone who is looking for an image to find photos and other Content that you can use for free subject to and in compliance with these Terms.</p>\r\n            <p>1.2. Your access to and use of the Service is conditioned on your acceptance of and compliance with these Terms. These Terms apply to all photographers, visitors, users and others who access and/or use the Service.</p>\r\n            <p>1.3. By accessing or using the Service, whether as a photographer, visitor or user of the Website, you agree to be bound by these Terms. These Terms serve to protect and safeguard your rights, the rights of other users, our rights and the rights of third parties in the course of operating the Website. If you do not agree to the terms of use, you must immediately stop using any part of the Service.</p>\r\n            <p>1.4. We reserve the right to change or adapt these Terms at any time and without giving reasons with effect for the future. You will be notified of these changes at least two weeks before they take effect by posting them on the Website and should you have created a user account on our Website by notifying your registered e-mail address. You have the right to immediately cancel and terminate your account on our Website if you do not agree to the changes to the Terms. Changes shall be deemed approved by you if you continue to use the Service after the new Terms come into effect.</p>\r\n            <p>1.5. The use of the Service is subject to the Terms in force at the time of use.</p>\r\n            \r\n            <h2>2. Accounts and Registration</h2> \r\n            <p>2.1. You have the option of creating a user account on our Website so that you can use the additional functions of the Website, in particular for uploading photos and other Content or for participating in any contests made available through the Service. The opening of a user account can only take place with the agreement to these Terms.</p>\r\n            <p>2.2. Upon registration, Pexels and you enter into a contract for the use of the Website and the Services. There is no claim to the conclusion of this contract. Pexels is entitled to refuse your registration without giving reasons.</p>\r\n            \r\n            <Button className=\"network-btn\" onClick={this.toggleNetwork}>\r\n                <i className=\"icon icon-network\"></i>\r\n            </Button>\r\n        </div>\r\n        {network && <YourNetwork toggleNetwork={this.toggleNetwork}  network={network}/>}\r\n        </>\r\n    )\r\n    }\r\n}\r\nexport default TermService;","/Users/appleapple/Downloads/loop/src/utils/Constant.ts",[],"/Users/appleapple/Downloads/loop/src/layouts/Main.tsx",[],"/Users/appleapple/Downloads/loop/src/store/root-reducer.ts",[],"/Users/appleapple/Downloads/loop/src/features/home/subscription/Subscription.tsx",["772"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Col, Container, Row, Card, Button } from 'reactstrap';\r\nimport ContactFooter from '../../../layouts/contact_footer/ContactFooter';\r\nimport { subData } from '../../../redux/subscription/action'\r\n\r\nimport './Subscription.scss'\r\n\r\ninterface IProps {\r\n    subData: any,\r\n    subscriptionData: any\r\n} \r\n\r\nclass Subscription extends React.Component<IProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n      }\r\n\r\n      componentWillMount() {\r\n        this.props.subData();\r\n      }\r\nrender() {\r\n    const data = this.props &&  this.props.subscriptionData && this.props.subscriptionData[0]\r\n\r\n    return (\r\n        <div className=\"subscription-page\">\r\n            <div className=\"section-1\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col md=\"5\" className=\"left-section\">\r\n                            <h1>{data && data.subscription_title}</h1>\r\n                            <p>{data && data.subscription_description}</p>\r\n                        </Col>\r\n                        <Col md=\"7\">\r\n                            <Row>\r\n                                <Col md=\"12\">\r\n                                <Card>\r\n                                    \r\n                                        {/* <Button className=\"free-btn\">Free</Button> */}\r\n                                        <Row>\r\n                                            <Col md=\"12\">\r\n                                                <p>{data && data.subscription_plan_title}</p>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <ul className=\"pr-2\">\r\n                                                    <li>{data && data.subscription_bullet_1_title}</li>\r\n                                                    <li>{data && data.subscription_bullet_2_title}</li>\r\n                                                </ul>\r\n                                            </Col>\r\n                                            <Col md=\"6\">\r\n                                                <ul className=\"pr-2\">\r\n                                                    <li>{data && data.subscription_bullet_3_title}</li>\r\n                                                </ul>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                            <Button className=\"border-gradiant-btn select-sub-btn\">\r\n                                                <div className=\"inner-module\">\r\n                                                <span>{data && data.subscription_button_title}</span></div>\r\n                                            </Button>\r\n                                            </Col>\r\n                                             \r\n                                        </Row>\r\n                                        \r\n                                    </Card>\r\n                                </Col>\r\n                                {/* <Col md=\"6\">\r\n                                    <Card>\r\n                                        <Button className=\"pro-btn\">Pro</Button>\r\n                                        <p>Get a feel for the platform with the following features:</p>\r\n                                        <ul>\r\n                                            <li>Connect with others worldwide</li>\r\n                                            <li>Collaborate on projects. Includes Virtual Sessions, file sharing and voice memo features</li>\r\n                                            <li>Feeling Random generator</li>\r\n                                        </ul>\r\n                                        <Button className=\"border-gradiant-btn\">\r\n                                        <div className=\"inner-module\">\r\n                                        <span>Select</span></div>\r\n                                            \r\n                                            </Button>\r\n                                    </Card>\r\n                                </Col> */}\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <ContactFooter />\r\n            \r\n        </div>\r\n    )\r\n}\r\n}\r\nconst mapStateToProps = ( state: any ) => {\r\n    return { \r\n        subscriptionData: state.subscription.data,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =  {\r\n    subData \r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps )(Subscription);","/Users/appleapple/Downloads/loop/src/features/home/blog_list/BlogList.tsx",["773","774","775"],"import React, { useState } from 'react';\r\nimport { Col, Container, Row, Card, Nav, NavItem, CardBody, Button, NavLink, TabContent, TabPane, CardFooter } from 'reactstrap';\r\nimport ContactFooter from '../../../layouts/contact_footer/ContactFooter';\r\nimport './BlogList.scss'\r\nimport classnames from 'classnames';\r\nimport blog1 from '../../../assets/images/blog1.png'\r\nimport logIcon from '../../../assets/images/icons/logo-icon.svg'\r\nimport heart from '../../../assets/images/icons/heart.svg'\r\nimport shareAlt from '../../../assets/images/icons/share-alt.svg'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst AllBlogList = (props: any) => {\r\n    return (\r\n        <React.Fragment>\r\n            {props.blogList.map((item: any) => (\r\n                <Col md=\"6\" className=\"mb-5\">\r\n                    <Link to=\"blog-detail\">\r\n                        <Card className=\"p-0\">\r\n                            <img src={blog1} alt='' className=\"w-100\" />\r\n                            <CardBody>\r\n                                <p className=\"p-1\">{item.content1}</p>\r\n                                <p >{item.content2}</p>\r\n                            </CardBody>\r\n                            <CardFooter>\r\n                                <div className=\"d-flex justify-content-between blog-list-footer\">\r\n                                    <div className=\"d-flex \">\r\n                                        <img src={logIcon} className=\"logo-icon\" />\r\n                                        <div className=\"ml-3\">\r\n                                            <p className=\"title\">{item.title}</p>\r\n                                            <p>{item.time}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <span><img src={heart} /></span>\r\n                                        <span>\r\n                                            <img src={shareAlt} />\r\n                                        </span>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </CardFooter>\r\n                        </Card>\r\n                    </Link>\r\n\r\n                </Col>\r\n            ))}\r\n\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nconst BlogList = () => {\r\n    const [activeTab, setActiveTab] = useState('1');\r\n\r\n    const toggle = (tab: React.SetStateAction<string>) => {\r\n        if (activeTab !== tab) setActiveTab(tab);\r\n    }\r\n    const blogList = [\r\n        {\r\n            id: 1,\r\n            title: 'LOOP News',\r\n            time: '2 days ago',\r\n            content1: 'A Quarantined Music Industry: “The Corona Stamp”',\r\n            content2: \"Covid-19 shook mankind in 2020, it's stains on our society have impacted all that we know and it continues to firmly establish itself as the “new ...\",\r\n            image: '/static/media/blog1.png',\r\n            type: \"Industry Wrap Up\"\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'LOOP News',\r\n            time: '2 days ago',\r\n            content1: 'Music Venue Trust Calls for £50m Rescue Package',\r\n            content2: \"Isanna is a classically trained UK based singer/songwriter who has been steadily gaining traction since her debut single ‘Until I Met You’ back... \",\r\n            image: '../../../assets/images/blog2.png',\r\n            type: \"Spotlight\"\r\n        },\r\n        {\r\n            id: 3,\r\n            title: 'LOOP News',\r\n            time: '2 days ago',\r\n            content1: 'Industry Wrap Up',\r\n            content2: \"From industry reform to Covid-19 and some major rebranding, we have all the top stories from the music scene this week. This week’s music news has been From industry reform to Covid-19 and some major...\",\r\n            image: '../../../assets/images/blog2.png',\r\n            type: \"Release Review\"\r\n        },\r\n        {\r\n            id: 4,\r\n            title: 'LOOP News',\r\n            time: '2 days ago',\r\n            content1: 'Liam Gallagher’s second chance with MTV Unplugged',\r\n            content2: \"Last week Liam Gallagher released his awaited MTV Unplugged live album. It has been over 20 years since he was supposed to pass this milestone with...\",\r\n            image: '../../../assets/images/blog2.png',\r\n            type: \"Hot Topic\"\r\n        }\r\n    ]\r\n\r\n\r\n    return (\r\n        <div className=\"blog-page\">\r\n            <div className=\"section-1\">\r\n                <Container className=\"blog-container\">\r\n                    <Row>\r\n                        <Col md=\"12\" className=\"left-section\">\r\n                            <h1>LOOP News</h1>\r\n                            <div>\r\n                                <Nav tabs>\r\n                                    <NavItem>\r\n                                        <NavLink\r\n                                            className={classnames({ active: activeTab === '1' })}\r\n                                            onClick={() => { toggle('1'); }}\r\n                                        >\r\n                                            All Posts\r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink\r\n                                            className={classnames({ active: activeTab === '2' })}\r\n                                            onClick={() => { toggle('2'); }}\r\n                                        >\r\n                                            Industry Wrap Up\r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink\r\n                                            className={classnames({ active: activeTab === '3' })}\r\n                                            onClick={() => { toggle('3'); }}\r\n                                        >\r\n                                            Spotlight\r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink\r\n                                            className={classnames({ active: activeTab === '4' })}\r\n                                            onClick={() => { toggle('4'); }}\r\n                                        >\r\n                                            Release Review\r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink\r\n                                            className={classnames({ active: activeTab === '5' })}\r\n                                            onClick={() => { toggle('5'); }}\r\n                                        >\r\n                                            Hot Topic\r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                </Nav>\r\n                                <TabContent activeTab={activeTab}>\r\n                                    <TabPane tabId=\"1\">\r\n                                        <Row>\r\n                                            <AllBlogList blogList={blogList} />\r\n                                        </Row>\r\n                                    </TabPane>\r\n                                    <TabPane tabId=\"2\">\r\n\r\n                                    </TabPane>\r\n                                    <TabPane tabId=\"3\">\r\n\r\n                                    </TabPane>\r\n                                </TabContent>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md=\"4\" className=\"text-center\">\r\n                            <Button className=\"border-gradiant-btn\">\r\n                                <div className=\"inner-module\">\r\n                                    <span>Show More</span></div>\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <ContactFooter />\r\n        </div>\r\n    )\r\n}\r\nexport default BlogList;","/Users/appleapple/Downloads/loop/src/features/home/blog-detail/BlogDetail.tsx",["776","777","778","779","780","781","782","783","784","785"],"import React  from 'react';\r\nimport { Col, Container, Row, Card,  CardBody, CardFooter } from 'reactstrap';\r\nimport ContactFooter from '../../../layouts/contact_footer/ContactFooter';\r\nimport './BlogDetail.scss'\r\nimport blog1 from '../../../assets/images/blog1.png'\r\nimport logIcon from '../../../assets/images/icons/logo-icon.svg'\r\n\r\nconst BlogDetailView = (props: any) => {\r\n    return (\r\n        <React.Fragment>\r\n        { props.blogList.map((item: any) => (\r\n           item.id === 1 && <Col md=\"12\">\r\n            <Card className=\"p-0 mb-5 detail-card\">\r\n            <div className=\"banner\">\r\n                <img src={blog1} alt='' className=\"w-100\"/>\r\n                </div>\r\n                <CardBody>\r\n                    <div className=\"d-flex header-section\">\r\n                        <h1>{item.content1}</h1>\r\n                        <div className=\"blog-list-footer\">\r\n                        <div className=\"d-flex \">\r\n                            <img src={logIcon} className=\"logo-icon\"/>\r\n                            <div className=\"ml-3\">\r\n                                <p className=\"title\">{item.title}</p>\r\n                                <p>{item.time}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    <p className=\"text-1\">{item.content2}</p>\r\n                    <p >{item.content3}</p>\r\n                    <p >{item.content4}</p>\r\n                    <p >{item.content5}</p>\r\n                    <p >{item.content6}</p>\r\n                    <p >{item.content7}</p>\r\n                    <p >{item.content8}</p>\r\n                    <p >{item.content9}</p>\r\n                    <p >{item.content10}</p>\r\n                    <p className=\"pg-2 mt-5\">{item.content11}</p>\r\n                    <p className=\"pg-2\">{item.content12}</p>\r\n                </CardBody>\r\n                <CardFooter>\r\n                    <div className=\"d-flex justify-content-between blog-list-footer\">\r\n                        <div className=\"d-flex \">\r\n                            <img src={logIcon} className=\"logo-icon\"/>\r\n                            <div className=\"ml-3\">\r\n                                <p className=\"title\">{item.title}</p>\r\n                                <p>{item.time}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <a href=\"https://twitter.com/\" target=\"_blank\"><span><i className=\"icon icon-twitter\"></i></span></a>\r\n                            <a href=\"https://www.facebook.com/\" target=\"_blank\"><span><i className=\"icon icon-facebook-f\"></i></span></a>\r\n                            <a href=\"https://www.linkedin.com/\" target=\"_blank\"><span><i className=\"icon icon-linkedin-in\"></i></span></a>\r\n                            <a href=\"javascript:void(0)\"><span><i className=\"icon icon-share-alt\"></i></span></a>\r\n                            <a href=\"javascript:void(0)\"><span><i className=\"icon icon-heart\"></i></span></a>\r\n\r\n                            \r\n                        </div>\r\n                    </div>\r\n                </CardFooter>\r\n        </Card>\r\n            </Col>  \r\n            ))}\r\n        \r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\nconst AllBlogList = (props: any) => {\r\n    return (\r\n        <React.Fragment>\r\n        { props.blogList.map((item: any) => (\r\n            \r\n            <Col md=\"4\">\r\n            <Card className=\"p-0 recent-card\">\r\n                <img src={blog1} alt='' className=\"w-100\"/>\r\n                <CardBody>\r\n                    <p className=\"pg-1\">{item.content1}</p>\r\n                </CardBody>\r\n                <CardFooter>\r\n                    <div className=\"d-flex justify-content-between blog-list-footer\">\r\n                        <div className=\"d-flex \">\r\n                            <img src={logIcon} className=\"logo-icon\"/>\r\n                            <div className=\"ml-3\">\r\n                                <p className=\"title\">{item.title}</p>\r\n                                <p>{item.time}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                        <span><i className=\"icon icon-heart\"></i></span>\r\n                        </div>\r\n                    </div>\r\n                </CardFooter>\r\n        </Card>\r\n            </Col>  \r\n            ))}\r\n        \r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nconst BlogDetail = () => {\r\n   \r\n\r\n    const blogList = [\r\n        {\r\n            id:1,\r\n            title: 'LOOP News',\r\n            time: '2 days ago',\r\n            content1: 'A Quarantined Music Industry: “The Corona Stamp”', \r\n            content2: \"Covid-19 shook mankind in 2020, it's stains on our society have impacted all that we know and it continues to firmly establish itself as the “new norm.” The music industry was one not spared and continues to feel the drastic effects from the measures put in place all around the world. No concerts, festivals, no live shows, no get-togethers, nothing. Even a small performance in your local pub could bring consequences. The repercussions left on countless live performers whose income solely relied on night outs and intimate performances in venues across the country has left them in situations we can’t fathom. So where does this leave them? Where does this leave us? The music lovers, concert-goers, the ears to the beauty that brings people together? \", \r\n            content3: \"If there is one thing that’s definitely visible in the music industry right now, it’s “The Corona Stamp.” From the biggest stars on the planet, to the burgeoning artists, one thing's for sure, coronavirus is present in the art. When governments from around the world began lockdown and social distancing, music makers hit a red light. Recording studios shut, music videos could not be shot, and several artists were forced to put a pause to their projects.\",\r\n            content4: \"From the start, many were left in the unknown with work that had been on-going. An Indie artist and profound songwriter, Sasha Sloan, was in the early stages of recording her album when it was cut short. Instead, she had to begin recording at home. But this story is one of many. Even the bigger artists including Ariana Grande, Ava Max and Charli XCX all had to “180” in the way they create - the studio to the bedroom. These big names have all had to record new music in their homes and for some, this was far out from the usual and totally new. This was an awakening, forcing creatives to learn the basic fundamentals of the recording process. One of Sweden’s biggest female popstars, Zara Larsson, quoted “I’m so excited to get out of this quarantine at least knowing how to cut my vocals and put down some chords for my own ideas.”. Sabrina Carpenter, the 21-year-old breakout Disney star said, “never sleeping again”, the caption on one of her Instagram posts of her small studio situated right next to her bed.\",\r\n            content5: \"This is only a fraction of the impact that Covid-19 has had upon creators; music videos have been drastically affected too. Newly released music videos such as Rain On Me by Lady Gaga and Ariana Grande, (shot before lockdown) had a cast consisting of at least 24 dancers. Under the new rules, not only would that be unsafe in a dance studio to learn the choreography, it would be illegal. Coronavirus has lead artists to a current trend we're now seeing a lot of: the artist, and their homemade visuals.  From green screens to nothing but a bedroom, the stars have had to shoot their music videos in the comfort of their own homes.\",\r\n            content6: \"Charli XCX set a goal of recording a whole new album in just six weeks when lockdown began. Following the release of this project, it seemed the music videos were the start of this new trend. She green-screened her first single from it, “claws.”\",\r\n            content7: \"Lennon Stella, the Canadian singer and actress removed all of her furniture out of her living room to capture the official video for “fear of being alone” from her latest album “Three. Two. One.” The Jonas Brothers “X” ft. Karol G, a fun, Spanish influenced track hit youtube with yet again, a socially distanced themed video. \",\r\n            content8: \"From the likes of Julia Micheals building a fort of sheets for “Give it you,” in her home, to Joy Crooks filming the visualizer in her flat for “Anyone But Me” these videos are showing the lengths artists are going to facing implemented rules.\",\r\n            content9: \"If it’s not in your bedroom, it’s the environment surrounding you. Katy Perry’s “Daisies” follows the soon to be superstar mum across an escape in nature. Aitch, the young rapper from Manchester used his city to encapsulate his single “30.” The safety precautions? Medical face masks replaced the social distancing in this one. \",\r\n            content10: \"To promote their new singles, live performances on late-night TV shows have been replaced by pre-recorded home performances. Jimmy Fallon has replaced his weekly live performance slots to home editions. \",\r\n            content11: \"Were not sure how long Covid-19 will co-exist with us, but it looks like artists may have to continue to dig deep for visual creativity a little while longer.\",\r\n            content12: \"From us to you, stay safe and keep creating.\",\r\n            image: '/static/media/blog1.png',\r\n            type:\"Industry Wrap Up\"\r\n        },\r\n        {\r\n            id:2,\r\n            title: 'LOOP News',\r\n            time: '2 days ago',\r\n            content1: 'Music Venue Trust Calls for £50m Rescue Package', \r\n            content2: \"Isanna is a classically trained UK based singer/songwriter who has been steadily gaining traction since her debut single ‘Until I Met You’ back... \", \r\n            content3: \"If there is one thing that’s definitely visible in the music industry right now, it’s “The Corona Stamp.” From the biggest stars on the planet, to the burgeoning artists, one thing's for sure, coronavirus is present in the art. When governments from around the world began lockdown and social distancing, music makers hit a red light. Recording studios shut, music videos could not be shot, and several artists were forced to put a pause to their projects.\",\r\n            content4: \"From the start, many were left in the unknown with work that had been on-going. An Indie artist and profound songwriter, Sasha Sloan, was in the early stages of recording her album when it was cut short. Instead, she had to begin recording at home. But this story is one of many. Even the bigger artists including Ariana Grande, Ava Max and Charli XCX all had to “180” in the way they create - the studio to the bedroom. These big names have all had to record new music in their homes and for some, this was far out from the usual and totally new. This was an awakening, forcing creatives to learn the basic fundamentals of the recording process. One of Sweden’s biggest female popstars, Zara Larsson, quoted “I’m so excited to get out of this quarantine at least knowing how to cut my vocals and put down some chords for my own ideas.”. Sabrina Carpenter, the 21-year-old breakout Disney star said, “never sleeping again”, the caption on one of her Instagram posts of her small studio situated right next to her bed.\",\r\n            content5: \"This is only a fraction of the impact that Covid-19 has had upon creators; music videos have been drastically affected too. Newly released music videos such as Rain On Me by Lady Gaga and Ariana Grande, (shot before lockdown) had a cast consisting of at least 24 dancers. Under the new rules, not only would that be unsafe in a dance studio to learn the choreography, it would be illegal. Coronavirus has lead artists to a current trend we're now seeing a lot of: the artist, and their homemade visuals.  From green screens to nothing but a bedroom, the stars have had to shoot their music videos in the comfort of their own homes.\",\r\n            content6: \"Charli XCX set a goal of recording a whole new album in just six weeks when lockdown began. Following the release of this project, it seemed the music videos were the start of this new trend. She green-screened her first single from it, “claws.”\",\r\n            content7: \"Lennon Stella, the Canadian singer and actress removed all of her furniture out of her living room to capture the official video for “fear of being alone” from her latest album “Three. Two. One.” The Jonas Brothers “X” ft. Karol G, a fun, Spanish influenced track hit youtube with yet again, a socially distanced themed video. \",\r\n            content8: \"From the likes of Julia Micheals building a fort of sheets for “Give it you,” in her home, to Joy Crooks filming the visualizer in her flat for “Anyone But Me” these videos are showing the lengths artists are going to facing implemented rules.\",\r\n            content9: \"If it’s not in your bedroom, it’s the environment surrounding you. Katy Perry’s “Daisies” follows the soon to be superstar mum across an escape in nature. Aitch, the young rapper from Manchester used his city to encapsulate his single “30.” The safety precautions? Medical face masks replaced the social distancing in this one. \",\r\n            content10: \"To promote their new singles, live performances on late-night TV shows have been replaced by pre-recorded home performances. Jimmy Fallon has replaced his weekly live performance slots to home editions. \",\r\n            \r\n            image: '../../../assets/images/blog2.png',\r\n            type:\"Spotlight\"\r\n        },\r\n        {\r\n            id:3,\r\n            title: 'LOOP News',\r\n            time: '2 days ago',\r\n            content1: 'Industry Wrap Up', \r\n            content2: \"From industry reform to Covid-19 and some major rebranding, we have all the top stories from the music scene this week. This week’s music news has been From industry reform to Covid-19 and some major...\", \r\n            content3: \"If there is one thing that’s definitely visible in the music industry right now, it’s “The Corona Stamp.” From the biggest stars on the planet, to the burgeoning artists, one thing's for sure, coronavirus is present in the art. When governments from around the world began lockdown and social distancing, music makers hit a red light. Recording studios shut, music videos could not be shot, and several artists were forced to put a pause to their projects.\",\r\n            content4: \"From the start, many were left in the unknown with work that had been on-going. An Indie artist and profound songwriter, Sasha Sloan, was in the early stages of recording her album when it was cut short. Instead, she had to begin recording at home. But this story is one of many. Even the bigger artists including Ariana Grande, Ava Max and Charli XCX all had to “180” in the way they create - the studio to the bedroom. These big names have all had to record new music in their homes and for some, this was far out from the usual and totally new. This was an awakening, forcing creatives to learn the basic fundamentals of the recording process. One of Sweden’s biggest female popstars, Zara Larsson, quoted “I’m so excited to get out of this quarantine at least knowing how to cut my vocals and put down some chords for my own ideas.”. Sabrina Carpenter, the 21-year-old breakout Disney star said, “never sleeping again”, the caption on one of her Instagram posts of her small studio situated right next to her bed.\",\r\n            content5: \"This is only a fraction of the impact that Covid-19 has had upon creators; music videos have been drastically affected too. Newly released music videos such as Rain On Me by Lady Gaga and Ariana Grande, (shot before lockdown) had a cast consisting of at least 24 dancers. Under the new rules, not only would that be unsafe in a dance studio to learn the choreography, it would be illegal. Coronavirus has lead artists to a current trend we're now seeing a lot of: the artist, and their homemade visuals.  From green screens to nothing but a bedroom, the stars have had to shoot their music videos in the comfort of their own homes.\",\r\n            content6: \"Charli XCX set a goal of recording a whole new album in just six weeks when lockdown began. Following the release of this project, it seemed the music videos were the start of this new trend. She green-screened her first single from it, “claws.”\",\r\n            content7: \"Lennon Stella, the Canadian singer and actress removed all of her furniture out of her living room to capture the official video for “fear of being alone” from her latest album “Three. Two. One.” The Jonas Brothers “X” ft. Karol G, a fun, Spanish influenced track hit youtube with yet again, a socially distanced themed video. \",\r\n            content8: \"From the likes of Julia Micheals building a fort of sheets for “Give it you,” in her home, to Joy Crooks filming the visualizer in her flat for “Anyone But Me” these videos are showing the lengths artists are going to facing implemented rules.\",\r\n            content9: \"If it’s not in your bedroom, it’s the environment surrounding you. Katy Perry’s “Daisies” follows the soon to be superstar mum across an escape in nature. Aitch, the young rapper from Manchester used his city to encapsulate his single “30.” The safety precautions? Medical face masks replaced the social distancing in this one. \",\r\n            content10: \"To promote their new singles, live performances on late-night TV shows have been replaced by pre-recorded home performances. Jimmy Fallon has replaced his weekly live performance slots to home editions. \",\r\n            \r\n            image: '../../../assets/images/blog2.png',\r\n            type:\"Release Review\"\r\n        }\r\n    ]\r\n \r\n\r\n    return (\r\n        <div className=\"blog-detail-page\">\r\n            <div className=\"section-1\">\r\n                <Container className=\"blog-container\">\r\n                    <Row>\r\n                        <BlogDetailView blogList={blogList}/>\r\n                     \r\n                    </Row>\r\n                    <div className=\"recent-post\">\r\n                        <Row>\r\n                        <Col md=\"12\" className=\"d-flex justify-content-between mb-4 mt-4\">\r\n                            <div>\r\n                                <h3>Recent Posts</h3>\r\n                            </div>\r\n                            <div>\r\n                                <button className=\"show-all-btn\">\r\n                                        Show All\r\n                                </button>\r\n                            </div>\r\n                        </Col>\r\n                        </Row>\r\n                        <Row className=\"card-grid\">\r\n                            <AllBlogList blogList={blogList}/>\r\n                        </Row>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <ContactFooter />\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default BlogDetail;","/Users/appleapple/Downloads/loop/src/features/home/how_it_work/HowItWork.tsx",["786","787"],"import React from 'react';\r\nimport { Col, Row, Container } from 'reactstrap';\r\nimport './HowItWork.scss'\r\nimport howItWorkOne from '../../../assets/images/how-it-work1.png'\r\nimport howItWorkTwo from '../../../assets/images/how-it-work2.png'\r\nimport howItWorkThree from '../../../assets/images/how-it-work3.png'\r\nimport howItWorkFour from '../../../assets/images/how-it-work4.png'\r\nimport howItWorkFive from '../../../assets/images/how-it-work5.png'\r\nimport genre from '../../../assets/images/icons/genre.svg'\r\nimport rocket from '../../../assets/images/icons/rocket.svg'\r\nimport location from '../../../assets/images/icons/location.svg'\r\nimport ContactFooter from '../../../layouts/contact_footer/ContactFooter';\r\nimport { connect } from 'react-redux';\r\nimport { homeData } from '../../../redux/home/action';\r\nimport { howItWorkData } from '../../../redux/how-it-work/action';\r\ninterface IProps {\r\n    howItWorkData: any,\r\n    howItWorkDataNew: any[]\r\n}\r\n\r\nclass HowItWork extends React.Component<IProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n      }\r\n\r\n      componentWillMount() {\r\n        this.props.howItWorkData();\r\n      }\r\n\r\n    render(){\r\n    const data = this.props &&  this.props.howItWorkDataNew && this.props.howItWorkDataNew[0]\r\n    return (\r\n        <div className=\"how-work-page\">\r\n            <div className=\"signin section-1\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col md=\"8\" className=\"bg\">\r\n                            <h1>{data && data.how_it_works_section_1_title}</h1>\r\n                            <p>{data && data.how_it_works_section_1_description}</p>\r\n                        </Col>\r\n                        <Col md=\"4\">\r\n                        <img alt='' src={howItWorkOne} className=\"image-dashboard\" />\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <div className=\"section-2\">\r\n                <Container>\r\n                    <Row className=\"align-items-center\">\r\n                        <Col md=\"6\" className=\"mobile-order left-section\">\r\n                            <img src={howItWorkTwo} className=\"w-100\" alt=''/>\r\n                            <img src={howItWorkThree} className=\"postion-img\" alt=''/>\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                            <Row>\r\n                                <Col sm={{size: 11, offset: 1}} md={{size: 10, offset: 2}} lg={{size: 9, offset: 3}}   className=\"right-text\">\r\n                                    <p>{data && data.how_it_works_section_2_bullet_1_title}</p>\r\n                                    <p>{data && data.how_it_works_section_2_bullet_1_description}</p>\r\n                                    <ul className=\"list\">\r\n                                        <li><img alt=''src={genre} /> {data && data.how_it_works_section_2_bullet_2_title}</li>\r\n                                        <li><img alt=''src={rocket} /> {data && data.how_it_works_section_2_bullet_3_title}</li>\r\n                                        <li><img alt=''src={location} /> <span>{data && data.how_it_works_section_2_bullet_4_title} - <span>you can even filter by future trips to book in sessions based on your upcoming travel plans (cool, right?). </span></span></li>\r\n                                    </ul>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"m-150 align-items-center\">\r\n                        <Col md=\"6\">\r\n                            <Row>\r\n                                <Col sm=\"11\" md=\"10\" lg=\"9\" className=\"right-text\">\r\n                                    <p className=\"p-1\">{data && data.how_it_works_section_3_title}</p>\r\n                                    <p>{data && data.how_it_works_section_3_description}</p>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                            <img alt=''src={howItWorkFour} className=\"w-100\" />\r\n                            <img alt=''src={howItWorkFive} className=\"postion-img2\" />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <ContactFooter />\r\n        </div>\r\n    )\r\n}\r\n}\r\nconst mapStateToProps = ( state: any ) => {\r\n    return { \r\n        howItWorkDataNew: state.howitwork.data\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =  {\r\n    howItWorkData \r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps )(HowItWork);","/Users/appleapple/Downloads/loop/src/features/home/auth/PurchaseSuccess.tsx",[],"/Users/appleapple/Downloads/loop/src/features/home/auth/Plans.tsx",[],"/Users/appleapple/Downloads/loop/src/features/home/auth/SignUp.tsx",["788"],"import React from 'react';\r\nimport { Col, Container, Row, Form, FormGroup, Input, Button } from 'reactstrap';\r\nimport logo from '../../../assets/images/logo.svg'\r\n// import { Link } from 'react-router-dom';\r\nimport AuthFooter from '../../../layouts/auth_footer/AuthFooter';\r\nimport {register} from '../../../redux/auth/action'\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\nimport { History } from 'history';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { Validators } from '../../../utils/Validators';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IState { \r\n    email: string,\r\n    password: string, \r\n    password_confirmation: string,\r\n    [key: string]: string  \r\n};\r\n\r\ninterface Props {\r\n    history: History,\r\n    register: (email? : string, password?: string, password_confirmation?: string) => Promise<any>\r\n} \r\n \r\nclass SignUp extends React.Component<Props, IState> {\r\n    readonly state: IState = { email: \"\", password: \"\", password_confirmation: \"\" }\r\n\r\n    constructor(props: any ){ \r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            password_confirmation: ''\r\n        }\r\n    }\r\n\r\n    onInputChange = (event: any) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    register = () => {\r\n        const { email, password, password_confirmation } = this.state;\r\n        if(  _.isEmpty(email) || _.isEmpty(password) || _.isEmpty(password_confirmation) ){\r\n            toast.error('Please provide all fields');\r\n            return;\r\n        }\r\n        if(!Validators.isEmail(email)){\r\n            toast.error(\"Invalid email\");\r\n            return;\r\n        }\r\n        if(password_confirmation != password){\r\n            toast.error(\"Both password should match\");\r\n            return;\r\n        }\r\n        if(password.length < 8 ) {\r\n            toast.error(\"Password must contain atleast 8 characters\")\r\n            return;\r\n        }\r\n        this.props.register(email, password, password_confirmation).then((response) => {\r\n            console.log(\"##response\", response, response['data']['success']);\r\n            if(response['data']['success']){\r\n                toast.success('Successfully registered');\r\n                setTimeout(() => this.props.history.push('sign-in'),200);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            toast.error('Something went wrong')\r\n        }); \r\n    }\r\n    enterSaveChanges = (event: any) => {\r\n        if (event.keyCode === 13) {\r\n          event.preventDefault();\r\n          this.register();\r\n        }\r\n      }\r\n    render(){\r\n        return (\r\n            <>\r\n            <div className=\"signin signup pb-250\">\r\n                <Container>\r\n                        <ToastContainer />\r\n                    <Row>\r\n                        <Col sm=\"8\"  md=\"7\" lg=\"5\">\r\n                            <Link to={'/'}>\r\n                            <img alt=''src={logo} className=\"logo-banner\" />\r\n                            </Link>\r\n                            <h1>Sign Up to LOOP</h1>\r\n                            <Row>\r\n                                <Col md=\"10\">\r\n                                    <p>It’s time to change the way you network. Ready?</p>\r\n\r\n                                    <Form>\r\n                                        <FormGroup>\r\n                                            <Input type=\"email\" name=\"email\" placeholder=\"Enter your email\" onChange={this.onInputChange}  onKeyUp={this.enterSaveChanges}/>\r\n                                            <Input type=\"password\" name=\"password\" placeholder=\"Enter your password\" onChange={this.onInputChange}  onKeyUp={this.enterSaveChanges}/>\r\n                                            <Input type=\"password\" name=\"password_confirmation\" placeholder=\"Confirm your password\" onChange={this.onInputChange}  onKeyUp={this.enterSaveChanges}/>\r\n                                            {/* <Link to='/plan'> */}\r\n                                                <Button className=\"button-btnGradiant\" onClick={this.register} >Let’s go!</Button>\r\n                                            {/* </Link> */}\r\n                                        </FormGroup>\r\n                                    </Form>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <AuthFooter />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\ninterface RootState {\r\n    auth: object\r\n}\r\n\r\nconst mapStateToProps = ( state: RootState ) => {\r\n    return { auth: state.auth}\r\n}\r\n\r\nconst mapDispatchToProps = { register }\r\n\r\n\r\nexport default  connect(mapStateToProps, mapDispatchToProps )(SignUp);","/Users/appleapple/Downloads/loop/src/features/home/auth/Purchase.tsx",[],"/Users/appleapple/Downloads/loop/src/features/home/auth/SignIn.tsx",["789"],"import React from 'react';\r\nimport { Col, Container, Row, Form, FormGroup, Input, Button } from 'reactstrap';\r\nimport logo from '../../../assets/images/logo.svg'\r\nimport AuthFooter from '../../../layouts/auth_footer/AuthFooter';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../../redux/auth/action'\r\nimport _ from 'lodash';\r\nimport { History } from 'history';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { Validators } from '../../../utils/Validators';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface State {\r\n    email: string;\r\n    password: string;\r\n    [key: string]: string;\r\n}\r\n\r\ninterface Props {\r\n    history: History,\r\n    login: (email?: string, password?: string) => Promise<any>\r\n}\r\n\r\nclass SignIn extends React.Component<Props, State> {\r\n    readonly state: State = { email: '', password: '' };\r\n\r\n    constructor(props: any) {\r\n\r\n        super(props);\r\n    }\r\n\r\n    onInputChange = (event: any) => {\r\n        this.setState(\r\n            { [event.target.name]: event.target.value }\r\n        )\r\n    }\r\n\r\n    signIn = () => {\r\n        let { email, password } = this.state;\r\n\r\n        if (!Validators.isEmail(email)) {\r\n            toast.error(\"Invalid email\");\r\n            return;\r\n        }\r\n\r\n        if (!(_.isEmpty(email) && _.isEmpty(password))) {\r\n            this.props.login(email, password).then((response) => {\r\n                toast('Successfully Logged in');\r\n                if (response && !response.full_name && !response.last_name && !response.image) {\r\n                    this.props.history.replace('/hub/edit-profile');\r\n                }\r\n                else {\r\n                    setTimeout(() => {\r\n                        this.props.history.replace('/discovery');\r\n                    }, 200);\r\n                }\r\n            })\r\n                .catch((error) => {\r\n                    toast('Login failed')\r\n                });\r\n        }\r\n    }\r\n    enterSaveChanges = (event: any) => {\r\n        if (event.keyCode === 13) {\r\n            event.preventDefault();\r\n            this.signIn();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"signin pb-250\">\r\n                    <Container>\r\n\r\n                        <ToastContainer />\r\n\r\n                        <Row>\r\n                            <Col sm=\"8\" md=\"7\" lg=\"5\">\r\n                                <Link to={'/'}>\r\n                                    <img alt='' src={logo} className=\"logo-banner\" />\r\n                                </Link>\r\n                                <h1>Welcome back  to LOOP</h1>\r\n                                <p>Let’s get you signed in</p>\r\n                                <Row>\r\n                                    <Col md=\"10\">\r\n                                        <Form>\r\n                                            <FormGroup>\r\n                                                <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Enter your email\" onChange={this.onInputChange} onKeyUp={this.enterSaveChanges} />\r\n                                                <Input type=\"password\" name=\"password\" id=\"exampleEmail\" placeholder=\"Enter your password\" onChange={this.onInputChange} onKeyUp={this.enterSaveChanges} />\r\n                                                {/* <Link to='/plan'> */}\r\n                                                <Button className=\"button-btnGradiant\" onClick={this.signIn} >Sign In</Button>\r\n                                                {/* </Link> */}\r\n                                            </FormGroup>\r\n                                        </Form>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                </div>\r\n                <AuthFooter />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\ninterface RootState {\r\n    auth: object\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return { auth: state.auth }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    login\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);","/Users/appleapple/Downloads/loop/src/features/home/home/Home.tsx",["790"],"import React from 'react';\r\nimport { Col, Container, Row, Button } from 'reactstrap';\r\nimport './Home.scss'\r\nimport play from '../../../assets/images/icons/play.svg'\r\nimport rocketLaunch from '../../../assets/images/icons/rocket-launch.svg'\r\nimport ContactFooter from '../../../layouts/contact_footer/ContactFooter';\r\nimport { homeData } from '../../../redux/home/action'\r\nimport { connect } from 'react-redux';\r\n \r\ninterface IProps {\r\n    homeData: any,\r\n    homeTitleData: any\r\n}\r\nclass HomePage extends React.Component<IProps> {\r\n    \r\n      constructor(props: any) {\r\n        super(props);\r\n      }\r\n\r\n      componentWillMount() {\r\n        this.props.homeData();\r\n      }\r\n      \r\nrender() {\r\n    // const {\r\n    //     homeTitleData = [],\r\n    //   } = this.state;\r\n      \r\n      const data = this.props && this.props.homeTitleData[0];\r\n\r\n    return (\r\n        <div className=\"home-page\">\r\n            <div className=\"signin section-1\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col md=\"5\">\r\n                            <h1>{data && data.home_section_1_title_1}</h1>\r\n                            <h1><img alt=''src={play} />{data && data.home_section_1_title_2}</h1>\r\n                            <h1>{data && data.home_section_1_title_3}</h1>\r\n                            <Button className=\"button-btnGradiant be-the-first-btn mt-5\">{data && data.home_section_1_header_button_text}</Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <div className=\"overlay-gradiant\">\r\n\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <div className=\"section-2 section-2-bg\">\r\n                <Container>\r\n                <Row className=\"m-0 about-row\">\r\n                    <Col sm=\"11\" md=\"7\" lg=\"6\">\r\n                        <h1 className=\"heading\">{data && data.home_section_2_title}</h1>\r\n                         \r\n                         <div dangerouslySetInnerHTML={ {__html: data && data.home_section_2_description} }></div>\r\n                        <div className=\"bottom-text\">\r\n                            <img src={rocketLaunch} alt=''/>\r\n                            ... {data && data.home_section_2_notes}\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                </Container>\r\n                \r\n            </div>\r\n            <ContactFooter />\r\n            \r\n        </div>\r\n    )\r\n}\r\n    \r\n}\r\nconst mapStateToProps = ( state: any ) => {\r\n    return { \r\n        homeTitleData: state.home.data,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =  {\r\n    homeData \r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps )(HomePage);\r\n","/Users/appleapple/Downloads/loop/src/store/utils.ts",[],"/Users/appleapple/Downloads/loop/src/redux/discovery/action.ts",["791","792","793","794","795"],"import { dispatch } from 'rxjs/internal/observable/pairs';\r\nimport { TrackResponse, Track } from './../../utils/models/user/response.model';\r\nimport { IUserDetail } from '../../utils/models/user/request.model';\r\nimport { Dispatch } from 'redux';\r\nimport API_PATH from '../../services/api-service/api-path';\r\nimport API from '../../services/api-service/api';\r\nimport { loadingAction } from '../auth/action';\r\nimport { DiscoveryActionType, EXPERTISE_VIEW_SUCCESS, EXPERTISE_VIEW_FAILURE, DISCOVER_SUCCESS, DISCOVER_FAILURE, DISCOVER_FEATURED_LIST_FAILURE, DISCOVER_FEATURED_LIST_SUCCESS, RECOMMENDED_SUCCESS, RECOMMENDED_FAILURE, RECENT_JOINED_SUCCESS, RECENT_JOINED_FAILURE, TRENDING_SUCCESS, TRENDING_FAILURE, LOCATION_SUCCESS, LOCATION_FAILURE, GENRE_VIEW_SUCCESS, GENRE_VIEW_FAILURE, RANDOM_SUCCESS, RANDOM_FAILURE, DISCOVERHOME_SUCCESS, DISCOVERHOME_FAILURE, DISCOVERRECOMMENDED_SUCCESS, DISCOVERRECOMMENDED_FAILURE, DISCOVERGENRE_SUCCESS, DISCOVERGENRE_FAILURE, DISCOVEREXPERTISE_SUCCESS, DISCOVEREXPERTISE_FAILURE, DISCOVERRECENTLY_SUCCESS, DISCOVERRECENTLY_FAILURE, DISCOVERLOCATION_SUCCESS, DISCOVERLOCATION_FAILURE, DISCOVERTRENDING_SUCCESS, DISCOVERTRENDING_FAILURE, DISCOVERMYNETWORK_SUCCESS, DISCOVERMYNETWORK_FAILURE } from './types';\r\nimport { IHomeItem, IHowItWorkItem } from '../../utils/models/other.model';\r\n  \r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function expertiseViewSuccess(data: any[]): DiscoveryActionType {\r\n  return {\r\n    type: EXPERTISE_VIEW_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function expertiseViewFailure(): DiscoveryActionType {\r\n  return {\r\n    type: EXPERTISE_VIEW_FAILURE,\r\n  }\r\n}    \r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function discoverySuccess(data: any[]): DiscoveryActionType {\r\n  return {\r\n    type: DISCOVER_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function discoveryFailure(): DiscoveryActionType {\r\n  return {\r\n    type: DISCOVER_FAILURE, \r\n  }\r\n}    \r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function discoveryFeaturedSuccess(data: any[]): DiscoveryActionType {\r\n  return {\r\n    type: DISCOVER_FEATURED_LIST_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function discoveryFeaturedFailure(): DiscoveryActionType {\r\n  return {\r\n    type: DISCOVER_FEATURED_LIST_FAILURE, \r\n  }\r\n}    \r\n \r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function recommendedSuccess(data: any[]): DiscoveryActionType {\r\n  return {\r\n    type: RECOMMENDED_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function recommendedFailure(): DiscoveryActionType {\r\n  return {\r\n    type: RECOMMENDED_FAILURE, \r\n  }\r\n}   \r\n \r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function recentlyJoinedSuccess(data: any[]): DiscoveryActionType {\r\n  return {\r\n    type: RECENT_JOINED_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function recmentlyJoinedFailure(): DiscoveryActionType {\r\n  return {\r\n    type: RECENT_JOINED_FAILURE, \r\n  }\r\n}    \r\n\r\n \r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function trendingSuccess(data: any[]): DiscoveryActionType {\r\n  return {\r\n    type: TRENDING_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function trendingFailure(): DiscoveryActionType {\r\n  return {\r\n    type: TRENDING_FAILURE, \r\n  }\r\n}\r\n \r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function locationSuccess(data: any[]): DiscoveryActionType {\r\n  return {\r\n    type: LOCATION_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function locationFailure(): DiscoveryActionType {\r\n  return {\r\n    type: LOCATION_FAILURE, \r\n  }\r\n}   \r\n \r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function genreViewSuccess(data: any[]): DiscoveryActionType {\r\n  return {\r\n    type: GENRE_VIEW_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function genreViewFailure(): DiscoveryActionType {\r\n  return {\r\n    type: GENRE_VIEW_FAILURE, \r\n  }\r\n}  \r\n \r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function randomSuccess(data: any[]): DiscoveryActionType {\r\n  return {\r\n    type: RANDOM_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function randomFailure(): DiscoveryActionType {\r\n  return {\r\n    type: RANDOM_FAILURE, \r\n  }\r\n}    \r\n\r\nexport function discoverHomeSuccess(data: IHowItWorkItem): any {\r\n  return {\r\n    type: DISCOVERHOME_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function discoverHomeFailure(): any {\r\n  return {\r\n    type: DISCOVERHOME_FAILURE, \r\n  }\r\n}  \r\n\r\nexport function discoverRecommendedSuccess(data: IHowItWorkItem): any {\r\n  return {\r\n    type: DISCOVERRECOMMENDED_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function discoverRecommendedFailure(): any {\r\n  return {\r\n    type: DISCOVERRECOMMENDED_FAILURE, \r\n  }\r\n}  \r\n\r\nexport function discoverGenreSuccess(data: IHowItWorkItem): any {\r\n  return {\r\n    type: DISCOVERGENRE_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function discoverGenreFailure(): any {\r\n  return {\r\n    type: DISCOVERGENRE_FAILURE, \r\n  }\r\n} \r\n\r\nexport function discoverExpertiseSuccess(data: IHowItWorkItem): any {\r\n  return {\r\n    type: DISCOVEREXPERTISE_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function discoverExpertiseFailure(): any {\r\n  return {\r\n    type: DISCOVEREXPERTISE_FAILURE, \r\n  }\r\n} \r\n\r\nexport function discoverRecentlySuccess(data: IHowItWorkItem): any {\r\n  return {\r\n    type: DISCOVERRECENTLY_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function discoverRecentlyFailure(): any {\r\n  return {\r\n    type: DISCOVERRECENTLY_FAILURE, \r\n  }\r\n} \r\n\r\nexport function discoverLocationSuccess(data: IHowItWorkItem): any {\r\n  return {\r\n    type: DISCOVERLOCATION_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function discoverLocationFailure(): any {\r\n  return {\r\n    type: DISCOVERLOCATION_FAILURE, \r\n  }\r\n} \r\n\r\nexport function discoverTrendingSuccess(data: IHowItWorkItem): any {\r\n  return {\r\n    type: DISCOVERTRENDING_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function discoverTrendingFailure(): any {\r\n  return {\r\n    type: DISCOVERTRENDING_FAILURE, \r\n  }\r\n}\r\n\r\nexport function discoverNetworkSuccess(data: IHowItWorkItem): any {\r\n  return {\r\n    type: DISCOVERMYNETWORK_SUCCESS,\r\n    payload: data\r\n  }\r\n}  \r\n\r\nexport function discoverNetworkFailure(): any {\r\n  return {\r\n    type: DISCOVERMYNETWORK_FAILURE, \r\n  }\r\n}\r\n\r\n\r\nexport const getExpertiseView = (expertise_id: string) =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let query = expertise_id ? `?expertise_id=${expertise_id}` : \"\";\r\n      let res = await API().get(API_PATH.EXPERTISE_VIEW + query );\r\n      const data = res.data ; \r\n      dispatch(loadingAction(false));\r\n       if(data.success){\r\n        dispatch(expertiseViewSuccess(data.data))\r\n      }else{\r\n        dispatch(expertiseViewFailure())\r\n      }\r\n      resolve({data: data.data.message})\r\n    } catch (error) {\r\n      dispatch(expertiseViewFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error} )\r\n    }\r\n  });\r\n}   \r\n\r\nexport const discovery = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let res = await API().get(API_PATH.DISCOVER );\r\n      const data = res.data ; \r\n      dispatch(loadingAction(false));\r\n       if(data.success){\r\n        dispatch(discoverySuccess(data.data))\r\n      }else{\r\n        dispatch(discoveryFailure())\r\n      }\r\n      resolve({data: data.data.message})\r\n    } catch (error) {\r\n      dispatch(discoveryFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error} )\r\n    }\r\n  });\r\n}\r\n\r\n\r\nexport const discoveryFeatured = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let res = await API().get(API_PATH.DISCOVER_FEATURED_LIST );\r\n      const data = res.data ; \r\n      dispatch(loadingAction(false));\r\n       if(data.success){\r\n        dispatch(discoveryFeaturedSuccess(data.data))\r\n      }else{\r\n        dispatch(discoveryFeaturedFailure())\r\n      }\r\n      resolve({data: data.data.message})\r\n    } catch (error) {\r\n      dispatch(discoveryFeaturedFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error} )\r\n    }\r\n  });\r\n}\r\n\r\nexport const recommended = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let res = await API().get(API_PATH.RECOMMENDED );\r\n      const data = res.data ; \r\n      dispatch(loadingAction(false));\r\n       if(data.success){\r\n        dispatch(recommendedSuccess(data.data))\r\n      }else{\r\n        dispatch(recommendedFailure())\r\n      }\r\n      resolve({data: data.data.message})\r\n    } catch (error) {\r\n      dispatch(recommendedFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error} )\r\n    }\r\n  });\r\n}\r\n\r\nexport const recentlyJoined = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let res = await API().get(API_PATH.RECENT_JOINED );\r\n      const data = res.data ; \r\n      dispatch(loadingAction(false));\r\n       if(data.success){\r\n        dispatch(recentlyJoinedSuccess(data.data))\r\n      }else{\r\n        dispatch(recmentlyJoinedFailure())\r\n      }\r\n      resolve({data: data.data.message})\r\n    } catch (error) {\r\n      dispatch(recmentlyJoinedFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error} )\r\n    }\r\n  });\r\n}\r\n\r\nexport const trending = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let res = await API().get(API_PATH.TRENDING );\r\n      const data = res.data ; \r\n      dispatch(loadingAction(false));\r\n       if(data.success){\r\n        dispatch(trendingSuccess(data.data))\r\n      }else{\r\n        dispatch(trendingFailure())\r\n      }\r\n      resolve({data: data.data.message})\r\n    } catch (error) {\r\n      dispatch(trendingFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error} )\r\n    }\r\n  });\r\n}\r\n\r\nexport const location = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let res = await API().get(API_PATH.LOCATION );\r\n      const data = res.data ; \r\n      dispatch(loadingAction(false));\r\n       if(data.success){\r\n        dispatch(locationSuccess(data.data))\r\n      }else{\r\n        dispatch(locationFailure())\r\n      }\r\n      resolve({data: data.data.message})\r\n    } catch (error) {\r\n      dispatch(locationFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error} )\r\n    }\r\n  });\r\n}\r\n\r\nexport const searchlocation = (payload: any) =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let res = await API().get(API_PATH.LOCATION_SEARCH, {\r\n        params: payload} );\r\n      const data = res.data ; \r\n      dispatch(loadingAction(false));\r\n       if(data.success){\r\n        dispatch(locationSuccess(data.data))\r\n      }else{\r\n        dispatch(locationFailure())\r\n      }\r\n      resolve({data: data.data.message})\r\n    } catch (error) {\r\n      dispatch(locationFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error} )\r\n    }\r\n  });\r\n}\r\n\r\nexport const genreView = (genre_id?: string) =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let query = genre_id ? `?genre_id=${genre_id}` : \"\";\r\n      let res = await API().get(API_PATH.GENRE_VIEW + query );\r\n      const data = res.data ; \r\n      dispatch(loadingAction(false));\r\n       if(data.success){\r\n        dispatch(genreViewSuccess(data.data))\r\n      }else{\r\n        dispatch(genreViewFailure())\r\n      }\r\n      resolve({data: data.data.message})\r\n    } catch (error) {\r\n      dispatch(genreViewFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error} )\r\n    }\r\n  });\r\n}\r\n\r\nexport const random = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let res = await API().get(API_PATH.RANDOM );\r\n      const data = res.data ; \r\n      dispatch(loadingAction(false));\r\n       if(data.success){\r\n        dispatch(randomSuccess(data.data))\r\n      }else{\r\n        dispatch(randomFailure())\r\n      }\r\n      console.log('##E s', data.data );\r\n      resolve({data: data.data.message})\r\n    } catch (error) {\r\n      console.log('##E', error);\r\n      dispatch(randomFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error} )\r\n    }\r\n  });\r\n}\r\n\r\nexport const discoverHomeData = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get<IHowItWorkItem>(API_PATH.DISCOVERHOME_DATA );\r\n      dispatch(discoverHomeSuccess(data.data));\r\n    } catch (error) {\r\n      dispatch(discoverHomeFailure());\r\n    }\r\n  });\r\n}\r\n\r\nexport const discoverRecommendedData = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get<IHowItWorkItem>(API_PATH.DISCOVERRECOMMENDED_DATA );\r\n      dispatch(discoverRecommendedSuccess(data.data));\r\n    } catch (error) {\r\n      dispatch(discoverRecommendedFailure());\r\n    }\r\n  });\r\n}\r\n\r\nexport const discoverGenreData = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get<IHowItWorkItem>(API_PATH.DISCOVERGENRE_DATA );\r\n      dispatch(discoverGenreSuccess(data.data));\r\n    } catch (error) {\r\n      dispatch(discoverGenreFailure());\r\n    }\r\n  });\r\n}\r\n \r\nexport const discoverExpertiseData = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get<IHowItWorkItem>(API_PATH.DISCOVEREXPERTISE_DATA );\r\n      dispatch(discoverExpertiseSuccess(data.data));\r\n    } catch (error) {\r\n      dispatch(discoverExpertiseFailure());\r\n    }\r\n  });\r\n}\r\n\r\nexport const discoverRecentlyData = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get<IHowItWorkItem>(API_PATH.DISCOVERRECENTLY_DATA );\r\n      dispatch(discoverRecentlySuccess(data.data));\r\n    } catch (error) {\r\n      dispatch(discoverRecentlyFailure());\r\n    }\r\n  });\r\n}\r\n\r\nexport const discoverLocationData = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get<IHowItWorkItem>(API_PATH.DISCOVERLOCATION_DATA );\r\n      dispatch(discoverLocationSuccess(data.data));\r\n    } catch (error) {\r\n      dispatch(discoverLocationFailure());\r\n    }\r\n  });\r\n}\r\n\r\nexport const discoverTrendingData = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get<IHowItWorkItem>(API_PATH.DISCOVERTRENDING_DATA );\r\n      dispatch(discoverTrendingSuccess(data.data));\r\n    } catch (error) {\r\n      dispatch(discoverTrendingFailure());\r\n    }\r\n  });\r\n}\r\n\r\nexport const discoverMyNetworkData = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get<IHowItWorkItem>(API_PATH.DISCOVERNETWORK_DATA );\r\n      dispatch(discoverNetworkSuccess(data.data));\r\n    } catch (error) {\r\n      dispatch(discoverNetworkFailure());\r\n    }\r\n  });\r\n}","/Users/appleapple/Downloads/loop/src/redux/network/action.ts",["796","797"],"import { IGenre } from '../../utils/models/master-data/response.model';\r\nimport { NetworkActionType, MY_NETWORK_SUCCESS, MY_NETWORK_FAILURE, NETWORK_ADD_SUCCESS, NETWORK_ADD_FAILURE, NETWORK_REMOVE_SUCCESS, NETWORK_REMOVE_FAILURE } from './types';\r\nimport { Dispatch } from 'redux';\r\nimport API_PATH from '../../services/api-service/api-path';\r\nimport API from '../../services/api-service/api';\r\nimport { loadingAction } from '../auth/action';\r\nimport { IExpertise } from '../../utils/models/master-data/response.model';\r\n\r\nexport function myNetworkSuccess(data: any[] ): NetworkActionType  {\r\n  return {\r\n    type: MY_NETWORK_SUCCESS,\r\n    payload:  data\r\n  }\r\n}\r\n\r\nexport function myNetworkFailure(): NetworkActionType {\r\n  return {\r\n    type: MY_NETWORK_FAILURE,\r\n  }\r\n}\r\nexport function addNetworkSuccess(data: any ): NetworkActionType  {\r\n  return {\r\n    type: NETWORK_ADD_SUCCESS,\r\n    payload:  data\r\n  }\r\n}\r\n\r\nexport function addNetworkFailure(): NetworkActionType {\r\n  return {\r\n    type: NETWORK_ADD_FAILURE,\r\n  }\r\n}\r\nexport function removeNetworkSuccess(data: any ): NetworkActionType  {\r\n  return {\r\n    type: NETWORK_REMOVE_SUCCESS,\r\n    payload:  data\r\n  }\r\n}\r\n\r\nexport function removeNetworkFailure(): NetworkActionType {\r\n  return {\r\n    type: NETWORK_REMOVE_FAILURE,\r\n  }\r\n}\r\n \r\nexport const myNetwork = (showloader = true) =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(showloader));\r\n      let data = await API().get(API_PATH.MY_NETWORK );\r\n      dispatch(loadingAction(false));\r\n      dispatch(myNetworkSuccess(data.data.data));\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      dispatch(myNetworkFailure());\r\n    }\r\n  });\r\n}\r\nexport const addNetwork = (userId: string) =>  (dispatch: Dispatch) => {\r\n    return new Promise(async(resolve, reject) => {\r\n      try {\r\n        let data = await API().get(API_PATH.ADD_NETWORK + '/' + userId );\r\n        dispatch(addNetworkSuccess(data.data));\r\n        resolve(data)\r\n      } catch (error) {\r\n        reject(error)\r\n        dispatch(addNetworkFailure());\r\n      }\r\n    });\r\n}\r\nexport const removeNetwork = (userId: string ) =>  (dispatch: Dispatch) => {\r\n    return new Promise(async(resolve, reject) => {\r\n      try {\r\n        let data = await API().get(API_PATH.REMOVE_NETWORK + '/' + userId  );\r\n        dispatch(removeNetworkSuccess(data.data));\r\n        resolve(data)\r\n      } catch (error) {\r\n        reject(error)\r\n        dispatch(removeNetworkFailure());\r\n      }\r\n    });\r\n}\r\n\r\nexport const acceptRequest = (userId: string) => (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get(API_PATH.ACCEPT_REQUEST + '/' + userId  );\r\n      //dispatch(removeNetworkSuccess(data.data));\r\n      resolve(data)\r\n    } catch (error) {\r\n      reject(error)\r\n      //dispatch(removeNetworkFailure());\r\n    }\r\n  });\r\n}\r\n\r\nexport const cancelRequest = (userId: string) => (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get(API_PATH.CANCEL_REQUEST + '/' + userId  );\r\n      resolve(data)\r\n    } catch (error) {\r\n      reject(error)\r\n    }\r\n  });\r\n}\r\n\r\nexport const rejectRequest = (userId: string) => (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get(API_PATH.REJECT_REQUEST + '/' + userId  );\r\n      //dispatch(removeNetworkSuccess(data.data));\r\n      resolve(data)\r\n    } catch (error) {\r\n      reject(error)\r\n      //dispatch(removeNetworkFailure());\r\n    }\r\n  });\r\n}","/Users/appleapple/Downloads/loop/src/redux/master-data/action.ts",[],"/Users/appleapple/Downloads/loop/src/redux/user/action.ts",["798","799","800"],"import { TrackResponse, Track } from './../../utils/models/user/response.model';\r\nimport { IUserDetail } from '../../utils/models/user/request.model';\r\nimport { Dispatch } from 'redux';\r\nimport API_PATH from '../../services/api-service/api-path';\r\nimport API from '../../services/api-service/api';\r\nimport {\r\n  TRACK_LIST_SUCCESS,\r\n  EditProfileActionType,\r\n  NOTIFICATION_SUCCESS,\r\n  NOTIFICATION_FAILURE,\r\n  PLAY_TRACK_SUCCESS,\r\n  TRACK_LIST_FAILURE,\r\n  GET_PROFILE_SUCCESS,\r\n  GET_PROFILE_FAILURE,\r\n  GET_PROFILE_ID_SUCCESS,\r\n  GET_PROFILE_ID_FAILURE,\r\n  VOX_USERS_SUCCESS,\r\n  VOX_USERS_FAILURE,\r\n  UPPDATE_CONVERSATION_HISTORY_SUCCESS,\r\n  UPPDATE_CONVERSATION_HISTORY_FAILURE,\r\n  UPPDATE_CURRENT_CONVERSATION_ID_SUCCESS,\r\n  UPPDATE_CURRENT_CONVERSATION_ID_FAILURE,\r\n  UPPDATE_VOX_USERS_SUCCESS,\r\n  UPPDATE_VOX_CONVERSATION_SUCCESS,\r\n} from './types';\r\nimport { loadingAction, voxLoadingAction } from '../auth/action';\r\nimport store, { history } from '../../store';\r\nimport MessengerService from '../../services/voximplant-service/messenger.service';\r\nimport _ from 'lodash';\r\n\r\nconst TYPE_CONVERSATION = {\r\n  direct: 'direct',\r\n  chat: 'chat',\r\n  channel: 'channel',\r\n};\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function playTrackSuccess(data: any): EditProfileActionType {\r\n  return {\r\n    type: PLAY_TRACK_SUCCESS,\r\n    payload: data,\r\n  };\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function trackListSuccess(trackList: Track[]): EditProfileActionType {\r\n  return {\r\n    type: TRACK_LIST_SUCCESS,\r\n    payload: trackList,\r\n  };\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function getProfileSuccess(profile: any): EditProfileActionType {\r\n  console.log('profile', profile);\r\n\r\n  return {\r\n    type: GET_PROFILE_SUCCESS,\r\n    payload: profile,\r\n  };\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function getProfileFailure(): EditProfileActionType {\r\n  return {\r\n    type: GET_PROFILE_FAILURE,\r\n  };\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function getVoxUsersSuccess(users: any): EditProfileActionType {\r\n  return {\r\n    type: VOX_USERS_SUCCESS,\r\n    payload: users,\r\n  };\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function getVoxUsersFailure(): EditProfileActionType {\r\n  return {\r\n    type: VOX_USERS_FAILURE,\r\n  };\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function updateCurrentConversationHistorySuccess(\r\n  conversationHistory: any\r\n): EditProfileActionType {\r\n  return {\r\n    type: UPPDATE_CONVERSATION_HISTORY_SUCCESS,\r\n    payload: conversationHistory,\r\n  };\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function updateCurrentConversationHistoryFailure(): EditProfileActionType {\r\n  return {\r\n    type: UPPDATE_CONVERSATION_HISTORY_FAILURE,\r\n  };\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function updateCurrentConversationIdSuccess(\r\n  uuid: any\r\n): EditProfileActionType {\r\n  return {\r\n    type: UPPDATE_CURRENT_CONVERSATION_ID_SUCCESS,\r\n    payload: uuid,\r\n  };\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function updateCurrentConversationIdFailure(): EditProfileActionType {\r\n  return {\r\n    type: UPPDATE_CURRENT_CONVERSATION_ID_FAILURE,\r\n  };\r\n}\r\n\r\nexport function updateVoxUsersSuccess(users: any): EditProfileActionType {\r\n  return {\r\n    type: UPPDATE_VOX_USERS_SUCCESS,\r\n    payload: users,\r\n  };\r\n}\r\n\r\nexport function updateVoxConversationSuccess(\r\n  conversation: any\r\n): EditProfileActionType {\r\n  return {\r\n    type: UPPDATE_VOX_CONVERSATION_SUCCESS,\r\n    payload: conversation,\r\n  };\r\n}\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function getProfileByIdSuccess(profile: any): EditProfileActionType {\r\n  console.log('profile', profile);\r\n\r\n  return {\r\n    type: GET_PROFILE_ID_SUCCESS,\r\n    payload: profile,\r\n  };\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function getProfileByIdFailure(): EditProfileActionType {\r\n  return {\r\n    type: GET_PROFILE_ID_FAILURE,\r\n  };\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function trackListFailure(): EditProfileActionType {\r\n  return {\r\n    type: TRACK_LIST_FAILURE,\r\n  };\r\n}\r\n\r\nexport function notificationSuccess(data: any[]): EditProfileActionType {\r\n  return {\r\n    type: NOTIFICATION_SUCCESS,\r\n    payload: data,\r\n  };\r\n}\r\n\r\nexport function notificationFailure(): EditProfileActionType {\r\n  return {\r\n    type: NOTIFICATION_FAILURE,\r\n  };\r\n}\r\n\r\nexport const editProfile = (userDetail: IUserDetail) => (\r\n  dispatch: Dispatch\r\n) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post(API_PATH.EDIT_PROFILE, userDetail);\r\n      dispatch(loadingAction(false));\r\n      resolve({ data: data.data.message });\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const getProfile = () => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let res = await API().get(API_PATH.GET_PROFILE);\r\n      const data = res.data;\r\n      dispatch(loadingAction(false));\r\n      if (data.success) {\r\n        localStorage.setItem('userData', JSON.stringify(data.data));\r\n        dispatch(getProfileSuccess(data.data));\r\n      } else {\r\n        dispatch(getProfileFailure());\r\n      }\r\n      resolve({ data: data.data.message });\r\n    } catch (error) {\r\n      dispatch(getProfileFailure());\r\n      dispatch(loadingAction(false));\r\n      console.log('errorerrorerror', error);\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const getProfileById = (id: string) => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let res = await API().get(API_PATH.GET_PROFILE_BY_ID + '/' + id);\r\n      const data = res.data;\r\n      dispatch(loadingAction(false));\r\n      if (data.success) {\r\n        dispatch(getProfileByIdSuccess(data.data));\r\n      } else {\r\n        dispatch(getProfileByIdFailure());\r\n      }\r\n      resolve({ data: data.data });\r\n    } catch (error) {\r\n      dispatch(getProfileByIdFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const uploadProfile = (file: FileList) => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('user_image', file[0]);\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post(API_PATH.UPLOAD_PROFILE, formData);\r\n      dispatch(loadingAction(false));\r\n      resolve({ data: data.data.message });\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const addTrack = (\r\n  coverFile: FileList,\r\n  trackFile: FileList,\r\n  title: string,\r\n  firstDemoTrack: boolean,\r\n  duration: string\r\n) => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('cover_image', coverFile[0]);\r\n      formData.append('track', trackFile[0]);\r\n      formData.append('name', title);\r\n      formData.append('duration', duration);\r\n      formData.append('primary', firstDemoTrack ? '1' : '0');\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post(API_PATH.TRACK_ADD, formData);\r\n      dispatch(loadingAction(false));\r\n      resolve({ data: data.data.message });\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const editTrack = (payload: any) => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post(API_PATH.TRACK_EDIT, payload);\r\n      dispatch(loadingAction(false));\r\n      resolve({ data: data.data.message });\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const deleteTrack = (track_id: string) => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post(API_PATH.TRACK_DELETE, { track_id });\r\n      dispatch(loadingAction(false));\r\n      resolve({ data: data.data.message });\r\n    } catch (error) {\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const listTrack = () => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post<TrackResponse>(API_PATH.TRACK_LIST);\r\n      dispatch(loadingAction(false));\r\n      dispatch(trackListSuccess(data.data.message));\r\n      resolve({ data: data.data.message });\r\n    } catch (error) {\r\n      dispatch(trackListFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const playTrack = (item: any, isPaused: boolean) => (\r\n  dispatch: Dispatch\r\n) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    const { user : { playingTrack }} = store.getState();\r\n    dispatch(playTrackSuccess({ ...item, isPaused }));\r\n    if (!_.isEqual(playingTrack && playingTrack.track_id , item && item.track_id)) {\r\n      await API().post(API_PATH.TRACK_TRENDING, { tracks_id : item.track_id });\r\n    }\r\n  });\r\n  \r\n};\r\n\r\nexport const getNotification = () => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      let res = await API().get(API_PATH.GET_NOTIFICATION);\r\n      const data = res.data;\r\n      if (data.success) {\r\n        dispatch(notificationSuccess(data.data));\r\n      } else {\r\n        dispatch(notificationFailure());\r\n      }\r\n    } catch (error) {\r\n      dispatch(notificationFailure());\r\n    }\r\n  });\r\n};\r\n\r\nexport const readNotification = (id: any) => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      let res = await API().get(API_PATH.READ_NOTIFICATION + '/' + id);\r\n      const data = res.data;\r\n      resolve(data);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\nexport const currentConversation = (uuid: any) => {\r\n  const {\r\n    user: { vox_users },\r\n    user,\r\n  } = store.getState();\r\n  const con_uuid = uuid || user.currentConversationId;\r\n  return (\r\n    vox_users &&\r\n    vox_users.conversations &&\r\n    vox_users.conversations.find((c: any) => c.uuid === con_uuid)\r\n  );\r\n};\r\n\r\nexport const setCurrentConversation = (uuid: any) => (dispatch: Dispatch) => {\r\n  if (uuid) dispatch(updateCurrentConversationIdSuccess(uuid));\r\n  else dispatch(updateCurrentConversationIdFailure());\r\n};\r\n\r\nexport const onMessageSent = (e: any) => {\r\n  e.message.timestamp = e.timestamp;\r\n  e.message.seq = e.seq;\r\n  const { user } = store.getState();\r\n\r\n  if (e.message.sender === user.vox_users.currentUser.userId) {\r\n    e.message.user = user.vox_users.currentUser;\r\n  } else {\r\n    e.message.user = user.vox_users.users.find(\r\n      (c: any) => c.userId === e.message.sender\r\n    );\r\n  }\r\n  if (\r\n    user.conversationHistory &&\r\n    user.currentConversationId &&\r\n    e.message.conversation === user.currentConversationId\r\n  ) {\r\n    const conversationsHistoryTemp = {\r\n      ...user.conversationHistory,\r\n      [user.currentConversationId]: [\r\n        ...(user.conversationHistory[user.currentConversationId] || []),\r\n        e.message,\r\n      ],\r\n    };\r\n    console.log(\"conversationsHistoryTemp\", conversationsHistoryTemp);\r\n    store.dispatch(\r\n      updateCurrentConversationHistorySuccess(conversationsHistoryTemp)\r\n    );\r\n  }\r\n};\r\n\r\nconst currentDirectConversations = (vox_users: any) =>\r\n  vox_users &&\r\n  vox_users.conversations &&\r\n  vox_users.conversations.filter((c: any) => c.direct);\r\n\r\nconst currentDirectUsersId = (vox_users: any) => {\r\n  const currDirectConversations = currentDirectConversations(vox_users);\r\n  return (\r\n    currDirectConversations &&\r\n    currDirectConversations.reduce((res: number[], d: any) => {\r\n      d.participants.forEach((u: any) => {\r\n        if (u.userId !== vox_users.currentUser.userId) {\r\n          res.push(u.userId);\r\n        }\r\n      });\r\n\r\n      return res;\r\n    }, [])\r\n  );\r\n};\r\n\r\nexport const getDirectConversation = (userId: number) => {\r\n  const { user } = store.getState();\r\n  const currDireactUsersId = currentDirectUsersId(user.vox_users);\r\n  if (currDireactUsersId && currDireactUsersId.includes(userId)) {\r\n    const index = currentDirectUsersId(user.vox_users).indexOf(userId);\r\n    const chatUuid = currentDirectConversations(user.vox_users)[index].uuid;\r\n    store.dispatch(updateCurrentConversationIdSuccess(chatUuid));\r\n  } else {\r\n    MessengerService.get()\r\n      .createDirect(userId)\r\n      .catch(console.log);\r\n  }\r\n};\r\n\r\nexport const getCurrentConversation = (chatUuid: number | string) => {\r\n  const { user } = store.getState();\r\n  if (typeof chatUuid === 'string') {\r\n    const { user } = store.getState();\r\n    store.dispatch(updateCurrentConversationIdSuccess(chatUuid));\r\n    if (chatUuid && !user.conversationHistory[chatUuid]) {\r\n      getConversationHistory(chatUuid);\r\n    }\r\n  } else if (typeof chatUuid === 'number') {\r\n    getDirectConversation(chatUuid);\r\n  }\r\n};\r\n\r\n\r\nexport const loadAllConversation = (conversations: any[], currentUser: any, vox_users: any[]) => {\r\n  \r\n  let ps:any[] = [];\r\n\r\n  conversations && conversations.map((item: any)=> {\r\n    const uuid = item.uuid;\r\n    const lastEvent =\r\n    item.lastEvent\r\n      ? item.lastEvent\r\n      : item.lastSeq;\r\n\r\n    ps.push(MessengerService.get()\r\n    .retransmitMessageEvents(item, lastEvent)\r\n    .then((messageEvents: any[]) => {\r\n      let conversationsHistory = {}\r\n\r\n      const messages = messageEvents.map(e => {\r\n        e.message.timestamp = e.timestamp;\r\n        e.message.seq = e.seq;\r\n\r\n        if (e.message.sender === currentUser.userId) {\r\n          e.message.user = currentUser;\r\n        } else {\r\n          e.message.user = vox_users.find(\r\n            (c: any) => c.userId === e.message.sender\r\n          );\r\n        }\r\n\r\n        // TODO 'll highlight to singular dispatch\r\n        // if one participant read a message, it marked as read\r\n        const arrLastRead = item.participants.map((p: any) => {\r\n          return p.userId !== currentUser.userId\r\n            ? p.lastRead\r\n            : 0;\r\n        });\r\n\r\n        if (Math.max(...arrLastRead) >= e.seq) {\r\n          e.message.markAsRead = true;\r\n        }\r\n\r\n        return e.message;\r\n      });\r\n\r\n      if (messages.length > 0) {\r\n        const conversationID = messages[0].conversation;\r\n        conversationsHistory = {\r\n          messages: [...messages],\r\n          uuId: conversationID\r\n        };\r\n      } else {\r\n        conversationsHistory = {\r\n          messages: [...messages],\r\n          uuId: uuid\r\n        };\r\n      }\r\n      return conversationsHistory;\r\n    }));\r\n  });\r\n\r\n  store.dispatch(voxLoadingAction(true));\r\n  Promise.all(ps)\r\n    .then((results) => {\r\n      let conversationsHistory = {}\r\n      results && results.map((item:any)=>{\r\n        conversationsHistory = {\r\n          ...conversationsHistory,\r\n          [item.uuId] : item.messages\r\n        }\r\n      })\r\n      store.dispatch(\r\n        updateCurrentConversationHistorySuccess(conversationsHistory)\r\n      );\r\n      store.dispatch(voxLoadingAction(false));\r\n      console.log('load all conversation history success', conversationsHistory);\r\n         // Result of all resolve as an array\r\n    }).catch(err => {\r\n      console.log('load all conversation history error', err);\r\n      store.dispatch(voxLoadingAction(false));\r\n    }); \r\n}\r\n\r\nexport const getConversationHistory = async (uuid: any) => {\r\n  const curConversation = currentConversation(uuid);\r\n  const { user } = store.getState();\r\n  const lastEvent =\r\n    user.currentConversationHistory && user.currentConversationHistory.length\r\n      ? curConversation && curConversation.lastEvent\r\n      : curConversation && curConversation.lastSeq;\r\n\r\n  if (lastEvent !== 0 && curConversation) {\r\n    store.dispatch(voxLoadingAction(true));\r\n    await MessengerService.get()\r\n      .retransmitMessageEvents(curConversation, lastEvent)\r\n      .then((messageEvents: any[]) => {\r\n        const messages = messageEvents.map(e => {\r\n          e.message.timestamp = e.timestamp;\r\n          e.message.seq = e.seq;\r\n\r\n          if (e.message.sender === user.vox_users.currentUser.userId) {\r\n            e.message.user = user.vox_users.currentUser;\r\n          } else {\r\n            e.message.user = user.vox_users.users.find(\r\n              (c: any) => c.userId === e.message.sender\r\n            );\r\n          }\r\n\r\n          // TODO 'll highlight to singular dispatch\r\n          // if one participant read a message, it marked as read\r\n          const arrLastRead = curConversation.participants.map((p: any) => {\r\n            return p.userId !== user.vox_users.currentUser.userId\r\n              ? p.lastRead\r\n              : 0;\r\n          });\r\n\r\n          if (Math.max(...arrLastRead) >= e.seq) {\r\n            e.message.markAsRead = true;\r\n          }\r\n\r\n          return e.message;\r\n        });\r\n        if (messages.length > 0) {\r\n          const conversationID = messages[0].conversation;\r\n          const conversationsHistory = {\r\n            ...user.conversationHistory,\r\n            [conversationID]: [...messages],\r\n          };\r\n          store.dispatch(\r\n            updateCurrentConversationHistorySuccess(conversationsHistory)\r\n          );\r\n        }\r\n        store.dispatch(voxLoadingAction(false));\r\n        // context.dispatch('markedAsRead', context.getters.currentConversation.lastSeq);\r\n      })\r\n      .catch((err: any) => {\r\n        console.log('current conversation error', err);\r\n        store.dispatch(voxLoadingAction(false));\r\n        store.dispatch(updateCurrentConversationHistoryFailure());\r\n      });\r\n  }\r\n};\r\n\r\nexport const onConversationCreated = (e: any) => {\r\n  console.log('Conversation created', e);\r\n  const { user } = store.getState();\r\n\r\n  // Update conversation list\r\n  // TODO commit('updateConversations', e.conversation);\r\n  if (e.conversation.customData.type === 'direct') {\r\n    const participant = e.conversation.participants.find(\r\n      (p: any) => p.userId !== user.vox_users.currentUser.userId\r\n    );\r\n    e.conversation.directUserId = participant.userId;\r\n  }\r\n\r\n  // @ts-ignore\r\n  let conversations = [user.vox_users.conversations, e.conversation];\r\n  store.dispatch(updateVoxConversationSuccess(conversations));\r\n\r\n  // Set the conversation as a current if it is created by this user\r\n  if (e.initiator === user.vox_users.currentUser.userId) {\r\n    store.dispatch(updateCurrentConversationIdSuccess(e.conversation.uuid));\r\n    history.push(`/hub/chat/collaborators-chat?uuid=${e.conversation.uuid}`);\r\n  } else {\r\n    // Get participants user data if there are new\r\n    const newUsers = e.conversation.participants.filter(\r\n      (p: any) => !user.vox_users.users.some((u: any) => u.userId === p.userId)\r\n    );\r\n\r\n    if (newUsers.length) {\r\n      const usersIds = newUsers.map((u: any) => u.userId);\r\n      MessengerService.messenger\r\n        .getUsersById(usersIds)\r\n        .then((events: any) => {\r\n          const users = [\r\n            ...user.vox_users.users,\r\n            events.map((e: any) => e.user),\r\n          ];\r\n          store.dispatch(updateVoxUsersSuccess(users));\r\n        })\r\n        .catch(console.log);\r\n    }\r\n  }\r\n\r\n  // Get participant ids excluding the current user\r\n  const otherParticipantIds = e.conversation.participants\r\n    .map((p: any) => p.userId)\r\n    .filter((id: number) => id !== user.vox_users.currentUser.userId);\r\n  // Subscribe to other participant events (info and presence status change)\r\n  if (otherParticipantIds.length) {\r\n    MessengerService.messenger\r\n      .subscribe(otherParticipantIds)\r\n      .then((e: any) => {\r\n        console.log('Subscribed to conversation participants', e);\r\n      })\r\n      .catch(console.log);\r\n  }\r\n};\r\n\r\nexport const onMessageMarkAsRead = (evt: any) => {\r\n  const { user } = store.getState();\r\n  if (evt.initiator !== user.vox_users.currentUser.userId) {\r\n    const updateHistory = user.conversationsHistory[user.currentConversationId].map((m:any) => {\r\n      if (m.seq >= evt.seq) {\r\n        return {\r\n          ...m,\r\n          markAsRead: true\r\n        }\r\n      }\r\n      return m\r\n    });\r\n    store.dispatch(updateCurrentConversationHistorySuccess(updateHistory));\r\n  }\r\n}\r\n\r\nexport const createConversation = async (newChat: any) => {\r\n  try {\r\n    let response;\r\n    store.dispatch(voxLoadingAction(true));\r\n    if (newChat.type === TYPE_CONVERSATION.chat) {\r\n      response = await MessengerService.get().createChat(newChat);\r\n    } else if (newChat.type === TYPE_CONVERSATION.channel) {\r\n      response = await MessengerService.get().createChannel(newChat);\r\n    } else if (newChat.type === TYPE_CONVERSATION.direct) {\r\n      response = await MessengerService.get().createDirect(newChat.usersId);\r\n    } else {\r\n      console.log(`Conversation type ${newChat.type} is unknown`);\r\n    }\r\n    store.dispatch(voxLoadingAction(false));\r\n    return response;\r\n  } catch (e) {\r\n    console.log('create conversation error', e);\r\n    store.dispatch(voxLoadingAction(false));\r\n  }\r\n};\r\n","/Users/appleapple/Downloads/loop/src/services/voximplant-service/messenger.service.ts",["801"],"// @ts-ignore\r\nimport * as VoxImplant from 'voximplant-websdk';\r\nimport util from '../../utils/Util';\r\n//import store from '@/store/store';\r\nimport { Conversation, NewChatData, Permissions, User } from './types/conversations';\r\nimport { reloginVox, onlineReceived } from '../../redux/auth/action';\r\nimport { onMessageSent, onConversationCreated, onMessageMarkAsRead } from '../../redux/user/action';\r\n\r\nconst TIME_NOTIFICATION = 3000;\r\nexport const MY_APP = 'loop.cocoworth';\r\nexport const URL_NEW_USERS = 'https://api.voximplant.com/platform_api/GetUsers?account_name=cocoworth&api_key=866d22ab-e2fc-4b44-a054-ba18bf59c3ec&application_id=10005576';\r\n\r\n\r\nexport default class MessengerService {\r\n  public static messenger: any = null;\r\n\r\n  public static get() {\r\n    if (!MessengerService.inst) {\r\n      MessengerService.inst = new MessengerService();\r\n    }\r\n    return MessengerService.inst;\r\n  }\r\n\r\n  private static inst: any;\r\n  private setStatusTimer: any;\r\n  private conversationEvents: any = {};\r\n\r\n  /***********************************************************************************************\r\n   * INIT VOXIMPLANT.MESSENGER && GET INITIAL DATA\r\n   **********************************************************************************************/\r\n\r\n  public async init() {\r\n    // Get Voximplant Messenger instance\r\n    try {\r\n      MessengerService.messenger = VoxImplant.getMessenger();\r\n      util.log('Messenger v2', MessengerService.messenger);\r\n      util.log('VoxImplant.Messaging v2', VoxImplant.Messaging);\r\n    } catch (e)  {\r\n      // Most common error 'Not authorised', so redirect to login\r\n      util.logError(e);\r\n      reloginVox();\r\n      //await store.dispatch('auth/relogin');\r\n    }\r\n\r\n    // Get the current user data\r\n    const initialData: {\r\n      currentUser: any,\r\n      conversations: any,\r\n      users: any,\r\n    } = {\r\n      currentUser: {},\r\n      conversations: [],\r\n      users: [],\r\n    };\r\n\r\n    await MessengerService.messenger.getUser(MessengerService.messenger.getMe())\r\n      .then((evt: any) => {\r\n        util.logHelp('Current user data received', evt);\r\n        initialData.currentUser = evt.user;\r\n\r\n        return this.getCurrentConversations(evt.user.conversationsList);\r\n      })\r\n      .then((evts: any) => {\r\n        util.logHelp('Current user conversations received', evts);\r\n\r\n        initialData.conversations = evts.length ? evts.map((e: any) => e.conversation) : [];\r\n        return this.getAllUsers();\r\n      })\r\n      .then((evts: any) => {\r\n        util.logHelp('Conversation participants user info received', evts);\r\n        initialData.users = evts.map((e: any) => e.user);\r\n      })\r\n      .catch(util.logError);\r\n\r\n    this.addMessengerEventListeners();\r\n\r\n    /**\r\n     * You have to send user presence status periodically to notify the new coming users if you are online\r\n     * TODO You can implement invisible mode by sending setStatus(false)\r\n     */\r\n    const sendStatus = () => setTimeout(() => {\r\n      MessengerService.messenger.setStatus(true);\r\n      this.setStatusTimer = sendStatus();\r\n    }, TIME_NOTIFICATION);\r\n\r\n    this.setStatusTimer = sendStatus();\r\n\r\n    return initialData;\r\n  }\r\n\r\n  /**\r\n   * Some VoxImplant.Messaging.MessengerEvents are better to use by passing a callback to the event listener function.\r\n   * This way you're able update the current user's store and interface if the event is triggered by another user or by the current one on a different device.\r\n   * The other VoxImplant.Messaging.MessengerEvents are more handy to deal with in a .then() function as they all return a Promise.\r\n   * These are methods that affect only this user and this application instance, like subscribing to or unsubscribing from other users, retransmitting events or getting other data.\r\n   */\r\n  private addMessengerEventListeners() {\r\n    // // Listen to other users presence status event\r\n    MessengerService.messenger.on(VoxImplant.Messaging.MessengerEvents.SetStatus, (e: any) => {\r\n      onlineReceived(e.initiator, e.online);\r\n      // console.log(\"sendStatus\", e.initiator, e.online);\r\n    });\r\n\r\n    // // Listen to CreateConversation event called by this or another user\r\n    MessengerService.messenger.on(VoxImplant.Messaging.MessengerEvents.CreateConversation, (e: any) => onConversationCreated(e));\r\n\r\n    // // Listen to EditConversation event called by this or another user\r\n    // MessengerService.messenger.on(VoxImplant.Messaging.MessengerEvents.EditConversation, (e: any) => store.dispatch('conversations/onConversationEdited', e));\r\n\r\n    // // Listen to incoming messages\r\n    MessengerService.messenger.on(VoxImplant.Messaging.MessengerEvents.SendMessage, (e: any) => onMessageSent(e));\r\n\r\n    // // Listen to edited messages\r\n    // MessengerService.messenger.on(VoxImplant.Messaging.MessengerEvents.EditMessage, (e: any) => store.dispatch('conversations/onMessageEdited', e));\r\n\r\n    // // Listen to deleted messages\r\n    // MessengerService.messenger.on(VoxImplant.Messaging.MessengerEvents.RemoveMessage, (e: any) => store.dispatch('conversations/onMessageDeleted', e));\r\n\r\n    // // Listen to markAsRead message\r\n    MessengerService.messenger.on(VoxImplant.Messaging.MessengerEvents.Read, (e: any) => onMessageMarkAsRead(e));\r\n\r\n    // // Listen to typing event\r\n    // MessengerService.messenger.on(VoxImplant.Messaging.MessengerEvents.Typing, (e: any) => store.dispatch('conversations/onNotifyTyping', e));\r\n  }\r\n\r\n  private getCurrentConversations(conversationsList: Conversation[]) {\r\n    /**\r\n     * The maximum number of conversations that SDK enables to get at once is 30\r\n     * This method resolves to an array of VoxImplant.Messaging.MessengerEvents.GetConversation events\r\n     */\r\n    // TODO add param for amount of conversations\r\n    // @ts-ignore\r\n    return MessengerService.messenger.getConversations(conversationsList).catch((e: any) => {\r\n        util.logError('MessengerService.getCurrentConversations', e);\r\n      return [];\r\n    });\r\n  }\r\n\r\n  public getCurrentConversation(uuid: String) {\r\n    /**\r\n     * The maximum number of conversations that SDK enables to get at once is 30\r\n     * This method resolves to an array of VoxImplant.Messaging.MessengerEvents.GetConversation events\r\n     */\r\n    // TODO add param for amount of conversations\r\n    // @ts-ignore\r\n    return MessengerService.messenger.getConversation(uuid).catch((e: any) => {\r\n        util.logError('MessengerService.getCurrentConversation', e);\r\n      return [];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get all available users names through additional PHP server\r\n   */\r\n  private async getAllUsers() {\r\n    const getAllUsers = await fetch(URL_NEW_USERS);\r\n    let jsonAllUsers;\r\n\r\n    if (getAllUsers.ok) {\r\n      jsonAllUsers = await getAllUsers.json();\r\n    } else {\r\n        util.logError('Error HTTP: ' + getAllUsers.status);\r\n    }\r\n    const usersNames = jsonAllUsers.result.map((u: any) => `${u.user_name}@${MY_APP}`);\r\n    return  this.getUserIds(usersNames);\r\n  }\r\n\r\n  /**\r\n   * All Messenger methods except for GetUser and GetUsers accept only Messaging user ids, so you often need to map user names to user ids.\r\n   * Messenger.GetUser and Messenger.GetUsers accept user names.\r\n   */\r\n  public getUserIds(filteredUserNames: string[]) {\r\n    return MessengerService.messenger.getUsers(filteredUserNames);\r\n  }\r\n  \r\n  /***********************************************************************************************\r\n   * CREATE CONVERSATIONS\r\n   **********************************************************************************************/\r\n\r\n  public createDirect(userId: number) {\r\n    return this.createNewConversation(\r\n      [{ userId }],\r\n      '',\r\n      true,\r\n      false,\r\n      false,\r\n      { type: 'direct' });\r\n  }\r\n\r\n  public createChat(newChatData: NewChatData) {\r\n    const permissions: Permissions = {\r\n      canWrite: true,\r\n      canEdit: true,\r\n      canRemove: true,\r\n      canManageParticipants: true,\r\n      canEditAll: false,\r\n      canRemoveAll: false,\r\n    };\r\n\r\n    const participants = newChatData.usersId.map( (userId: number) => {\r\n      return {\r\n        userId,\r\n        ...permissions,\r\n      };\r\n    });\r\n\r\n    return this.createNewConversation(\r\n      participants,\r\n      newChatData.title,\r\n      false,\r\n      newChatData.isPublic,\r\n      newChatData.isUber,\r\n      {\r\n        type: 'chat',\r\n        image: newChatData.avatar,\r\n        description: newChatData.description,\r\n        permissions,\r\n      });\r\n  }\r\n\r\n  public createChannel(newChatData: NewChatData) {\r\n    const permissions: Permissions = {\r\n      canWrite: false,\r\n      canEdit: false,\r\n      canRemove: false,\r\n      canManageParticipants: true,\r\n      canEditAll: false,\r\n      canRemoveAll: false,\r\n    };\r\n\r\n    const participants = newChatData.usersId.map( (userId: any) => {\r\n      return {\r\n        userId,\r\n        ...permissions,\r\n      };\r\n    });\r\n\r\n    return this.createNewConversation(\r\n      participants,\r\n      newChatData.title,\r\n      false,\r\n      newChatData.isPublic,\r\n      newChatData.isUber,\r\n      {\r\n        type: 'channel',\r\n        image: newChatData.avatar,\r\n        description: newChatData.description,\r\n        permissions,\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Messenger.createConversation method takes 6 arguments\r\n   * @param participants {Array<{userId: number, canWrite: boolean, canEdit: boolean, canRemove: boolean, canManageParticipants: boolean, canEditAll: boolean, canRemoveAll: boolean}>} - Array of participants\r\n   * @param title {string} - Conversation name\r\n   * @param direct {boolean} - True you create a conversation between two users\r\n   * @param publicJoin {boolean} - True if anyone can join the conversation\r\n   * @param uber {boolean} - True if anyone can join the conversation\r\n   * @param customData {Array<object>} - Array of any objects with custom data\r\n   */\r\n  private createNewConversation(participants: any[], title: string, direct:boolean, publicJoin:boolean, uber:boolean, customData:object) {\r\n    return MessengerService.messenger.createConversation(participants, title, direct, publicJoin, uber, customData);\r\n  }\r\n\r\n  /***********************************************************************************************\r\n   * EDIT/LEAVE CONVERSATIONS\r\n   **********************************************************************************************/\r\n\r\n  /**\r\n   * These methods triggers VoxImplant.Messaging.MessengerEvents.EditConversation event\r\n   * VoxImplant.Messaging method takes an array of {userId: number, canWrite: boolean, canEdit: boolean, canRemove: boolean, canManageParticipants: boolean, canEditAll: boolean, canRemoveAll: boolean}\r\n   */\r\n  public addParticipants(currentConversation: any, userIds: number[]) {\r\n    return currentConversation.addParticipants(userIds.map((userId) => ({\r\n      userId,\r\n      ...currentConversation.customData.permissions,\r\n    }))).catch(util.logError);\r\n  }\r\n\r\n  public removeParticipants(currentConversation: any, userIds: number[]) {\r\n    return currentConversation.removeParticipants(userIds.map((userId) => ({userId}))).catch(util.logError);\r\n  }\r\n\r\n  public addAdmins(currentConversation: any, userIds: number[]) {\r\n    return currentConversation.editParticipants(userIds.map((userId) => ({\r\n      userId,\r\n      canWrite: true,\r\n      canEdit: true,\r\n      canRemove: true,\r\n      canManageParticipants: true,\r\n      canEditAll: true,\r\n      canRemoveAll: true,\r\n      isOwner: true,\r\n    }))).catch(util.logError);\r\n  }\r\n\r\n  public removeAdmins(currentConversation: any, userIds: number[]) {\r\n    // default chat permissions from custom data\r\n    return currentConversation.editParticipants(userIds.map((userId) => ({\r\n      userId,\r\n      ...currentConversation.customData.permissions,\r\n    }))).catch(util.logError);\r\n  }\r\n\r\n  public editPermissions(currentConversation: any, permissions: Permissions, allUserIds: number[]) {\r\n    // NOTE! Must merge previous custom data with new\r\n    // Method setCustomData REPLACE data\r\n    currentConversation.setCustomData({ ...currentConversation.customData, permissions });\r\n    return currentConversation.editParticipants(allUserIds.map((userId) => ({\r\n      userId,\r\n      ...permissions,\r\n    }))).catch(util.logError);\r\n  }\r\n  \r\n  public leaveConversation(currentConversationUuid: string) {\r\n    MessengerService.messenger.leaveConversation(currentConversationUuid)\r\n      .catch(util.logError);\r\n  }\r\n\r\n  /**\r\n   * Notify other that current user typing in conversation. This method trigger VoxImplant.Messaging.MessengerEvents.Typing event\r\n   * Subscribe it to resolve events, min time between notifications 10sec\r\n   * @param currentConversation\r\n   */\r\n  public notifyTyping(currentConversation: any) {\r\n    return currentConversation.typing();\r\n  }\r\n\r\n  /***********************************************************************************************\r\n   * MESSAGES\r\n   **********************************************************************************************/\r\n\r\n  /**\r\n   * The maximum number of events you can retransmit at once is 100.\r\n   * retransmitEvents method resolves to the event containing an array of VoxImplant.Messaging.MessengerEvents\r\n   * params => eventsFrom: number, eventsTo: number, count?: number\r\n   */\r\n  public retransmitMessageEvents(currentConversation: any, lastEvent: any) {\r\n    lastEvent = lastEvent ? lastEvent : currentConversation && currentConversation.lastSeq;\r\n    const eventFrom = lastEvent - 100 > 0 ? lastEvent - 100 : 1;\r\n    // store.commit('conversations/updateLastEvent', eventFrom - 1);\r\n\r\n    return currentConversation && currentConversation.retransmitEvents(eventFrom, lastEvent)\r\n      .then((e: any) => {\r\n        let allEvents = this.conversationEvents[currentConversation.uuid];\r\n        this.conversationEvents[currentConversation.uuid] = [...e.events, ...(allEvents || [])];\r\n\r\n        const sendAction = VoxImplant.Messaging.MessengerAction.sendMessage;\r\n        const editAction = VoxImplant.Messaging.MessengerAction.editMessage;\r\n        const deleteAction = VoxImplant.Messaging.MessengerAction.removeMessage;\r\n        const messageEvents = [];\r\n        const filteredEvents = this.conversationEvents[currentConversation.uuid].filter((e: any) => e.messengerAction === sendAction || e.messengerAction === editAction || e.messengerAction === deleteAction );\r\n\r\n        if (!filteredEvents.length) return [];\r\n\r\n        // Group by message.uuid\r\n        const groupByUuidEvents = filteredEvents.reduce((res: any, evt: any) => {\r\n          res[evt.message.uuid] = res[evt.message.uuid] || [];\r\n          res[evt.message.uuid].push(evt);\r\n          return res;\r\n        }, Object.create(null));\r\n\r\n        // tslint:disable-next-line:forin\r\n        // Get only relevant events for message.uuid\r\n        for (const messageUuid in groupByUuidEvents) {\r\n          const arrEvtsMessage = groupByUuidEvents[messageUuid];\r\n          const isDeleted = arrEvtsMessage.find((m: any) => m.messengerAction === deleteAction);\r\n          const isEdited = arrEvtsMessage.find((m: any) => m.messengerAction === editAction);\r\n          if (isDeleted) {\r\n            continue;\r\n          } else if (isEdited) {\r\n            if (!arrEvtsMessage.find((m: any) => m.messengerAction === sendAction)) continue;\r\n\r\n            const sorted = arrEvtsMessage.sort((m: any) => m.timestamp);\r\n            const initialMessage = sorted[0];\r\n            let lastUpdated = sorted[sorted.length - 1];\r\n            lastUpdated.message.editedAt = lastUpdated.timestamp;\r\n            lastUpdated.timestamp = initialMessage.timestamp;\r\n            lastUpdated.message.editedBy = lastUpdated.initiator;\r\n            lastUpdated.initiator = initialMessage.initiator;\r\n            util.logHelp('retransmit edited', initialMessage, lastUpdated);\r\n            messageEvents.push(lastUpdated);\r\n          } else {\r\n            messageEvents.push(...arrEvtsMessage);\r\n          }\r\n        }\r\n\r\n        util.logHelp(`All events in conversation ${currentConversation.title}`, this.conversationEvents[currentConversation.uuid]);\r\n\r\n        return messageEvents;\r\n      })\r\n      // @ts-ignore\r\n      .catch((e: any) => {\r\n        util.logError('Retransmit message events fail', e);\r\n        return [];\r\n      });\r\n  }\r\n\r\n  public sendMessage(currentConversation: any, text: string, payload?: any) {\r\n    if (payload) {\r\n      return currentConversation.sendMessage(text, [payload])\r\n      .catch(util.logError);\r\n    } else {\r\n      return currentConversation.sendMessage(text, [{}])\r\n      .catch(util.logError);\r\n    }\r\n  }\r\n  public removeMessage(message: any) {\r\n    return message.remove()\r\n      .catch(util.logError);\r\n  }\r\n  public updateMessage(message: any) {\r\n    return message.update()\r\n      .catch(util.logError);\r\n  }\r\n  public markAsRead(currentConversation: any, lastSeq: number) {\r\n    return currentConversation.markAsRead(lastSeq)\r\n      .catch(util.logError);\r\n  }\r\n\r\n  /***********************************************************************************************\r\n   * EDIT USERS INFO\r\n   **********************************************************************************************/\r\n\r\n  public editUserCustomData(customData: { image: string, status: string }) {\r\n    return MessengerService.messenger.editUser(customData);\r\n  }\r\n}\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/common/list_card/ListCard.tsx",["802","803","804","805","806","807","808","809","810"],"import React  from 'react';\r\nimport { Card } from 'reactstrap';\r\nimport './ListCard.scss'\r\nimport 'react-multi-carousel/lib/styles.css';\r\nimport audioProfile1 from '../../../../assets/images/audio1.png' \r\nimport  { History }  from \"history\";\r\ninterface Iprops{\r\n    data?: any,\r\n    history: History,\r\n    onClick: (item: any) => void,\r\n}\r\nconst ListCard = ({data, history, onClick = (item: any) => {}} : Iprops) => {\r\n    \r\n    const getExpertiseString = () => {\r\n        return (data && data.expertise && data.expertise.map((expertise: any) => expertise && expertise.name) || []).join(' | ');\r\n    }\r\n\r\n    const viewProfile = (data: any) => {\r\n       history.push(`/discovery/view-profile/${data.user_id}`)\r\n    }\r\n\r\n    return(\r\n        <Card className=\"list-card\">\r\n            <div className=\"audioPImg position-relative\" onClick={() => onClick(data) } >\r\n                <img src={data && data.photo || audioProfile1} />\r\n                    <div className=\"play-btn\">\r\n                        <i className=\"icon icon-play\" />\r\n                    </div>\r\n            </div>\r\n            <div className=\"text\" onClick={() => viewProfile(data)} >\r\n                <p>{`${data && data.first_name || \"\"} ${data && data.last_name || \"\"}`}</p>\r\n                <p>{getExpertiseString()}</p>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ListCard;","/Users/appleapple/Downloads/loop/src/redux/index.ts",["811"],"import { AuthReducer}   from './auth/reducer'\r\nimport { UserReducer}   from './user/reducer'\r\nimport { DiscoveryReducer}   from './discovery/reducer'\r\nimport { MasterDataReducer } from './master-data/reducer';\r\nimport { NetworkReducer } from './network/reducer';\r\nimport { ProjectReducer } from './project/reducer';\r\nimport { HomeReducer } from './home/reducer';\r\nimport { HowItWorkReducer } from './how-it-work/reducer';\r\nimport Subscription from '../routes/home/Subscription';\r\nimport { SubscriptionReducer } from './subscription/reducer';\r\n\r\n export const reducers = {\r\n  auth : AuthReducer,\r\n  masterData: MasterDataReducer,\r\n  user: UserReducer,\r\n  discovery: DiscoveryReducer,\r\n  network: NetworkReducer,\r\n  project: ProjectReducer,\r\n  home:HomeReducer,\r\n  howitwork:HowItWorkReducer,\r\n  subscription: SubscriptionReducer\r\n};\r\n","/Users/appleapple/Downloads/loop/src/utils/Validators.ts",[],"/Users/appleapple/Downloads/loop/src/layouts/header/HomeHeader.tsx",[],"/Users/appleapple/Downloads/loop/src/layouts/header/LoginHeader.tsx",[],"/Users/appleapple/Downloads/loop/src/redux/home/action.ts",["812","813"],"\r\nimport { CONTACTDATA_FAILURE, CONTACTDATA_SUCCESS, HOME_FAILURE, HOME_SUCCESS, MasterDataActionType } from './types';\r\nimport { Dispatch } from 'redux';\r\nimport API_PATH from '../../services/api-service/api-path';\r\nimport API from '../../services/api-service/api';\r\nimport { IExpertise } from '../../utils/models/master-data/response.model';\r\nimport { IHomeItem } from '../../utils/models/other.model';\r\n\r\n \r\n\r\nexport function homeSuccess(data: IHomeItem ): any  {\r\n  return {\r\n    type: HOME_SUCCESS,\r\n    payload:  data\r\n  }\r\n}\r\n\r\nexport function homeFailure(): any {\r\n  return {\r\n    type: HOME_FAILURE,\r\n  }\r\n}\r\n\r\nexport function contactSuccess(data: IHomeItem ): any  {\r\n  return {\r\n    type: CONTACTDATA_SUCCESS,\r\n    payload:  data\r\n  }\r\n}\r\n\r\nexport function contactFailure(): any {\r\n  return {\r\n    type: CONTACTDATA_FAILURE,\r\n  }\r\n}\r\n \r\n\r\nexport const homeData = () =>  (dispatch: Dispatch) => {\r\n    return new Promise(async(resolve, reject) => {\r\n      try {\r\n        let data = await API().get<IHomeItem>(API_PATH.HOME_DATA );\r\n        dispatch(homeSuccess(data.data));\r\n      } catch (error) {\r\n        dispatch(homeFailure());\r\n      }\r\n    });\r\n}\r\n\r\nexport const contactData = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get<IHomeItem>(API_PATH.CONTACT_DATA);\r\n      dispatch(contactSuccess(data.data));\r\n    } catch (error) {\r\n      dispatch(contactFailure());\r\n    }\r\n  });\r\n}","/Users/appleapple/Downloads/loop/src/redux/auth/action.ts",["814","815","816","817","818"],"import {\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  User,\r\n  AuthActionType,\r\n  LOADING,\r\n  VOX_LOADING,\r\n} from './types';\r\nimport API from '../../services/api-service/api';\r\nimport API_PATH from '../../services/api-service/api-path';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n  BaseResponse,\r\n  Auth,\r\n  ContactUs,\r\n} from '../../utils/models/response.model';\r\nimport { ContactUsReq } from '../../utils/models/other.model';\r\nimport { voxService } from '../../services/voximplant-service/vox.service';\r\nimport MessengerService from '../../services/voximplant-service/messenger.service';\r\nimport { getVoxUsersSuccess, getVoxUsersFailure, getCurrentConversation, loadAllConversation } from '../user/action';\r\nimport store, { history } from '../../store';\r\n\r\nconst TOKEN_KEY = 'vox_token_a';\r\nconst REFRESH_TOKEN_KEY = 'vox_token_r';\r\nconst LOGIN = 'vox_login';\r\nconst TIME_NOTIFICATION = 3000;\r\n\r\nfunction setTokens(\r\n  auth_token: { accessToken: string; refreshToken: string },\r\n  login = ''\r\n) {\r\n  localStorage.setItem(TOKEN_KEY, auth_token.accessToken);\r\n  localStorage.setItem(LOGIN, login);\r\n  localStorage.setItem(REFRESH_TOKEN_KEY, auth_token.refreshToken);\r\n}\r\n\r\n// TypeScript infers that this function is returning SendMessageAction\r\nexport function loginSuccess(user: User, token: string): AuthActionType {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n    payload: { user, token },\r\n  };\r\n}\r\n\r\nexport function loginFailure(): AuthActionType {\r\n  return { type: LOGIN_FAILURE };\r\n}\r\n\r\nexport function loadingAction(loading: boolean): AuthActionType {\r\n  return { type: LOADING, loading };\r\n}\r\n\r\nexport function voxLoadingAction(vox_loading: boolean): AuthActionType {\r\n  return { type: VOX_LOADING, vox_loading };\r\n}\r\n\r\nexport const reloginVox = () => {\r\n  if (!localStorage.getItem('token')) {\r\n    return false;\r\n  }\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const token = localStorage.getItem('vox_token_a');\r\n      let userData = <any>localStorage.getItem('userData');\r\n      if (token && userData) {\r\n        userData = JSON.parse(userData);\r\n        store.dispatch(voxLoadingAction(true));\r\n        const login = await voxService.onLogin(\r\n          {\r\n            user: `${userData.email.replace(\r\n              '@',\r\n              '-loop-'\r\n            )}@loop.cocoworth.voximplant.com`,\r\n          },\r\n          token\r\n        ).catch((e:any)=> {\r\n          console.log(\"auth error\", e);\r\n          localStorage.clear();\r\n          voxService.get().disconnect();\r\n          history.push('/sign-in');\r\n        });\r\n        if (login.result) {\r\n          setTokens(login.tokens, userData.email.replace('@', '-loop-'));\r\n          let messengerService = MessengerService.get();\r\n          await messengerService\r\n            .init()\r\n            .then((data: any) => {\r\n              console.log(\r\n                'voximplant relogin messenger service initialize',\r\n                data\r\n              );\r\n              store.dispatch(getVoxUsersSuccess(data));\r\n              const {\r\n                user: { currentConversationId },\r\n              } = store.getState();\r\n              // getCurrentConversation(currentConversationId);\r\n              loadAllConversation(data.conversations, data.currentUser, data.users);\r\n            })\r\n            .catch((error: any) => {\r\n              console.log(\r\n                'voximplant messenger relogin service initialize failed',\r\n                error\r\n              );\r\n              store.dispatch(getVoxUsersFailure());\r\n            });\r\n        } else {\r\n          console.log('voximplant user relogin failure', login);\r\n        }\r\n        store.dispatch(voxLoadingAction(false));\r\n      }\r\n    } catch (error) {\r\n      store.dispatch(voxLoadingAction(false));\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const onlineReceived = (userId: Number, online: boolean) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const {\r\n        user: { vox_users },\r\n      } = store.getState();\r\n      const updateData = vox_users.users.map((item: any) => {\r\n        if (item.userId == userId) {\r\n          return {\r\n            ...item,\r\n            online: online,\r\n            timeStamp: new Date().getTime(),\r\n          };\r\n        } else if (\r\n          item.timeStamp &&\r\n          new Date().getTime() - item.timeStamp > TIME_NOTIFICATION\r\n        ) {\r\n          return {\r\n            ...item,\r\n            online: false,\r\n            timeStamp: new Date().getTime(),\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n      store.dispatch(\r\n        getVoxUsersSuccess({\r\n          ...vox_users,\r\n          users: updateData,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const login = (email: string, password: string) => (\r\n  dispatch: Dispatch\r\n): Promise<object> => {\r\n  dispatch(loadingAction(true));\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      let data = await API().post<Auth>(API_PATH.LOGIN, { email, password });\r\n      if (data.data.token) {\r\n        const login = await voxService.onLogin(\r\n          {\r\n            user: `${email.replace(\r\n              '@',\r\n              '-loop-'\r\n            )}@loop.cocoworth.voximplant.com`,\r\n            password,\r\n          },\r\n          null\r\n        );\r\n        if (login.result) {\r\n          setTokens(login.tokens, email.replace('@', '-loop-'));\r\n          let messengerService = MessengerService.get();\r\n          dispatch(voxLoadingAction(true));\r\n          await messengerService\r\n            .init()\r\n            .then((data: any) => {\r\n              console.log('voximplant messenger service initialize', data);\r\n              dispatch(getVoxUsersSuccess(data));\r\n              dispatch(voxLoadingAction(false));\r\n              const {\r\n                user: { currentConversationId },\r\n              } = store.getState();\r\n              // getCurrentConversation(currentConversationId);\r\n              loadAllConversation(data.conversations, data.currentUser, data.users);\r\n            })\r\n            .catch((error: any) => {\r\n              console.log(\r\n                'voximplant messenger service initialize failed',\r\n                error\r\n              );\r\n              dispatch(getVoxUsersFailure());\r\n              dispatch(voxLoadingAction(false));\r\n            });\r\n        } else {\r\n          console.log('voximplant user login failure', login);\r\n        }\r\n        dispatch(loadingAction(false));\r\n        localStorage.setItem('token', data.data.token);\r\n        localStorage.setItem('userData', JSON.stringify(data.data.data));\r\n        dispatch(loginSuccess(data.data.data, data.data.token));\r\n        resolve({ data: data.data.data });\r\n      }\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const register = (\r\n  email: string,\r\n  password: string,\r\n  password_confirmation: string\r\n) => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post<BaseResponse>(API_PATH.REGISTER, {\r\n        email,\r\n        password,\r\n        password_confirmation,\r\n        email_verified: true,\r\n      });\r\n      if (data.data) {\r\n        const userName = email.replace('@', '-loop-');\r\n        const response = await fetch(\r\n          `https://api.voximplant.com/platform_api/AddUser/?api_key=866d22ab-e2fc-4b44-a054-ba18bf59c3ec&application_id=10005576&user_name=${userName}&user_display_name=${userName}&user_password=${password}&account_id=3758024`\r\n        );\r\n        if (response) {\r\n          dispatch(loadingAction(false));\r\n          resolve({ data: data.data });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const logout = () => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().get<Auth>(API_PATH.LOGIN);\r\n      voxService.get().disconnect();\r\n      dispatch(loadingAction(false));\r\n      dispatch(loginFailure());\r\n      localStorage.clear();\r\n      resolve({ data: data.data.data });\r\n    } catch (error) {\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n\r\nexport const contactUs = (contactUs: ContactUsReq) => (dispatch: Dispatch) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post<ContactUs>(API_PATH.CONTACT_US, contactUs);\r\n      dispatch(loadingAction(false));\r\n      resolve({ data: data.data.message });\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n","/Users/appleapple/Downloads/loop/src/layouts/contact_footer/ContactFooter.tsx",[],"/Users/appleapple/Downloads/loop/src/layouts/auth_footer/AuthFooter.tsx",[],"/Users/appleapple/Downloads/loop/src/redux/user/types.ts",[],"/Users/appleapple/Downloads/loop/src/utils/Util.ts",[],"/Users/appleapple/Downloads/loop/src/services/api-service/api.ts",["819","820"],"import axios from \"axios\";\r\nimport Config from \"../../config/Config\";\r\n\r\n\r\n\r\ninterface Window {\r\n  [key:string]: any; // Add index signature\r\n}\r\nlet windowObj : Window = window;\r\nconst API = () =>{\r\n\r\n   let axiosClient =  axios.create(\r\n    {\r\n      baseURL: `http://loop-server.orbiqon.com/public/`,\r\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}`, }\r\n    },\r\n  );\r\n\r\n  axiosClient.interceptors.request.use(req => {\r\n    console.log(`API ${req.method} ${req.url}`);\r\n    // Important: request interceptors **must** return the request.\r\n    return req;\r\n  });\r\n  \r\n  axiosClient.interceptors.response.use(\r\n    res => res,\r\n    err => {\r\n      console.log(\"API ERROR\", err.response);\r\n      if (err.response.status === 400) {\r\n        console.log(\"API ERROR\", err.response);\r\n      // localStorage.clear()\r\n      //  windowObj.location = Config.LOGIN_URL;\r\n\r\n      //   throw new Error(`${err.config.url} not found`);\r\n      }\r\n      throw err;\r\n    }\r\n  );\r\n\r\n  return axiosClient;\r\n}\r\nexport default API\r\n\r\n","/Users/appleapple/Downloads/loop/src/services/api-service/api-path.ts",[],"/Users/appleapple/Downloads/loop/src/redux/network/reducer.ts",[],"/Users/appleapple/Downloads/loop/src/redux/master-data/types.ts",[],"/Users/appleapple/Downloads/loop/src/redux/master-data/reducer.ts",[],"/Users/appleapple/Downloads/loop/src/redux/home/reducer.ts",["821","822"]," import { IMasterDataAuth } from '../master-data/types';\r\nimport { MasterDataActionType, HOME_SUCCESS, HOME_FAILURE, CONTACTDATA_FAILURE, CONTACTDATA_SUCCESS } from './types';\r\n\r\nconst initialState  = {\r\n    data: [],\r\n    contact: []\r\n}\r\n\r\nexport const HomeReducer = (state= initialState, action: any) : any => {\r\n   \r\n    switch(action.type){\r\n        case CONTACTDATA_SUCCESS:\r\n            return {\r\n                ...state,\r\n                contact: action.payload.data\r\n            }\r\n        case CONTACTDATA_FAILURE:\r\n            return {\r\n                ...state,\r\n                contact: []\r\n            } \r\n        case HOME_SUCCESS:\r\n            return {\r\n                ...state,\r\n                data: action.payload.data\r\n            }\r\n        case HOME_FAILURE:\r\n            return {\r\n                ...state,\r\n                data: []\r\n            }\r\n        default:\r\n           return state;    \r\n    }\r\n}","/Users/appleapple/Downloads/loop/src/redux/discovery/reducer.ts",["823","824","825"],"import { discovery, recommended } from './action';\r\nimport { boolean } from \"yup\";\r\nimport { DiscoveryActionType, EXPERTISE_VIEW_SUCCESS, EXPERTISE_VIEW_FAILURE, DISCOVER_SUCCESS, \r\n    DISCOVER_FAILURE, DISCOVER_FEATURED_LIST_SUCCESS, DISCOVER_FEATURED_LIST_FAILURE,\r\n     RECOMMENDED_FAILURE, RECOMMENDED_SUCCESS, RECENT_JOINED_SUCCESS, RECENT_JOINED_FAILURE, \r\n     TRENDING_SUCCESS, TRENDING_FAILURE, LOCATION_SUCCESS, LOCATION_FAILURE, GENRE_VIEW_SUCCESS,\r\n      GENRE_VIEW_FAILURE, RANDOM_SUCCESS, RANDOM_FAILURE, DISCOVERHOME_SUCCESS, DISCOVERHOME_FAILURE, DISCOVERRECOMMENDED_SUCCESS, DISCOVERRECOMMENDED_FAILURE, DISCOVERGENRE_SUCCESS, DISCOVERGENRE_FAILURE, DISCOVEREXPERTISE_SUCCESS, DISCOVEREXPERTISE_FAILURE, DISCOVERRECENTLY_SUCCESS, DISCOVERRECENTLY_FAILURE, DISCOVERLOCATION_SUCCESS, DISCOVERLOCATION_FAILURE, DISCOVERTRENDING_SUCCESS, DISCOVERTRENDING_FAILURE, DISCOVERMYNETWORK_SUCCESS, DISCOVERMYNETWORK_FAILURE } from \"./types\";\r\n\r\nconst initialState : any = {\r\n    expertiseView: [], \r\n    discover: [], \r\n    discoverFeatured: [],\r\n    recommended: [],\r\n    recentJoined: [],\r\n    trending: [],\r\n    location: [],\r\n    genreView:[],\r\n    random: [], \r\n    disData: [],\r\n    recData: [],\r\n    genData: [],\r\n    expData: [],\r\n    recentData: [],\r\n    locData: [],\r\n    trendData: [],\r\n    myNetData: [],\r\n    loading: false\r\n}\r\n\r\nexport const DiscoveryReducer = (state= initialState, action: DiscoveryActionType) : any => {\r\n    switch(action.type){\r\n        case DISCOVERHOME_SUCCESS:\r\n            return {\r\n                ...state,\r\n                disData: action.payload.data,\r\n            }\r\n        case DISCOVERHOME_FAILURE:\r\n            return {\r\n                ...state,\r\n                disData: [],\r\n            }\r\n        case DISCOVERRECOMMENDED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                recData: action.payload.data,\r\n            }\r\n        case DISCOVERRECOMMENDED_FAILURE:\r\n            return {\r\n                ...state,\r\n                recData: [],\r\n            }\r\n        case DISCOVERGENRE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                genData: action.payload.data,\r\n            }\r\n        case DISCOVERGENRE_FAILURE:\r\n            return {\r\n                ...state,\r\n                genData: [],\r\n            }\r\n        case DISCOVEREXPERTISE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                expData: action.payload.data,\r\n            }\r\n        case DISCOVEREXPERTISE_FAILURE:\r\n            return {\r\n                ...state,\r\n                expData: [],\r\n            }\r\n        case DISCOVERRECENTLY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                recentData: action.payload.data,\r\n            }\r\n        case DISCOVERRECENTLY_FAILURE:\r\n            return {\r\n                ...state,\r\n                expData: [],\r\n            }\r\n        case DISCOVERLOCATION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                locData: action.payload.data,\r\n            }\r\n        case DISCOVERLOCATION_FAILURE:\r\n            return {\r\n                ...state,\r\n                locData: [],\r\n            }\r\n        case DISCOVERTRENDING_SUCCESS:\r\n            return {\r\n                ...state,\r\n                trendData: action.payload.data,\r\n            }\r\n        case DISCOVERTRENDING_FAILURE:\r\n            return {\r\n                ...state,\r\n                trendData: [],\r\n            }\r\n        case DISCOVERMYNETWORK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                myNetData: action.payload.data,\r\n            }\r\n        case DISCOVERMYNETWORK_FAILURE:\r\n            return {\r\n                ...state,\r\n                myNetData: [],\r\n            }\r\n        case EXPERTISE_VIEW_SUCCESS:\r\n            return {\r\n                ...state,\r\n                expertiseView: action.payload,\r\n            }\r\n        case EXPERTISE_VIEW_FAILURE:\r\n            return {\r\n                ...state,\r\n                expertiseView: [],\r\n            }\r\n        case DISCOVER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                discover: action.payload,\r\n            }\r\n        case DISCOVER_FAILURE:\r\n            return {\r\n                ...state,\r\n                discover: [],\r\n            }\r\n        case DISCOVER_FEATURED_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                discoverFeatured: action.payload,\r\n            }\r\n        case DISCOVER_FEATURED_LIST_FAILURE:\r\n            return {\r\n                ...state,\r\n                discoverFeatured: [],\r\n            } \r\n        case RECOMMENDED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                recommended: action.payload,\r\n            }\r\n        case RECOMMENDED_FAILURE:\r\n            return {\r\n                ...state,\r\n                recommended: [],\r\n            } \r\n        case RECENT_JOINED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                recentJoined: action.payload,\r\n            }\r\n        case RECENT_JOINED_FAILURE:\r\n            return {\r\n                ...state,\r\n                recentJoined: [],\r\n            } \r\n        case TRENDING_SUCCESS:\r\n            return {\r\n                ...state,\r\n                trending: action.payload,\r\n            }\r\n        case TRENDING_FAILURE:\r\n            return {\r\n                ...state,\r\n                trending: [],\r\n            } \r\n        case LOCATION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                location: action.payload,\r\n            }\r\n        case LOCATION_FAILURE:\r\n            return {\r\n                ...state,\r\n                location: [],\r\n            } \r\n        case GENRE_VIEW_SUCCESS:\r\n            return {\r\n                ...state,\r\n                genreView: action.payload,\r\n            }\r\n        case GENRE_VIEW_FAILURE:\r\n            return {\r\n                ...state,\r\n                genreView: [],\r\n            } \r\n        case RANDOM_SUCCESS:\r\n            return {\r\n                ...state,\r\n                random: action.payload,\r\n            }\r\n        case RANDOM_FAILURE:\r\n            return {\r\n                ...state,\r\n                random: [],\r\n            }\r\n        \r\n        default:\r\n           return state;    \r\n    }\r\n}","/Users/appleapple/Downloads/loop/src/redux/discovery/types.ts",["826"]," import { Track } from \"../../utils/models/user/response.model\";\r\n\r\n export const EXPERTISE_VIEW_SUCCESS = 'EXPERTISE_VIEW_SUCCESS';\r\n export const EXPERTISE_VIEW_FAILURE = 'EXPERTISE_VIEW_FAILURE';\r\n\r\nexport const DISCOVER_SUCCESS = 'DISCOVER_SUCCESS';\r\nexport const DISCOVER_FAILURE = 'DISCOVER_FAILURE';\r\n\r\nexport const DISCOVER_FEATURED_LIST_SUCCESS = 'DISCOVER_FEATURED_LIST_SUCCESS';\r\nexport const DISCOVER_FEATURED_LIST_FAILURE = 'DISCOVER_FEATURED_LIST_FAILURE';\r\n\r\nexport const RECOMMENDED_SUCCESS = 'RECOMMENDED_SUCCESS';\r\nexport const RECOMMENDED_FAILURE = 'RECOMMENDED_FAILURE';\r\n\r\nexport const RECENT_JOINED_SUCCESS = 'RECENT_JOINED_SUCCESS';\r\nexport const RECENT_JOINED_FAILURE = 'RECENT_JOINED_FAILURE';\r\n\r\nexport const TRENDING_SUCCESS = 'TRENDING_SUCCESS';\r\nexport const TRENDING_FAILURE = 'TRENDING_FAILURE';\r\n\r\nexport const LOCATION_SUCCESS = 'LOCATION_SUCCESS';\r\nexport const LOCATION_FAILURE = 'LOCATION_FAILURE';\r\n\r\nexport const GENRE_VIEW_SUCCESS = 'GENRE_VIEW_SUCCESS';\r\nexport const GENRE_VIEW_FAILURE = 'GENRE_VIEW_FAILURE';\r\n\r\nexport const RANDOM_SUCCESS = 'RANDOM_SUCCESS';\r\nexport const RANDOM_FAILURE = 'RANDOM_FAILURE';\r\n\r\nexport const DISCOVERHOME_SUCCESS = 'DISCOVERHOME_SUCCESS';\r\nexport const DISCOVERHOME_FAILURE = 'DISCOVERHOME_FAILURE';\r\n\r\nexport const DISCOVERRECOMMENDED_SUCCESS = 'DISCOVERRECOMMENDED_SUCCESS';\r\nexport const DISCOVERRECOMMENDED_FAILURE = 'DISCOVERRECOMMENDED_FAILURE';\r\n\r\nexport const DISCOVERGENRE_SUCCESS = 'DISCOVERGENRE_SUCCESS';\r\nexport const DISCOVERGENRE_FAILURE = 'DISCOVERGENRE_FAILURE';\r\n\r\nexport const DISCOVEREXPERTISE_SUCCESS = 'DISCOVEREXPERTISE_SUCCESS';\r\nexport const DISCOVEREXPERTISE_FAILURE = 'DISCOVEREXPERTISE_FAILURE';\r\n\r\nexport const DISCOVERRECENTLY_SUCCESS = 'DISCOVERRECENTLY_SUCCESS';\r\nexport const DISCOVERRECENTLY_FAILURE = 'DISCOVERRECENTLY_FAILURE';\r\n\r\nexport const DISCOVERLOCATION_SUCCESS = 'DISCOVERLOCATION_SUCCESS';\r\nexport const DISCOVERLOCATION_FAILURE = 'DISCOVERLOCATION_FAILURE';\r\n\r\nexport const DISCOVERTRENDING_SUCCESS = 'DISCOVERTRENDING_SUCCESS';\r\nexport const DISCOVERTRENDING_FAILURE = 'DISCOVERTRENDING_FAILURE';\r\n\r\nexport const DISCOVERMYNETWORK_SUCCESS = 'DISCOVERMYNETWORK_SUCCESS';\r\nexport const DISCOVERMYNETWORK_FAILURE = 'DISCOVERMYNETWORK_FAILURE';\r\n\r\ninterface ExpertiseViewSuccessAction {\r\n  type: typeof EXPERTISE_VIEW_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface ExpertiseViewFailureAction {\r\n  type: typeof EXPERTISE_VIEW_FAILURE, \r\n}\r\n\r\ninterface DiscoverySuccessAction {\r\n  type: typeof DISCOVER_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface DiscoveryFailureAction {\r\n  type: typeof DISCOVER_FAILURE, \r\n}\r\n\r\ninterface DiscoveryFeaturedSuccessAction {\r\n  type: typeof DISCOVER_FEATURED_LIST_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface DiscoveryFeaturedFailureAction {\r\n  type: typeof DISCOVER_FEATURED_LIST_FAILURE, \r\n}\r\n\r\ninterface RecommendedSuccessAction {\r\n  type: typeof RECOMMENDED_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface RecommendedFailureAction {\r\n  type: typeof RECOMMENDED_FAILURE, \r\n}\r\n\r\ninterface RecentlyJoinedSuccessAction {\r\n  type: typeof RECENT_JOINED_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface RecentlyJoinedFailureAction {\r\n  type: typeof RECENT_JOINED_FAILURE, \r\n}\r\n\r\ninterface TrendingSuccessAction {\r\n  type: typeof TRENDING_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface TrendingFailureAction {\r\n  type: typeof TRENDING_FAILURE, \r\n}\r\n\r\ninterface LocationSuccessAction {\r\n  type: typeof LOCATION_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface LocationFailureAction {\r\n  type: typeof LOCATION_FAILURE, \r\n}\r\n\r\ninterface GenreViewSuccessAction {\r\n  type: typeof GENRE_VIEW_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface GenreViewFailureAction {\r\n  type: typeof GENRE_VIEW_FAILURE, \r\n}\r\n\r\ninterface RandomSuccessAction {\r\n  type: typeof RANDOM_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface RandomFailureAction {\r\n  type: typeof RANDOM_FAILURE, \r\n} \r\n\r\ninterface DiscoverHomeSuccessAction {\r\n  type: typeof DISCOVERHOME_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface DiscoverHomeFailureAction {\r\n  type: typeof DISCOVERHOME_FAILURE, \r\n} \r\n\r\ninterface DiscoverRecommendedSuccessAction {\r\n  type: typeof DISCOVERRECOMMENDED_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface DiscoverRecommendedFailureAction {\r\n  type: typeof DISCOVERRECOMMENDED_FAILURE, \r\n}\r\n\r\ninterface DiscoverGenreSuccessAction {\r\n  type: typeof DISCOVERGENRE_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface DiscoverGenreFailureAction {\r\n  type: typeof DISCOVERGENRE_FAILURE, \r\n} \r\n\r\ninterface DiscoverExpertiseSuccessAction {\r\n  type: typeof DISCOVEREXPERTISE_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface DiscoverExpertiseFailureAction {\r\n  type: typeof DISCOVEREXPERTISE_FAILURE, \r\n}\r\n\r\ninterface DiscoverRecentlySuccessAction {\r\n  type: typeof DISCOVERRECENTLY_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface DiscoverRecentlyFailureAction {\r\n  type: typeof DISCOVERRECENTLY_FAILURE, \r\n}\r\n\r\ninterface DiscoverLocationSuccessAction {\r\n  type: typeof DISCOVERLOCATION_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface DiscoverLocationFailureAction {\r\n  type: typeof DISCOVERLOCATION_FAILURE,\r\n  payload: any\r\n}\r\n\r\ninterface DiscoverTrendingSuccessAction {\r\n  type: typeof DISCOVERTRENDING_SUCCESS,\r\n  payload: any\r\n}\r\ninterface DiscoverTrendingFailureAction {\r\n  type: typeof DISCOVERTRENDING_FAILURE, \r\n}\r\n\r\n\r\ninterface DiscoverMyNetworkSuccessAction {\r\n  type: typeof DISCOVERMYNETWORK_SUCCESS,\r\n  payload: any\r\n}\r\ninterface DiscoverMyNetworkFailureAction {\r\n  type: typeof DISCOVERMYNETWORK_FAILURE, \r\n}\r\n\r\nexport type DiscoveryActionType = ExpertiseViewSuccessAction | RandomFailureAction | RandomSuccessAction | GenreViewFailureAction | GenreViewSuccessAction\r\n                                | LocationFailureAction | LocationSuccessAction | TrendingFailureAction | TrendingSuccessAction | RecentlyJoinedFailureAction \r\n                                | RecentlyJoinedSuccessAction | RecommendedFailureAction | RecommendedSuccessAction | DiscoveryFeaturedFailureAction | DiscoveryFeaturedSuccessAction\r\n                                | DiscoveryFailureAction | DiscoverySuccessAction | ExpertiseViewFailureAction \r\n                                | DiscoverHomeSuccessAction | DiscoverHomeFailureAction | DiscoverRecommendedSuccessAction | DiscoverRecommendedFailureAction \r\n                                | DiscoverGenreSuccessAction | DiscoverGenreFailureAction | DiscoverExpertiseSuccessAction | DiscoverExpertiseFailureAction\r\n                                | DiscoverRecentlySuccessAction | DiscoverRecentlyFailureAction\r\n                                | DiscoverLocationSuccessAction | DiscoverLocationFailureAction\r\n                                | DiscoverTrendingSuccessAction | DiscoverTrendingFailureAction\r\n                                |DiscoverMyNetworkSuccessAction | DiscoverMyNetworkFailureAction\r\n                                ;","/Users/appleapple/Downloads/loop/src/redux/auth/reducer.ts",["827"],"import {\r\n  AuthState,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  AuthActionType,\r\n  LOADING,\r\n  VOX_LOADING,\r\n} from './types';\r\nimport { boolean } from 'yup';\r\n\r\nconst initialState: AuthState = {\r\n  user: undefined,\r\n  token: undefined,\r\n  loading: false,\r\n  vox_loading: false,\r\n};\r\n\r\nexport const AuthReducer = (\r\n  state = initialState,\r\n  action: AuthActionType\r\n): AuthState => {\r\n  switch (action.type) {\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n      };\r\n    case LOGIN_FAILURE:\r\n      return {\r\n        ...state,\r\n        user: undefined,\r\n        token: undefined,\r\n      };\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.loading,\r\n      };\r\n    case VOX_LOADING:\r\n      return {\r\n        ...state,\r\n        vox_loading: action.vox_loading,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","/Users/appleapple/Downloads/loop/src/redux/network/types.ts",["828","829","830","831"]," import { IExpertise, IGenre, IExpertiseItem, IGenreItem } from '../../utils/models/master-data/response.model';\r\nexport const MY_NETWORK_SUCCESS = 'MY_NETWORK_SUCCESS';\r\nexport const MY_NETWORK_FAILURE = 'MY_NETWORK_FAILURE';\r\n\r\nexport const NETWORK_ADD_SUCCESS = 'NETWORK_ADD_SUCCESS';\r\nexport const NETWORK_ADD_FAILURE = 'NETWORK_ADD_FAILURE';\r\n\r\nexport const NETWORK_REMOVE_SUCCESS = 'NETWORK_REMOVE_SUCCESS';\r\nexport const NETWORK_REMOVE_FAILURE = 'NETWORK_REMOVE_FAILURE';\r\n \r\n\r\ninterface MyNetworkSuccessAction {\r\n  type: typeof MY_NETWORK_SUCCESS,\r\n  payload: any[]\r\n}\r\n\r\ninterface MyNetworkFailureAction {\r\n    type: typeof MY_NETWORK_FAILURE\r\n}\r\n\r\ninterface AddNetworkSuccessAction {\r\n  type: typeof NETWORK_ADD_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface AddNetworkFailureAction {\r\n    type: typeof NETWORK_ADD_FAILURE\r\n}\r\n\r\ninterface RemoveNetworkSuccessAction {\r\n  type: typeof NETWORK_REMOVE_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface RemoveNetworkFailureAction {\r\n    type: typeof NETWORK_REMOVE_FAILURE\r\n}\r\n\r\nexport type NetworkActionType = RemoveNetworkFailureAction | RemoveNetworkSuccessAction | AddNetworkFailureAction | AddNetworkSuccessAction | MyNetworkSuccessAction | MyNetworkFailureAction ;","/Users/appleapple/Downloads/loop/src/redux/how-it-work/reducer.ts",["832"]," import { IMasterDataAuth } from '../master-data/types';\r\nimport {    HOWITWORK_SUCCESS, HOWITWORK_FAILURE } from './types';\r\n\r\nconst initialState  = {\r\n    data: []\r\n}\r\n\r\nexport const HowItWorkReducer = (state= initialState, action: any) : any => {\r\n   \r\n    switch(action.type){\r\n        case HOWITWORK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                data: action.payload.data\r\n            }\r\n        case HOWITWORK_FAILURE:\r\n            return {\r\n                ...state,\r\n                data: []\r\n            }\r\n        default:\r\n           return state;    \r\n    }\r\n\r\n}","/Users/appleapple/Downloads/loop/src/redux/user/reducer.ts",["833"],"import { boolean } from 'yup';\r\nimport {\r\n  EditProfileActionType,\r\n  GET_PROFILE_SUCCESS,\r\n  GET_PROFILE_FAILURE,\r\n  PLAY_TRACK_SUCCESS,\r\n  GET_PROFILE_ID_SUCCESS,\r\n  GET_PROFILE_ID_FAILURE,\r\n  NOTIFICATION_SUCCESS,\r\n  NOTIFICATION_FAILURE,\r\n  VOX_USERS_SUCCESS,\r\n  VOX_USERS_FAILURE,\r\n  UPPDATE_CONVERSATION_HISTORY_SUCCESS,\r\n  UPPDATE_CONVERSATION_HISTORY_FAILURE,\r\n  UPPDATE_CURRENT_CONVERSATION_ID_SUCCESS,\r\n  UPPDATE_CURRENT_CONVERSATION_ID_FAILURE,\r\n} from './types';\r\n\r\nconst initialState: any = {\r\n  profile: undefined,\r\n  profileById: undefined,\r\n  loading: false,\r\n  playingTrack: undefined,\r\n  vox_users: {},\r\n  currentConversationId: '',\r\n  conversationHistory: {},\r\n};\r\n\r\nexport const UserReducer = (\r\n  state = initialState,\r\n  action: EditProfileActionType\r\n): any => {\r\n  switch (action.type) {\r\n    case GET_PROFILE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        profile: action.payload,\r\n      };\r\n    case GET_PROFILE_FAILURE:\r\n      return {\r\n        ...state,\r\n        profile: undefined,\r\n      };\r\n    case GET_PROFILE_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        profileById: action.payload,\r\n      };\r\n    case GET_PROFILE_ID_FAILURE:\r\n      return {\r\n        ...state,\r\n        profileById: undefined,\r\n      };\r\n    case PLAY_TRACK_SUCCESS:\r\n      console.log('#redice', action);\r\n      return {\r\n        ...state,\r\n        playingTrack: { ...action.payload },\r\n      };\r\n    case NOTIFICATION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        notification: action.payload,\r\n      };\r\n    case NOTIFICATION_FAILURE:\r\n      return {\r\n        ...state,\r\n        notification: [],\r\n      };\r\n    case VOX_USERS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        vox_users: action.payload,\r\n      };\r\n    case VOX_USERS_FAILURE:\r\n      return {\r\n        ...state,\r\n        vox_users: {},\r\n      };\r\n    case UPPDATE_CONVERSATION_HISTORY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        conversationHistory: action.payload,\r\n      };\r\n    case UPPDATE_CONVERSATION_HISTORY_FAILURE:\r\n      return {\r\n        ...state,\r\n        conversationHistory: {},\r\n      };\r\n    case UPPDATE_CURRENT_CONVERSATION_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentConversationId: action.payload,\r\n      };\r\n    case UPPDATE_CURRENT_CONVERSATION_ID_FAILURE:\r\n      return {\r\n        ...state,\r\n        currentConversationId: '',\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","/Users/appleapple/Downloads/loop/src/redux/subscription/reducer.ts",["834"]," import { IMasterDataAuth } from '../master-data/types';\r\nimport {  SUBSCRIPTION_SUCCESS, SUBSCRIPTION_FAILURE } from './types';\r\n\r\nconst initialState  = {\r\n    data: []\r\n}\r\n\r\nexport const SubscriptionReducer = (state= initialState, action: any) : any => {\r\n   \r\n    switch(action.type){\r\n        case SUBSCRIPTION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                data: action.payload.data\r\n            }\r\n        case SUBSCRIPTION_FAILURE:\r\n            return {\r\n                ...state,\r\n                data: []\r\n            }\r\n        default:\r\n           return state;    \r\n    }\r\n\r\n}","/Users/appleapple/Downloads/loop/src/redux/project/reducer.ts",[],"/Users/appleapple/Downloads/loop/src/redux/home/types.ts",[],"/Users/appleapple/Downloads/loop/src/services/voximplant-service/vox.service.ts",[],"/Users/appleapple/Downloads/loop/src/redux/auth/types.ts",[],"/Users/appleapple/Downloads/loop/src/redux/how-it-work/types.ts",["835"],"import { IHomeItem, IHowItWorkItem } from \"../../utils/models/other.model\";\r\n\r\nexport const HOWITWORK_SUCCESS = 'HOWITWORK_SUCCESS';\r\nexport const HOWITWORK_FAILURE = 'HOWITWORK_FAILURE';\r\n \r\ninterface HowItWorkSuccessAction {\r\n  type: typeof HOWITWORK_SUCCESS,\r\n  payload: IHowItWorkItem\r\n}\r\n\r\ninterface HowItWorkFailureAction {\r\n    type: typeof HOWITWORK_FAILURE\r\n}\r\n\r\nexport type MasterDataActionType =     HowItWorkSuccessAction | HowItWorkFailureAction;","/Users/appleapple/Downloads/loop/src/redux/project/types.ts",["836","837","838","839"],"import { IExpertise, IGenre, IExpertiseItem, IGenreItem } from '../../utils/models/master-data/response.model';\r\nexport const PROJECT_CREATE_SUCCESS = 'PROJECT_CREATE_SUCCESS';\r\nexport const PROJECT_CREATE_FAILURE = 'PROJECT_CREATE_FAILURE';\r\n  \r\nexport const PROJECT_LIST_SUCCESS = 'PROJECT_LIST_SUCCESS';\r\nexport const PROJECT_LIST_FAILURE = 'PROJECT_LIST_FAILURE';\r\nexport const PROJECT_BY_ID_SUCCESS = 'PROJECT_BY_ID_SUCCESS';\r\nexport const PROJECT_BY_ID_FAILURE = 'PROJECT_BY_ID_FAILURE';\r\n   \r\n    \r\ninterface ProjectCreateSuccessAction {\r\n  type: typeof PROJECT_CREATE_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface ProjectCreateFailureAction {\r\n    type: typeof PROJECT_CREATE_FAILURE\r\n}    \r\ninterface ProjectListSuccessAction {\r\n  type: typeof PROJECT_LIST_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface ProjectListFailureAction {\r\n    type: typeof PROJECT_LIST_FAILURE\r\n}\r\ninterface ProjectByIdSuccessAction {\r\n  type: typeof PROJECT_BY_ID_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface ProjectByIdFailureAction {\r\n    type: typeof PROJECT_BY_ID_FAILURE\r\n}\r\n \r\n\r\nexport type ProjectActionType = ProjectByIdSuccessAction | ProjectByIdFailureAction | ProjectCreateSuccessAction | ProjectCreateFailureAction | ProjectListSuccessAction | ProjectListFailureAction;","/Users/appleapple/Downloads/loop/src/redux/subscription/types.ts",[],"/Users/appleapple/Downloads/loop/src/config/Config.ts",[],"/Users/appleapple/Downloads/loop/src/redux/how-it-work/action.ts",["840","841"],"\r\nimport {  HOWITWORK_FAILURE, HOWITWORK_SUCCESS, MasterDataActionType } from './types';\r\nimport { Dispatch } from 'redux';\r\nimport API_PATH from '../../services/api-service/api-path';\r\nimport API from '../../services/api-service/api';\r\nimport { IExpertise } from '../../utils/models/master-data/response.model';\r\nimport { IHomeItem, IHowItWorkItem } from '../../utils/models/other.model';\r\n\r\n \r\n\r\n \r\nexport function howItWorkSuccess(data: IHowItWorkItem ): any  {\r\n  return {\r\n    type: HOWITWORK_SUCCESS,\r\n    payload:  data\r\n  }\r\n}\r\n\r\nexport function howItWorkFailure(): any {\r\n  return {\r\n    type: HOWITWORK_FAILURE,\r\n  }\r\n}\r\n \r\n \r\n\r\nexport const howItWorkData = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get<IHomeItem>(API_PATH.HOWITWORK_DATA );\r\n      \r\n      \r\n      dispatch(howItWorkSuccess(data.data));\r\n      \r\n    } catch (error) {\r\n      dispatch(howItWorkFailure());\r\n    }\r\n  });\r\n}","/Users/appleapple/Downloads/loop/src/redux/subscription/action.ts",["842","843","844"],"\r\nimport {  SUBSCRIPTION_FAILURE, SUBSCRIPTION_SUCCESS } from './types';\r\nimport { Dispatch } from 'redux';\r\nimport API_PATH from '../../services/api-service/api-path';\r\nimport API from '../../services/api-service/api';\r\nimport { IExpertise } from '../../utils/models/master-data/response.model';\r\nimport { IHomeItem, IHowItWorkItem, SubscriptionItem } from '../../utils/models/other.model';\r\nimport { HOWITWORK_FAILURE } from '../how-it-work/types';\r\n\r\n \r\n\r\n \r\nexport function subscriptionSuccess(data: SubscriptionItem ): any  {\r\n  return {\r\n    type: SUBSCRIPTION_SUCCESS,\r\n    payload:  data\r\n  }\r\n}\r\n\r\nexport function subscriptionFailure(): any {\r\n  return {\r\n    type: SUBSCRIPTION_FAILURE,\r\n  }\r\n}\r\n \r\n \r\n\r\nexport const subData = () =>  (dispatch: Dispatch) => {\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      let data = await API().get<IHomeItem>(API_PATH.SUBSCRIPTION_DATA );\r\n      \r\n      \r\n      dispatch(subscriptionSuccess(data.data));\r\n      \r\n    } catch (error) {\r\n      dispatch(subscriptionFailure());\r\n    }\r\n  });\r\n}","/Users/appleapple/Downloads/loop/src/utils/Eums.ts",[],"/Users/appleapple/Downloads/loop/src/redux/project/action.ts",["845","846","847","848","849"],"import { IGenre } from '../../utils/models/master-data/response.model';\r\nimport {  ProjectActionType, PROJECT_BY_ID_SUCCESS, PROJECT_BY_ID_FAILURE, PROJECT_CREATE_SUCCESS, PROJECT_CREATE_FAILURE, PROJECT_LIST_SUCCESS, PROJECT_LIST_FAILURE } from './types';\r\nimport { Dispatch } from 'redux';\r\nimport API_PATH from '../../services/api-service/api-path';\r\nimport API from '../../services/api-service/api';\r\nimport { loadingAction } from '../auth/action';\r\n\r\nexport function createProjectSuccess(data: any[] ): ProjectActionType  {\r\n  return {\r\n    type: PROJECT_CREATE_SUCCESS,\r\n    payload:  data\r\n  }\r\n}\r\n\r\nexport function createProjectFailure(): ProjectActionType {\r\n  return {\r\n    type: PROJECT_CREATE_FAILURE,\r\n  }\r\n} \r\n\r\nexport function listProjectSuccess(data: any[] ): ProjectActionType  {\r\n  return {\r\n    type: PROJECT_LIST_SUCCESS,\r\n    payload:  data\r\n  }\r\n}\r\n\r\nexport function listProjectFailure(): ProjectActionType {\r\n  return {\r\n    type: PROJECT_LIST_FAILURE,\r\n  }\r\n} \r\n\r\nexport function projectByIdSuccess(data: any ): ProjectActionType  {\r\n  console.log(\"##data\", data);\r\n  \r\n  return {\r\n    type: PROJECT_BY_ID_SUCCESS,\r\n    payload:  data\r\n  }\r\n}\r\n\r\nexport function projectByIdFailure(): ProjectActionType {\r\n  return {\r\n    type: PROJECT_BY_ID_FAILURE,\r\n  }\r\n} \r\n \r\nexport const createProject = (data: any) =>  (dispatch: Dispatch) => {\r\n   \r\n  const formData = new FormData();\r\n  formData.append(\"name\", data.name);\r\n  formData.append(\"description\", data.description);\r\n  formData.append(\"cover_image\", data.coverFile);\r\n  data.tracksImageFile && data.tracksImageFile.forEach((element : any, index: number) => {\r\n     formData.append(`tracks[${index}][tracks_image]`, element);\r\n  });\r\n\r\n  data.tracksFile && data.tracksFile.forEach((element : any, index: number) => { \r\n    formData.append(`tracks[${index}][tracks_file]`, element);\r\n  });\r\n\r\n  data.tracks_title && data.tracks_title.forEach((element : any, index: number) => {\r\n    formData.append(`tracks[${index}][tracks_title]`, element);\r\n  });\r\n \r\n  // data.voiceFiles && data.voiceFiles.forEach((element : any, index: number) => {\r\n  //   formData.append(`tracks[${index}][tracks_title]`, element);\r\n  // });\r\n\r\n  data.voiceFiles && data.voiceFiles.forEach((element : any, index: number) => {\r\n     formData.append(`files[${index}][file]`, element);\r\n  });\r\n  // formData.append(\"voice_memos_files[]\", data.voiceFiles);\r\n  data.voice_memos_title && data.voice_memos_title.forEach((element : any, index: number) => {\r\n    formData.append(`files[${index}][title]`, element);\r\n  });\r\n\r\n  data.collaborator_id && (data.collaborator_id || []).forEach((element : any, index: number) => {\r\n    formData.append(`collaborator_id[${index}]`, element);\r\n  });\r\n \r\n  // formData.append(\"collaborator_id[]\", data.collaborator_id || [] );\r\n\r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post(API_PATH.CREATE_PROJECT, formData );\r\n      dispatch(createProjectSuccess(data.data));\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(createProjectFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n\r\n} \r\nexport const updatePoject =  (dataForm: any) =>  (dispatch: Dispatch)  => {\r\n  console.log();\r\n  const formData = new FormData();\r\n  formData.append(\"project_id\", dataForm.project_id);\r\n  formData.append(\"name\", dataForm.name);\r\n  formData.append(\"description\", dataForm.description);\r\n  if(dataForm.coverFile){\r\n  formData.append(\"cover_image\", dataForm.coverFile);\r\n  }\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post(API_PATH.UPDATDE_PROJECT, formData);\r\n      dispatch(loadingAction(false));\r\n      resolve({ data: data.data.message });\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({ error: error });\r\n    }\r\n  });\r\n};\r\n \r\nexport const getProjects = () =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().get(API_PATH.LIST_PROJECT );\r\n      dispatch(listProjectSuccess(data.data && data.data.data || []));\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(listProjectFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n\r\n} \r\n\r\nexport const projectById = (id: string) =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().get(API_PATH.PROJECT_DETAILS + '/'+ id );\r\n      dispatch(projectByIdSuccess(data.data && data.data.message || {}));\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(projectByIdFailure());\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n\r\n} \r\n\r\nexport const createProjectInit = (id: string) =>  (dispatch: Dispatch) => {\r\n  dispatch(projectByIdFailure());\r\n} \r\n\r\nexport const projectAddCollaborator = (payload: any) =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post(API_PATH.PROJECT_ADD_COLLABORATOR, payload);\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n\r\n} \r\n\r\nexport const projectAddTrack = (payload: any) =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post(API_PATH.PROJECT_ADD_TRACK, payload);\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n} \r\n\r\nexport const projectAddFile = (payload: any) =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post(API_PATH.PROJECT_ADD_FILE, payload);\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n} \r\n\r\nexport const projectRemoveTrack = (id: string) =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().get(API_PATH.PROJECT_DELETE_TRACK + '/'+ id);\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n\r\n\r\n} \r\n\r\n\r\nexport const projectAddVoice = (payload: any) =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().post(API_PATH.PROJECT_ADD_VOICE, payload);\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n\r\n\r\n} \r\n\r\nexport const projectRemoveVoice = (id: string) =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().get(API_PATH.PROJECT_DELETE_VOICE + '/'+ id);\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n} \r\n\r\nexport const projectDelete = (id: string) =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().get(API_PATH.PROJECT_DELETE + '/'+ id);\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n} \r\n\r\n\r\nexport const projectAddAsArchive = (id: string) =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().get(API_PATH.PROJECT_ADD_ARCHIVE + '/'+ id);\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n} \r\n\r\nexport const projectRemoveArchive = (id: string) =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().get(API_PATH.PROJECT_REMOVE_ARCHIVE + '/'+ id);\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n} \r\n\r\n\r\nexport const projectRemoveFile = (id: string) =>  (dispatch: Dispatch) => {\r\n  \r\n  return new Promise(async(resolve, reject) => {\r\n    try {\r\n      dispatch(loadingAction(true));\r\n      let data = await API().get(API_PATH.PROJECT_REMOVE_FILE + '/'+ id);\r\n      dispatch(loadingAction(false));\r\n      resolve({data: data.data.message});\r\n    } catch (error) {\r\n      dispatch(loadingAction(false));\r\n      reject({error: error});\r\n    }\r\n  });\r\n}\r\n\r\n","/Users/appleapple/Downloads/loop/src/utils/models/user/request.model.ts",[],"/Users/appleapple/Downloads/loop/src/features/dashboard/common/notification/Notification.tsx",["850","851","852","853","854","855"],"import React, { useEffect, useState } from 'react';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport './Notification.scss'\r\nimport _ from 'lodash';\r\nimport { acceptRequest, rejectRequest } from '../../../../redux/network/action';\r\nimport { readNotification, getNotification } from '../../../../redux/user/action';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport  { History }  from \"history\";\r\nimport audioProfile from '../../../../assets/images/audioProfile.png';\r\n\r\n\r\ntype SideBarProps = {\r\n    isSideBarOpen: boolean,\r\n    setIsSideBarOpen: Function,\r\n    notification: any,\r\n    readNotification: any,\r\n    rejectRequest: any,\r\n    acceptRequest: any,\r\n    getNotification: any,\r\n    history: History,\r\n}\r\n\r\nconst Notification = (props: SideBarProps) => {\r\n    const [dropdownOpen, setOpen] = useState(false);\r\n    const [dropdownOpenChat, setOpenChat] = useState(false);\r\n    const [notification, setNotification] = useState([]);\r\n    const [defaultOpen, setDefaultOpen] = useState<any>({});\r\n\r\n    const toggle = () => setOpen(!dropdownOpen);\r\n    const toggleChat = () => setOpenChat(!dropdownOpenChat);\r\n\r\n    useEffect(() => {\r\n        if (props.notification) {\r\n            setNotification(props.notification)\r\n        }\r\n    }, [props.notification])\r\n\r\n    const toggleSubMenu = (index:any) => {\r\n        let temObject = {};\r\n        notification && notification.map((item:any, subindex:any)=>{\r\n            temObject = {\r\n                ...temObject,\r\n                [subindex] :false\r\n            }\r\n        })\r\n        setDefaultOpen({\r\n            ...temObject,\r\n            [index]: defaultOpen && !defaultOpen[index] ? true : false,\r\n        });\r\n    }\r\n\r\n    const readNotification = async (id: any) => {\r\n        const reponse = await props.readNotification(id);\r\n        if (reponse && reponse.success) { \r\n            toast.success(reponse.message);\r\n            await props.getNotification()\r\n        } else {\r\n            toast.error(\"Something went wrong\");\r\n        }\r\n    }\r\n\r\n    const acceptRequest = async (id: any) => {\r\n        const reponse = await props.acceptRequest(id)\r\n        if (reponse && reponse.data && reponse.data.success) {\r\n            toast.success(reponse.data.message);\r\n            await props.getNotification()\r\n        } else {\r\n            toast.error(\"Something went wrong\");\r\n        }\r\n    }\r\n\r\n    const rejectRequest = async (id: any) => {\r\n        const reponse = await props.rejectRequest(id)\r\n        if (reponse && reponse.data && reponse.data.success) { \r\n            toast.success(reponse.data.message);\r\n            await props.getNotification()\r\n        } else {\r\n            toast.error(\"Something went wrong\");\r\n        }\r\n    }\r\n    const viewProfile = (data: any) => {\r\n        props.history.push(`/discovery/view-profile/${data && data.entity_id}`)\r\n     }\r\n\r\n    return (\r\n        <div className=\"notification\">\r\n            <ToastContainer />\r\n            <ButtonDropdown isOpen={dropdownOpenChat} toggle={toggleChat}>\r\n                <DropdownToggle className=\"btn1\"  >\r\n                     <span className=\"active-dot\"></span>\r\n                    <i className=\"icon icon-envelope\"></i>\r\n                </DropdownToggle>\r\n                <DropdownMenu className=\"notiMenuDropdown chatNotificationDrop\">\r\n                    \r\n                                <DropdownItem>\r\n                                    <div className=\"chat-count\">5</div>\r\n                                    <img src={audioProfile} /> \r\n                                    <span>Lucas Milo  <br /> <span className=\"subTitle\">Of the printing and typese…</span></span>\r\n                                </DropdownItem>\r\n                                <DropdownItem><img src={audioProfile} /> \r\n                                <div className=\"chat-count\">9+</div>\r\n                                    <span>Lucas Milo  <br /> <span className=\"subTitle\">Of the printing and typese…</span></span>\r\n                                </DropdownItem>\r\n                                <DropdownItem><img src={audioProfile} /> \r\n                                    <span>Lucas Milo  <br /> <span className=\"subTitle\">Of the printing and typese…</span></span>\r\n                                </DropdownItem>\r\n                                <button className=\"button-btnGradiant feeling-random btn btn-secondary btn-got-to\">Go to Messages</button>\r\n                                    \r\n                </DropdownMenu>\r\n            </ButtonDropdown>\r\n\r\n            <ButtonDropdown isOpen={dropdownOpen} toggle={()=>{}}>\r\n                <DropdownToggle className={dropdownOpen ? 'active btn1' : 'btn1'} onClick={toggle} >\r\n                    {!_.isEmpty(notification) && <span className=\"active-dot\"></span>}\r\n                    <i className=\"icon icon-bell\"></i>\r\n                </DropdownToggle>\r\n                <DropdownMenu className=\"notiMenuDropdown\">\r\n                    {\r\n                        !_.isEmpty(notification) ? notification.map((item: any, index: any) => {\r\n                            return (\r\n                                <DropdownItem key={index}>\r\n                                    <div onClick={() => viewProfile(item)}>\r\n                                        <img src={item.photo} />\r\n                                    </div>\r\n                                    <div>\r\n                                        {item.text}\r\n                                    </div>\r\n                                    <ButtonDropdown isOpen={defaultOpen && defaultOpen[index]} toggle={()=>toggleSubMenu(index)} >\r\n                                        <DropdownToggle aria-expanded={defaultOpen && defaultOpen[index]} className={defaultOpen && defaultOpen[index] ? 'active btn2' :  'btn2'}>\r\n                                            <i className={defaultOpen && defaultOpen[index] ? 'icon icon-ellipsis-v color-green' : 'icon icon-ellipsis-v'}></i>\r\n                                        </DropdownToggle>\r\n                                        <DropdownMenu className=\"suMenuDropdown\">\r\n                                            {\r\n                                                item.entity == 'network_add_user' && (\r\n                                                    <>\r\n                                                        <DropdownItem onClick={()=>acceptRequest(item.entity_id)}>Accept</DropdownItem>\r\n                                                        <DropdownItem onClick={()=>rejectRequest(item.entity_id)}>Reject</DropdownItem>\r\n                                                    </>\r\n                                                )\r\n                                            }\r\n                                            <DropdownItem onClick={()=>readNotification(item.notification_id)}>Mark as read</DropdownItem>\r\n                                        </DropdownMenu>\r\n                                    </ButtonDropdown>\r\n                                </DropdownItem>\r\n                            )\r\n                        }) : <DropdownItem>No Notification Available!</DropdownItem>\r\n                    }\r\n                </DropdownMenu>\r\n            </ButtonDropdown>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        notification: state.user.notification || [],\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    readNotification,\r\n    getNotification,\r\n    acceptRequest, \r\n    rejectRequest\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notification);","/Users/appleapple/Downloads/loop/src/features/dashboard/common/chat/Chat.tsx",["856","857","858","859","860","861","862","863","864"],"import React from 'react';\r\nimport './Chat.scss';\r\n// import { Button } from 'reactstrap';\r\nimport profile from '../../../../assets/images/profile.png'\r\nimport { Button } from 'reactstrap';\r\n\r\nclass Chat extends React.Component<{}> {\r\n    \r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n\r\n    render() { \r\n        return(\r\n            <div className=\"collaboratorsChat virtual-chat-side\">\r\n\r\n                <Button className=\"go-back\">\r\n                    <span className=\"icon-long-right-arrow\"></span> Go Back\r\n                </Button>\r\n                <div className=\"collab-profile\">\r\n                    <div>\r\n                        <img src={profile} />\r\n                        <img src={profile} />\r\n                        <img src={profile} />\r\n                        <img src={profile} />\r\n                        <img src={profile} />\r\n                    </div>\r\n                    <h1>5 Collaborators</h1>\r\n\r\n                </div>\r\n                <div className=\"chatting-section\">\r\n                    <div className=\"gradiant-chat\"></div>\r\n                    <div className=\"row m-0\">\r\n                        <div className=\"col-md-12 left-chat\">\r\n                            <div className=\"image\">\r\n                                <img src={profile} />\r\n                            </div>\r\n                            <div className=\"message-box \">\r\n                                <p>Odio euismod lacinia at quis risus sed. Congue eu consequat ac felis.</p>\r\n                                <span className=\"time\">13:51</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                     \r\n                    <div className=\"text-center no-message\">\r\n                        <p>Yesterday</p>\r\n                    </div>\r\n                    <div className=\"row m-0 justify-content-end\">\r\n                        <div className=\"col-md-12 right-chat mb-0\">\r\n                            <div className=\"message-box chat-tringle\">\r\n                                <p>Odio euismod lacinia at quis risus sed. Congue eu consequat ac felis.</p>\r\n                                <span className=\"time\">13:51</span>\r\n                            </div>\r\n                            <div className=\"image\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row m-0 justify-content-end\">\r\n                        <div className=\"col-md-12 right-chat \">\r\n                            \r\n                            <div className=\"message-box\">\r\n                                <p>Odio euismod lacinia at quis risus sed. Congue eu consequat ac felis.</p>\r\n                                <span className=\"time\">13:51</span>\r\n                            </div>\r\n                            <div className=\"image\">\r\n                                <img src={profile} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"row m-0\">\r\n                        <div className=\"col-md-12 left-chat\">\r\n                            <div className=\"image\">\r\n                                <img src={profile} />\r\n                            </div>\r\n                            <div className=\"message-box\">\r\n                                <p>Odio euismod lacinia at quis risus sed. Congue eu consequat ac felis.</p>\r\n                                <span className=\"time\">13:51</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row header-footer m-0\">\r\n                    <div className=\"col-md-12\">\r\n                        <input className=\"form-control\" placeholder=\"Enter your message\"/>\r\n                        <span className=\"icon-paperclip\"></span>\r\n                        <span className=\"icon-paper-plane\"></span>\r\n                    </div>\r\n                </div> \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Chat;","/Users/appleapple/Downloads/loop/src/features/dashboard/common/project-table/ProjectTable.tsx",["865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901","902","903"],"import React, { useState, useEffect } from 'react';\r\nimport './ProjectTable.scss';\r\nimport {\r\n  Table,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  Row,\r\n  Col,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  ButtonDropdown,\r\n  DropdownItem,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n} from 'reactstrap';\r\nimport emma from '../../../../assets/images/emma.png';\r\nimport audioProfile from '../../../../assets/images/audioProfile.png';\r\nimport audio1 from '../../../../assets/images/audio1.png';\r\nimport YourNetwork from '../your_network/YourNetwork';\r\nimport {\r\n  getProjects,\r\n  projectDelete,\r\n  projectAddAsArchive, \r\n  projectRemoveArchive,\r\n} from '../../../../redux/project/action';\r\nimport { myNetwork, removeNetwork } from '../../../../redux/network/action';\r\nimport { discoverMyNetworkData } from '../../../../redux/discovery/action';\r\nimport util from '../../../../utils/Util';\r\nimport { connect } from 'react-redux';\r\nimport { parseInt } from 'lodash';\r\nimport { History } from 'history';\r\nimport { createConversation } from '../../../../redux/user/action';\r\nimport _ from 'lodash';\r\n\r\nconst HubHeader = (hubPage: any, titlesDataMyNet: any) => {\r\n  const user = JSON.parse(JSON.stringify(localStorage.getItem('userData')));\r\n  let parsedUser: any = {};\r\n  if (user) {\r\n    parsedUser = JSON.parse(user);\r\n  }\r\n  const handleChange = (event: any, type: string) => {\r\n    hubPage.onfilterKeyChanged &&\r\n      hubPage.onfilterKeyChanged(type, event.target.checked);\r\n  };\r\n  const myDate = new Date();\r\n  const hrs = myDate.getHours();\r\n \r\n  \r\n\r\n  const data = hubPage && hubPage.titlesDataMyNet\r\n  const title = !_.isEmpty(data) && _.toArray(data).find(element => element.place === 'title')\r\n  const description = !_.isEmpty(data) && _.toArray(data).find(element => element.place === 'description')\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"top-head\">\r\n        <div>\r\n          <h1>\r\n            {hubPage.hubPage === 'home' &&\r\n              `${hrs < 12 ? 'Good Morning' : (hrs >= 12 && hrs <= 17) ? 'Good Afternoon' : (hrs >= 17 && hrs <= 24) ? 'Good Evening' : null }, ${parsedUser.first_name || ''}`}\r\n            {hubPage.hubPage === 'studio' && 'Studio'}\r\n            {hubPage.hubPage === 'myNetwork' && title && title.text}\r\n          </h1>\r\n          <p>\r\n            {hubPage.hubPage === 'home' && 'Your Hub Dashboard'}\r\n            {hubPage.hubPage === 'studio' &&\r\n              'All of your projects, current and archived'}\r\n            {hubPage.hubPage === 'myNetwork' && description && description.text}\r\n          </p>\r\n        </div>\r\n        <div className=\"search-field\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            onChange={(event: any) => {\r\n              hubPage.onSearch && hubPage.onSearch(event.target.value);\r\n            }}\r\n          />\r\n          <i className=\"icon icon-search\" />\r\n        </div>\r\n      </div>\r\n\r\n      {hubPage.hubPage != 'myNetwork' && (\r\n        <div className=\"sub-header\">\r\n          <h2>\r\n            {hubPage.hubPage === 'home' && 'Current Projects'}\r\n            {hubPage.hubPage === 'studio' && 'All Projects'}\r\n            {hubPage.hubPage === 'myNetwork' && 'Studio'}\r\n          </h2>\r\n          {hubPage.hubPage === 'studio' && (\r\n            <div className=\"filter-section\">\r\n              <p>\r\n                <input\r\n                  type=\"radio\"\r\n                  id=\"test1\"\r\n                  name=\"all\"\r\n                  defaultChecked\r\n                  onChange={(event: any) => handleChange(event, 'all')}\r\n                />\r\n                <label htmlFor=\"test1\">All</label>\r\n              </p>\r\n              <p>\r\n                <input\r\n                  type=\"radio\"\r\n                  id=\"test2\"\r\n                  name=\"all\"\r\n                  onChange={(event: any) => handleChange(event, 'current')}\r\n                />\r\n                <label htmlFor=\"test2\">Current</label>\r\n              </p>\r\n              <p>\r\n                <input\r\n                  type=\"radio\"\r\n                  id=\"test3\"\r\n                  name=\"all\"\r\n                  onChange={(event: any) => handleChange(event, 'archived')}\r\n                />\r\n                <label htmlFor=\"test3\">Archive</label>\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\ntype DropDownCustomProps = {\r\n  update: any;\r\n  index: any;\r\n  item: any;\r\n  defaultOpen: any;\r\n  setDefaultOpen: any;\r\n  userinfo?: any;\r\n  historyProp?:any;\r\n  removeNetwork?:any;\r\n  myNetwork?:any;\r\n};\r\n\r\nconst DropDownCustom = ({\r\n  update,\r\n  index,\r\n  item,\r\n  defaultOpen,\r\n  setDefaultOpen,\r\n}: DropDownCustomProps) => {\r\n  const toggle = () => {\r\n    setDefaultOpen({\r\n      [index]: !defaultOpen[index] ? true : false,\r\n    });\r\n  };\r\n  return (\r\n    <ButtonDropdown isOpen={defaultOpen[index]} onClick={toggle}>\r\n      <DropdownToggle aria-expanded={defaultOpen[index]}>\r\n        <i\r\n          className={\r\n            defaultOpen[index]\r\n              ? 'icon icon-ellipsis-v color-green'\r\n              : 'icon icon-ellipsis-v'\r\n          }\r\n        />\r\n      </DropdownToggle>\r\n      <DropdownMenu\r\n        className=\"suMenuDropdown\"\r\n        style={{ background: '#2a2a2a' }}\r\n      >\r\n        {item.status === 'current' ? (\r\n          <DropdownItem onClick={() => update(index, false)}>\r\n            Archive\r\n          </DropdownItem>\r\n        ) : (\r\n          <DropdownItem onClick={() => update(index, false)}>\r\n            Current\r\n          </DropdownItem>\r\n        )}\r\n        <DropdownItem onClick={() => update(index, true)}>Delete</DropdownItem>\r\n      </DropdownMenu>\r\n    </ButtonDropdown>\r\n  );\r\n};\r\n\r\nconst DropDownCustomMyNetwork = ({\r\n  update,\r\n  index,\r\n  item,\r\n  defaultOpen,\r\n  setDefaultOpen,\r\n  userinfo,\r\n  historyProp,\r\n  removeNetwork,\r\n  myNetwork\r\n}: DropDownCustomProps) => {\r\n  const [removeNetwork1, setRemoveNetwork] = React.useState(false);\r\n  const toggle = () => {\r\n    setDefaultOpen({\r\n      [index]: !defaultOpen[index] ? true : false,\r\n    });\r\n  };\r\n\r\n  const createNewConversation = () => {\r\n    createConversation({\r\n      type: 'direct',\r\n      title: item.first_name\r\n        ? `${item.first_name} ${item.last_name}`\r\n        : item.email,\r\n      desc: '',\r\n      usersId: userinfo && userinfo.userId,\r\n      isPublic: true,\r\n      isUber: true,\r\n      avatar: '',\r\n    });\r\n  };\r\n\r\n  const backToDiscover = () => {\r\n    historyProp.push('/discover');\r\n  };\r\n\r\n  const removeFromNetwork = () => {\r\n    removeNetwork(item.user_id).then((data: any) => {\r\n      myNetwork()\r\n      setRemoveNetwork(!removeNetwork1)\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ButtonDropdown isOpen={defaultOpen[index]} onClick={toggle}>\r\n        <DropdownToggle aria-expanded={defaultOpen[index]}>\r\n          <i\r\n            className={\r\n              defaultOpen[index]\r\n                ? 'icon icon-ellipsis-v color-green'\r\n                : 'icon icon-ellipsis-v'\r\n            }\r\n          />\r\n        </DropdownToggle>\r\n        <DropdownMenu\r\n          className=\"suMenuDropdown suMenuDropdownMyNetwork\"\r\n          style={{ background: '#2a2a2a' }}\r\n        >\r\n          <DropdownItem onClick={()=>removeFromNetwork()}>\r\n            Remove from\r\n            Network\r\n          </DropdownItem>\r\n          {userinfo && userinfo.userId && (\r\n            <DropdownItem onClick={() => createNewConversation()}>\r\n              Chat\r\n            </DropdownItem>\r\n          )}\r\n        </DropdownMenu>\r\n      </ButtonDropdown>\r\n      <Modal\r\n        isOpen={removeNetwork1}\r\n        toggle={()=>setRemoveNetwork(!removeNetwork1)}\r\n        className=\"add-to-netwok-modal\"\r\n      >\r\n        <ModalHeader toggle={()=>setRemoveNetwork(!removeNetwork1)}> </ModalHeader>\r\n        <ModalBody>\r\n          <h2>\r\n            {`${item.first_name || ''} ${item.last_name || ''}`} has been\r\n            removed from your network\r\n          </h2>\r\n          <img src={item.photo || emma} />\r\n          <h1>{`${item.first_name || ''} ${item.last_name || ''}`}</h1>\r\n          <p>\r\n            {item.expertise &&\r\n              item.expertise\r\n                .map((item: any) => item && item.name)\r\n                .join(' | ')}\r\n          </p>\r\n          <Button\r\n            className=\"button-btnGradiant chat-btn\"\r\n            onClick={backToDiscover}\r\n          >\r\n            <i className=\"icon icon-comments\" /> Back to Discover\r\n          </Button>\r\n        </ModalBody>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst DesktopView = (hubPage: {\r\n  voxUser: any[];\r\n  onOptionClicked: (id: string, isDelete: boolean, isArchive: boolean) => void;\r\n  onClickItem: (type: string, data: any, option?: string | undefined) => void;\r\n  filterType: string;\r\n  hubPage: string;\r\n  projectList: any[];\r\n  networkList: any[];\r\n  historyProp: any;\r\n  removeNetwork: any;\r\n  myNetwork: any;\r\n}) => {\r\n  const projectList =\r\n    hubPage.hubPage == 'studio' && hubPage.filterType != 'all'\r\n      ? hubPage.projectList.filter((item: any) => {\r\n          return item.status == hubPage.filterType;\r\n        })\r\n      : hubPage.projectList;\r\n\r\n  const [defaultOpen, setDefaultOpen] = useState({});\r\n  const update = (index: number, isDelete: boolean) => {\r\n    hubPage.onOptionClicked(\r\n      projectList[index].project_id,\r\n      isDelete,\r\n      projectList[index].status != 'current'\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Table className=\"project-table\">\r\n        <thead>\r\n          {hubPage.hubPage != 'myNetwork' && (\r\n            <tr>\r\n              <th>TITLE</th>\r\n              <th>COLLABORATORS</th>\r\n              {hubPage.hubPage === 'studio' && <th>CREATED</th>}\r\n              <th>LAST OPENED</th>\r\n              {hubPage.hubPage === 'studio' && <th>STATUS</th>}\r\n              <th />\r\n            </tr>\r\n          )}\r\n          {hubPage.hubPage === 'myNetwork' && (\r\n            <tr>\r\n              <th>NAME</th>\r\n              <th>SKILL</th>\r\n              <th>GENRE</th>\r\n              <th>HOME</th>\r\n              <th>UPCOMING TRIPS</th>\r\n              <th>STATUS</th>\r\n              <th />\r\n            </tr>\r\n          )}\r\n        </thead>\r\n        <tbody>\r\n          {hubPage.hubPage != 'myNetwork' && (\r\n            <>\r\n              {projectList &&\r\n                projectList.map((item, index) => (\r\n                  <tr\r\n                    onClick={() => {\r\n                      hubPage.onClickItem(ACTION_TYPE.PROJECT, item, undefined);\r\n                    }}\r\n                  >\r\n                    <td>\r\n                      <div className=\"d-flex title-td\">\r\n                        <img src={item.cover_image} />\r\n                        <span>{item.name}</span>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <div className=\"d-flex  colblab-td\">\r\n                        {item.collaborator &&\r\n                          Array.isArray(item.collaborator) &&\r\n                          item.collaborator.map((mem: any) => {\r\n                            return <img src={mem.image || audio1} />;\r\n                          })}\r\n                        <span>{`${item.collaborator.length} Collaborator${\r\n                          item.collaborator.length > 1 ? 's' : ''\r\n                        }`}</span>\r\n                      </div>\r\n                    </td>\r\n                    {hubPage.hubPage === 'studio' && (\r\n                      <td>{util.getFormattedDate(item.created_at)}</td>\r\n                    )}\r\n                    <td>{util.getFormattedDate(item.last_updated_time)}</td>\r\n                    {hubPage.hubPage === 'studio' && <td>{item.status}</td>}\r\n\r\n                    <td\r\n                      onClick={e => e.stopPropagation()}\r\n                      className=\"table-dropdown\"\r\n                    >\r\n                      <DropDownCustom\r\n                        update={update}\r\n                        index={index}\r\n                        item={item}\r\n                        defaultOpen={defaultOpen}\r\n                        setDefaultOpen={setDefaultOpen}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </>\r\n          )}\r\n\r\n          {/* network row */}\r\n          {hubPage.hubPage === 'myNetwork' && (\r\n            <>\r\n              {hubPage.networkList &&\r\n                hubPage.networkList.map((item: any, index: any) => {\r\n                  const userName = `${item.email.replace(\r\n                    '@',\r\n                    '-loop-'\r\n                  )}@loop.cocoworth`;\r\n                  const userinfo = hubPage.voxUser.find(\r\n                    (item: any) => item.userName === userName\r\n                  );\r\n                  return (\r\n                    <tr\r\n                      onClick={() => {\r\n                        hubPage.onClickItem(\r\n                          ACTION_TYPE.NETWORK,\r\n                          item,\r\n                          undefined\r\n                        );\r\n                      }}\r\n                    >\r\n                      <td>\r\n                        <div className=\"d-flex title-td\">\r\n                          <img src={item.photo || audio1} />\r\n                          <span>{`${item.first_name || ''} ${item.last_name ||\r\n                            ''}`}</span>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        {item.expertise &&\r\n                          item.expertise[0] &&\r\n                          item.expertise[0].name}\r\n                      </td>\r\n                      <td>\r\n                        {item.genre && item.genre[0] && item.genre[0].name}\r\n                      </td>\r\n                      <td>{item.location && item.location.location}</td>\r\n                      <td>\r\n                        <div className=\"d-flex\">\r\n                          {item.trip.map((el: any, i: any) => {\r\n                            return (\r\n                              <>\r\n                                <span>{el.trip} </span>\r\n                                {el.trip && item.trip.length - 1 !== i && (\r\n                                  <i className=\"icon-long-right-arrow\" />\r\n                                )}\r\n                              </>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        {userinfo && userinfo.online ? (\r\n                          <span className=\"status-custom online\">Online</span>\r\n                        ) : (\r\n                          <span className=\"status-custom offline\">\r\n                            Offiline\r\n                          </span>\r\n                        )}\r\n                      </td>\r\n                      <td\r\n                        onClick={e => e.stopPropagation()}\r\n                        className=\"table-dropdown\"\r\n                      >\r\n                        <DropDownCustomMyNetwork\r\n                          update={update}\r\n                          index={index}\r\n                          item={item}\r\n                          defaultOpen={defaultOpen}\r\n                          setDefaultOpen={setDefaultOpen}\r\n                          userinfo={userinfo}\r\n                          historyProp={hubPage.historyProp}\r\n                          removeNetwork={hubPage.removeNetwork}\r\n                          myNetwork={hubPage.myNetwork}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </>\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MobileView = (hubPage: {\r\n  onOptionClicked: (id: string, isDelete: boolean, isArchive: boolean) => void;\r\n  onClickItem: (type: string, data: any, option?: string | undefined) => void;\r\n  filterType: string;\r\n  hubPage: string;\r\n  projectList: any[];\r\n  networkList: any[];\r\n}) => {\r\n  const projectList =\r\n    hubPage.hubPage == 'studio' && hubPage.filterType != 'all'\r\n      ? hubPage.projectList.filter((item: any) => {\r\n          return item.status == hubPage.filterType;\r\n        })\r\n      : hubPage.projectList;\r\n\r\n  const renderItem = (index: number, list: any[], type: string) => {\r\n    let item1 = list[index * 2];\r\n    let item2 = list[index * 2 + 1];\r\n\r\n    return (\r\n      <Row>\r\n        {item1 ? (\r\n          type == 'home' ? (\r\n            RenderHomeCard(item1, index)\r\n          ) : type == 'studio' ? (\r\n            RenderStudioCard(item1, index)\r\n          ) : type == 'myNetwork' ? (\r\n            RenderConnectionCard(item1, index)\r\n          ) : (\r\n            <></>\r\n          )\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {item2 ? (\r\n          type == 'home' ? (\r\n            RenderHomeCard(item2, index)\r\n          ) : type == 'studio' ? (\r\n            RenderStudioCard(item2, index)\r\n          ) : type == 'myNetwork' ? (\r\n            RenderConnectionCard(item2, index)\r\n          ) : (\r\n            <></>\r\n          )\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Row>\r\n    );\r\n  };\r\n\r\n  const RenderHomeCard = (item: any, index: any) => {\r\n\r\n    const [defaultOpen, setDefaultOpen] = useState({});\r\n    const update = (index: number, isDelete: boolean) => {\r\n      hubPage.onOptionClicked(\r\n        projectList[index].project_id,\r\n        isDelete,\r\n        projectList[index].status != 'current'\r\n      );\r\n    };\r\n\r\n    return (\r\n      <Col\r\n        className=\"col-md-6\"\r\n        onClick={() => {\r\n          hubPage.onClickItem(ACTION_TYPE.PROJECT, item, undefined);\r\n        }}\r\n      >\r\n        <Card className=\"p-0\">\r\n          <img src={item.cover_image || audioProfile} className=\"w-100\" />\r\n          <CardBody>\r\n            <div className=\"d-flex justify-content-between\">\r\n              <div>\r\n                <p>TITLE</p>\r\n                <p>{item.name}</p>\r\n                <p>COLLABORATORS</p>\r\n                <p>\r\n                  {`${item.collaborator.length} Collaborator${\r\n                    item.collaborator.length > 1 ? 's' : ''\r\n                  }`}\r\n                </p>\r\n                <p>LAST OPENED</p>\r\n                <p>{util.getFormattedDate(item.created_at)}</p>\r\n              </div>\r\n\r\n              <div onClick={(e) => e.stopPropagation()}>\r\n                {/* <i className=\"icon icon-ellipsis-v\" /> */}\r\n                <DropDownCustom\r\n                  update={update}\r\n                  index={index}\r\n                  item={item}\r\n                  defaultOpen={defaultOpen}\r\n                  setDefaultOpen={setDefaultOpen}\r\n                />\r\n              </div>\r\n            </div>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    );\r\n  };\r\n\r\n  const RenderStudioCard = (item: any, index: any) => {\r\n    const [defaultOpen, setDefaultOpen] = useState({});\r\n    const update = (index: number, isDelete: boolean) => {\r\n      hubPage.onOptionClicked(\r\n        projectList[index].project_id,\r\n        isDelete,\r\n        projectList[index].status != 'current'\r\n      );\r\n    };\r\n    return (\r\n      <Col\r\n        className=\"col-md-6\"\r\n        onClick={() => {\r\n          hubPage.onClickItem(ACTION_TYPE.PROJECT, item, undefined);\r\n        }}\r\n      >\r\n        <Card className=\"p-0\">\r\n          <img\r\n            src={item.cover_image || audioProfile}\r\n            className=\"w-100\"\r\n          />\r\n          <CardBody>\r\n            <div className=\"d-flex justify-content-between\">\r\n              <div>\r\n                <p>TITLE</p>\r\n                <p>{item.name}</p>\r\n                <p>COLLABORATORS</p>\r\n                <p>{`${item.collaborator.length} Collaborator${\r\n                  item.collaborator.length > 1 ? 's' : ''\r\n                }`}</p>\r\n                <p>CREATED</p>\r\n                <p>{util.getFormattedDate(item.created_at)}</p>\r\n                <p>LAST OPENED</p>\r\n                <p>{util.getFormattedDate(item.last_updated_time)}</p>\r\n                <p>STATUS</p>\r\n                <p>{item.status}</p>\r\n              </div>\r\n\r\n              <div onClick={(e) => e.stopPropagation()}>\r\n                {/* <i className=\"icon icon-ellipsis-v\" /> */}\r\n                <DropDownCustom\r\n                  update={update}\r\n                  index={index}\r\n                  item={item}\r\n                  defaultOpen={defaultOpen}\r\n                  setDefaultOpen={setDefaultOpen}\r\n                />\r\n              </div>\r\n            </div>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    );\r\n  };\r\n\r\n  const RenderConnectionCard = (item: any, index: any) => {\r\n    const [defaultOpen, setDefaultOpen] = useState({});\r\n    const update = (index: number, isDelete: boolean) => {\r\n      hubPage.onOptionClicked(\r\n        projectList[index].project_id,\r\n        isDelete,\r\n        projectList[index].status != 'current'\r\n      );\r\n    };\r\n    return (\r\n      <Col\r\n        className=\"col-md-6\"\r\n        onClick={() =>\r\n          hubPage.onClickItem(ACTION_TYPE.NETWORK, item, undefined)\r\n        }\r\n      >\r\n        <Card className=\"p-0\">\r\n          <img src={item.photo || audioProfile} className=\"w-100\" />\r\n          <CardBody>\r\n            <div className=\"d-flex justify-content-between\">\r\n              <div>\r\n                <p>NAME</p>\r\n                <p>{`${item.first_name || ''} ${item.last_name || ''}`}</p>\r\n                <p>SKILL</p>\r\n                <p>\r\n                  {item.expertise &&\r\n                    item.expertise[0] &&\r\n                    item.expertise[0].name}\r\n                </p>\r\n                <p>GENRE</p>\r\n                <p> {item.genre && item.genre[0] && item.genre[0].name}</p>\r\n                <p>HOME</p>\r\n                <p>{item.location && item.location.location}</p>\r\n                <p>UPCOMING TRIPS</p>\r\n                <p className=\"d-flex mobile-upcoming\">\r\n                  {item.trip.map((el: any, i: any) => {\r\n                    return (\r\n                      <div className=\"d-flex\">\r\n                        <span>{el.trip} </span>\r\n                        {el.trip && item.trip.length - 1 !== i && (\r\n                          <i className=\"icon-long-right-arrow\" />\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </p>\r\n                <p>STATUS</p>\r\n                <p>\r\n                  <span className=\"status-custom\">Online</span>\r\n                </p>\r\n              </div>\r\n              <div onClick={(e) => e.stopPropagation()}>\r\n                {/* <i className=\"icon icon-ellipsis-v\" /> */}\r\n                <DropDownCustom\r\n                  update={update}\r\n                  index={index}\r\n                  item={item}\r\n                  defaultOpen={defaultOpen}\r\n                  setDefaultOpen={setDefaultOpen}\r\n                />\r\n              </div>\r\n            </div>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    );\r\n  };\r\n\r\n  const renderList = () => {\r\n    let result: any = <></>;\r\n\r\n    if (hubPage.hubPage == 'home') {\r\n      let count = parseInt(hubPage.projectList.length / 2 + '');\r\n      count += hubPage.projectList.length % 2;\r\n      if (count > 0) {\r\n        result = new Array(count).fill(0).map((item: any, index: number) => {\r\n          return renderItem(index, hubPage.projectList, hubPage.hubPage);\r\n        });\r\n      }\r\n    } else if (hubPage.hubPage == 'studio') {\r\n      let count = parseInt(projectList.length / 2 + '');\r\n      count += projectList.length % 2;\r\n      if (count > 0) {\r\n        result = new Array(count)\r\n          .fill(0)\r\n          .map((item: any, index: number) =>\r\n            renderItem(index, projectList, hubPage.hubPage)\r\n          );\r\n      }\r\n    } else if (hubPage.hubPage == 'myNetwork') {\r\n      let count = parseInt(hubPage.networkList.length / 2 + '');\r\n      count += hubPage.networkList.length % 2;\r\n      if (count > 0) {\r\n        result = new Array(count)\r\n          .fill(0)\r\n          .map((item: any, index: number) =>\r\n            renderItem(index, hubPage.networkList, hubPage.hubPage)\r\n          );\r\n      }\r\n    }\r\n    return <>{result}</>;\r\n  };\r\n\r\n  return <div className=\"mobile-view\">{renderList()}</div>;\r\n};\r\n\r\nclass ProjectTable extends React.Component<IProps, IState> {\r\n  readonly state: IState = {\r\n    network: false,\r\n    mediaState: window.matchMedia('(min-width: 768px)').matches,\r\n    filterType: 'all',\r\n    searchKey: '',\r\n    filteredProjectList: [],\r\n    filteredMyNetworkList: [],\r\n  };\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.props.discoverMyNetworkData();\r\n    if (this.props.hubPage == 'home') {\r\n      this.props.getProjects();\r\n    } else if (this.props.hubPage == 'studio') {\r\n      this.props.getProjects();\r\n    } else if (this.props.hubPage == 'myNetwork') {\r\n      this.props.myNetwork();\r\n    }\r\n  }\r\n\r\n  toggleNetwork = () => {\r\n    this.setState({ network: !this.state.network });\r\n  };\r\n\r\n  componentDidUpdate(props: IProps) {\r\n    if (props.projectList != this.props.projectList) {\r\n      this.onSearch(this.state.searchKey);\r\n    }\r\n    if (props.myNetworkList != this.props.myNetworkList) {\r\n      this.onSearch(this.state.searchKey);\r\n    }\r\n  }\r\n\r\n  onMenuClicked = (type: string, data: any, option?: string | undefined) => {\r\n    switch (type) {\r\n      case ACTION_TYPE.NETWORK:\r\n        this.props.history.push(`/discovery/view-profile/${data.user_id}`);\r\n        break;\r\n      case ACTION_TYPE.PROJECT:\r\n        this.props.history.push(`/hub/project/${data.project_id}`);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  onSearch = (searchKey: string) => {\r\n    let { filteredProjectList, filteredMyNetworkList } = this.state;\r\n    let { hubPage, projectList, myNetworkList } = this.props;\r\n\r\n    searchKey = searchKey.toLowerCase();\r\n    if (hubPage == 'myNetwork') {\r\n      filteredMyNetworkList = myNetworkList.filter((item: any) =>\r\n        `${item.first_name} ${item.last_name}`.toLowerCase().includes(searchKey)\r\n      );\r\n    } else {\r\n      filteredProjectList = projectList.filter((item: any) =>\r\n        item.name.toLowerCase().includes(searchKey)\r\n      );\r\n    }\r\n    this.setState({ searchKey, filteredProjectList, filteredMyNetworkList });\r\n  };\r\n\r\n  update = (id: string, isDelete: boolean, isArchive: boolean) => {\r\n    if (isDelete) {\r\n      this.props.projectDelete(id).then((res: any) => this.props.getProjects());\r\n    } else if (isArchive) {\r\n      this.props\r\n        .projectRemoveArchive(id)\r\n        .then((res: any) => this.props.getProjects());\r\n    } else if (!isArchive) {\r\n      this.props\r\n        .projectAddAsArchive(id)\r\n        .then((res: any) => this.props.getProjects());\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { hubPage, projectList, myNetworkList, voxUser } = this.props;\r\n    const titlesDataMynet = this.props && this.props.myNetworkDataTitle;\r\n\r\n    let {\r\n      mediaState,\r\n      network,\r\n      filterType,\r\n      filteredMyNetworkList,\r\n      filteredProjectList,\r\n    } = this.state;\r\n    return (\r\n      <div className=\"hub-page\">\r\n        <HubHeader\r\n          hubPage={hubPage}\r\n          onSearch={this.onSearch}\r\n          onfilterKeyChanged={(type: string, checked: boolean) =>\r\n            this.setState({ filterType: type })\r\n          }\r\n          titlesDataMyNet={titlesDataMynet}\r\n\r\n        />\r\n\r\n        {mediaState ? (\r\n          <DesktopView\r\n            voxUser={voxUser}\r\n            onOptionClicked={this.update}\r\n            onClickItem={this.onMenuClicked}\r\n            hubPage={hubPage}\r\n            filterType={filterType}\r\n            projectList={filteredProjectList}\r\n            networkList={filteredMyNetworkList}\r\n            historyProp={this.props.history}\r\n            removeNetwork={this.props.removeNetwork}\r\n            myNetwork={this.props.myNetwork}\r\n          />\r\n        ) : (\r\n          <MobileView\r\n            onOptionClicked={this.update}\r\n            hubPage={hubPage}\r\n            onClickItem={this.onMenuClicked}\r\n            filterType={filterType}\r\n            projectList={filteredProjectList}\r\n            networkList={filteredMyNetworkList}\r\n          />\r\n        )}\r\n        <Button className=\"network-btn\" onClick={this.toggleNetwork}>\r\n          <i className=\"icon icon-network\" />\r\n        </Button>\r\n        {network && (\r\n          <YourNetwork toggleNetwork={this.toggleNetwork} network={network} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface IState {\r\n  mediaState: React.SetStateAction<boolean>;\r\n  network: boolean;\r\n  filterType: string;\r\n  searchKey: string;\r\n  filteredProjectList: any[];\r\n  filteredMyNetworkList: any[];\r\n}\r\n\r\ninterface IProps {\r\n  hubPage: any;\r\n  projectDelete: (id: string) => Promise<any>;\r\n  projectAddAsArchive: (id: string) => Promise<any>;\r\n  projectRemoveArchive: (id: string) => Promise<any>;\r\n  getProjects: () => Promise<any>;\r\n  myNetwork: () => Promise<any>;\r\n  projectList: any[];\r\n  myNetworkList: any[];\r\n  history: History;\r\n  voxUser: any[];\r\n  removeNetwork: () => Promise<any>;\r\n  discoverMyNetworkData: any;\r\n  myNetworkDataTitle: any;\r\n}\r\n\r\nconst ACTION_TYPE = {\r\n  NETWORK: 'NETWORK',\r\n  PROJECT: 'PROJECT',\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    projectList: state.project.projectList || [],\r\n    myNetworkList: state.network.myNetwork || [],\r\n    myNetworkDataTitle: state.discovery.myNetData, \r\n    voxUser:\r\n      (!_.isEmpty(state.user.vox_users) && state.user.vox_users.users) || [],\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getProjects,\r\n  myNetwork,\r\n  projectDelete,\r\n  projectAddAsArchive,\r\n  projectRemoveArchive,\r\n  removeNetwork,\r\n  discoverMyNetworkData\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ProjectTable);\r\n","/Users/appleapple/Downloads/loop/src/features/dashboard/common/add_collaborators/AddCollaborators.tsx",["904","905","906","907","908","909","910","911"],"import React, { useState, useEffect }  from 'react';\r\nimport { Modal, ModalHeader, ModalBody, Button } from 'reactstrap';\r\nimport './AddCollaborators.scss'\r\nimport profileImg from \"../../../../assets/images/profile.png\"\r\nimport { toast } from 'react-toastify';\r\ninterface AddCollaboratorsProps  {\r\n    modalAddCollaborators: boolean,\r\n    toggleAddCollaborators(): void,\r\n    addCollaborators: (collaborators: string[])=> void;\r\n    connections: any[];\r\n    selectedCollaborator: any[];\r\n}\r\n\r\nconst AddCollaborators = (props: AddCollaboratorsProps) => {\r\n\r\n    const [connection, setconnection] = useState<any[]>(props.connections);\r\n    const [collaborator, setCollaborator] = useState<string[]>([]);\r\n    const [key, setKey] = useState();\r\n\r\n    const onSearch = (event: any) => {\r\n        const key = event.target.value          \r\n        setconnection(props.connections.filter((item: any) => `${item.first_name || ''} ${item.last_name || ''}`.toLowerCase().includes(key.toLowerCase()) ))\r\n    }\r\n\r\n    const handleCollborator = (id: string, status: boolean) => {\r\n            const index = collaborator.findIndex((item: string) => item == id);\r\n            if(index > -1){\r\n                collaborator.splice(index, 1);\r\n            }else{\r\n                collaborator.push(id);\r\n            }\r\n        let newCollabortor = [...collaborator]\r\n        setCollaborator(newCollabortor);\r\n    }\r\n\r\n    useEffect(() => { \r\n        setCollaborator(props.selectedCollaborator);\r\n        setconnection(props.connections.filter((item: any) => `${item.first_name || ''} ${item.last_name || ''}`.toLowerCase().includes((key && key || '').toLowerCase()) ))\r\n    },[props.connections])\r\n \r\n    return(\r\n        <Modal isOpen={props.modalAddCollaborators} toggle={props.toggleAddCollaborators}   className=\"add-to-netwok-modal upload-modal add-collaborators\">\r\n        <ModalHeader toggle={props.toggleAddCollaborators}  > </ModalHeader>\r\n        <ModalBody>\r\n            <h2>Add Collaborators</h2>\r\n            <p className=\"pg-1\">Add members from your network to collaborate with you on this project</p>\r\n            <div className=\"search-field\">\r\n                    <input type=\"text\" placeholder=\"Search inside your network\" onChange={(event: any) => onSearch(event)} />\r\n                    <i className=\"icon icon-search;\"></i>\r\n            </div>\r\n            <div className=\"collab-list\">\r\n                { connection.map((item : any, index: number) => (\r\n                    <div className=\"collab-list-item\">\r\n                        <div>\r\n                            <div className=\"d-flex align-items-center\">\r\n                                {item.photo?<img src={item.photo} />:<div style={{backgroundColor:'white'}}></div>} \r\n                                <div className=\"text-left\">\r\n                                    <p>{`${item.first_name || ''} ${item.last_name || ''}`}</p>\r\n                                    <p>{ item.expertise && Array.isArray(item.expertise) && item.expertise.map((item : any) => item && item.name).join(\" | \") }</p>\r\n                                </div>  \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"round\">\r\n                            <input type=\"checkbox\" id={\"checkbox\"+item.user_id} checked={collaborator.includes(item.user_id)} onChange={( event: any ) =>  handleCollborator(item.user_id, event.target.checked)} />\r\n                            <label htmlFor={\"checkbox\"+item.user_id}></label>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n                     \r\n                }\r\n           </div>\r\n            \r\n            <Button className=\"button-btnGradiant chat-btn\" onClick={()=> props.addCollaborators(collaborator)}  >\r\n                <i className=\"icon-users \"></i>  Add to project\r\n            </Button>\r\n        </ModalBody>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default AddCollaborators;","/Users/appleapple/Downloads/loop/src/features/dashboard/common/upload_files/UploadFiles.tsx",[],"/Users/appleapple/Downloads/loop/src/features/dashboard/common/upload_track/UploadTrack.tsx",["912","913"],"import React, { useState, useEffect }  from 'react';\r\nimport { Modal, ModalHeader, ModalBody, Button, FormGroup, Label, Input } from 'reactstrap';\r\nimport './UploadTrack.scss'\r\nimport cover from '../../../../assets/images/cover.svg';\r\n// import { getAudioDurationInSeconds } from 'get-audio-duration';\r\n\r\ninterface UploadTrackProps  {\r\n    modalTrack: boolean,\r\n    toggleTrack(): void,\r\n    onClose?(data: TrackDataType | null): void\r\n}\r\n\r\ninterface TrackDataType {\r\n    imageFileName: string,\r\n    imageFile: FileList,\r\n    trackFileName: string,\r\n    trackFile: FileList,\r\n    title: string\r\n}\r\n\r\nconst UploadTrack = (props: UploadTrackProps) => {\r\n    const [title, setTitle] = useState<string>();\r\n    const [imageName, setImageName] = useState<string>();\r\n    const [imageFile, setImageFile] = useState<FileList | null>();\r\n    const [trackFile, setTrackFile] = useState<FileList | null>();\r\n    const [trackName, setTrackName] = useState<string>('');\r\n\r\n    const onChangeHandler = (type: string, event:  FileList | null) => {       \r\n        if(event){\r\n            const cover_image = URL.createObjectURL(event[0]);\r\n            //  getAudioDurationInSeconds(cover_image).then((duration) => {\r\n            //     console.log(duration);\r\n            // });\r\n            if(type == \"image\"){\r\n                setImageName(cover_image);\r\n                setImageFile(event);\r\n            }else{\r\n                setTrackFile(event);\r\n                setTrackName(event[0].name)\r\n            } \r\n        }\r\n    }\r\n\r\n    useEffect(() => { \r\n        setTitle(\"\");\r\n        setImageName(\"\");\r\n        setImageFile(null);\r\n        setTrackFile(null);\r\n        setTrackName(\"\");\r\n    }, [props.modalTrack])\r\n\r\n    const addTrack = () => { \r\n        if( title && imageName && imageFile && trackFile && trackName){\r\n            let data: TrackDataType = {\r\n                title: title,\r\n                imageFile: imageFile,\r\n                imageFileName: imageName,\r\n                trackFile: trackFile,\r\n                trackFileName: trackName\r\n            }\r\n            props.onClose && props.onClose(data);\r\n        }else{\r\n\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Modal isOpen={props.modalTrack} toggle={props.toggleTrack}  className=\"add-to-netwok-modal upload-modal track-modal\">\r\n            <ModalHeader toggle={props.toggleTrack}> </ModalHeader>\r\n            <ModalBody>\r\n                <h2>Upload Tracks</h2>\r\n                <p className=\"pg-1\">Any reference tracks or demos you want to upload to this project?</p>\r\n                <p className=\"text-left mt-4 mb-2\">Upload image for cover:</p>\r\n                <div className=\"upload-f-device\">\r\n                    <img src={ imageName || cover} />\r\n                    <div className=\"upload-devicebtn\">\r\n                        <input type=\"file\" name=\"file-1[]\" id=\"file-1\" accept=\".jpg,.JPG,.jpeg,.JPEG,.png,.PNG\"  onChange={(event) => onChangeHandler('image', event.target.files)} className=\"inputfile inputfile-1\" />\r\n                        <label htmlFor=\"file-1\"><i className=\"icon icon-share\"></i>  Upload from Device</label>\r\n                    </div>\r\n                </div>\r\n                <FormGroup>\r\n                    <Label className=\"text-left d-block\">Title:</Label>\r\n                    <Input type=\"text\" name=\"cardnumber\" id=\"cardid\" onChange={(event) => setTitle(event.target.value)} placeholder=\"Enter the title of the the track\" />\r\n                </FormGroup>\r\n                <FormGroup className=\"trackFile\">\r\n                    <Label  className=\"text-left d-block\">Upload track file:</Label>\r\n                    <Input type=\"textarea\" name=\"cardnumber\" id=\"cardid\"  value={trackName} placeholder=\"We support mp3, ogg, flac, mp4\" />\r\n                    <div className=\"upload-devicebtn\">\r\n                        <input type=\"file\" name=\"file-2[]\" id=\"file-2\"  accept=\".mp3,audio/*\"  onChange={(event) => onChangeHandler('memo', event.target.files)} className=\"inputfile inputfile-1\" />\r\n                        <label htmlFor=\"file-2\"><i className=\"icon icon-share\"></i>  Upload from Device</label>\r\n                    </div>\r\n                    <audio id=\"audio\" src={imageName} onChange={(e: any) => {\r\n                        //console.log(\"#current\", e);\r\n                        //console.log(\"#current file\", e.currentTarget);\r\n                        \r\n                    }} ></audio>\r\n                </FormGroup>\r\n                <Button className=\"button-btnGradiant chat-btn\" onClick={() => addTrack()}  >\r\n                    <i className=\"icon icon-play \"></i>  Add Track\r\n                </Button>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport type TrackFileType = TrackDataType\r\nexport  const UploadTrackModal = UploadTrack;",{"ruleId":"914","severity":1,"message":"915","line":11,"column":8,"nodeType":"916","messageId":"917","endLine":11,"endColumn":21},{"ruleId":"918","replacedBy":"919"},{"ruleId":"920","replacedBy":"921"},{"ruleId":"914","severity":1,"message":"922","line":1,"column":17,"nodeType":"916","messageId":"917","endLine":1,"endColumn":25},{"ruleId":"914","severity":1,"message":"923","line":1,"column":27,"nodeType":"916","messageId":"917","endLine":1,"endColumn":29},{"ruleId":"924","severity":1,"message":"925","line":11,"column":3,"nodeType":"926","messageId":"927","endLine":13,"endColumn":4},{"ruleId":"928","severity":1,"message":"929","line":12,"column":1,"nodeType":"930","endLine":16,"endColumn":3},{"ruleId":"928","severity":1,"message":"929","line":11,"column":1,"nodeType":"930","endLine":18,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":13,"column":1,"nodeType":"930","endLine":17,"endColumn":3},{"ruleId":"928","severity":1,"message":"929","line":7,"column":1,"nodeType":"930","endLine":11,"endColumn":3},{"ruleId":"928","severity":1,"message":"929","line":7,"column":1,"nodeType":"930","endLine":11,"endColumn":3},{"ruleId":"928","severity":1,"message":"929","line":7,"column":1,"nodeType":"930","endLine":11,"endColumn":3},{"ruleId":"928","severity":1,"message":"929","line":7,"column":1,"nodeType":"930","endLine":11,"endColumn":3},{"ruleId":"928","severity":1,"message":"929","line":7,"column":1,"nodeType":"930","endLine":11,"endColumn":3},{"ruleId":"928","severity":1,"message":"929","line":7,"column":1,"nodeType":"930","endLine":11,"endColumn":3},{"ruleId":"914","severity":1,"message":"931","line":5,"column":10,"nodeType":"916","messageId":"917","endLine":5,"endColumn":15},{"ruleId":"914","severity":1,"message":"932","line":22,"column":8,"nodeType":"916","messageId":"917","endLine":22,"endColumn":21},{"ruleId":"924","severity":1,"message":"925","line":41,"column":4,"nodeType":"926","messageId":"927","endLine":43,"endColumn":5},{"ruleId":"914","severity":1,"message":"933","line":63,"column":32,"nodeType":"916","messageId":"917","endLine":63,"endColumn":47},{"ruleId":"934","severity":1,"message":"935","line":98,"column":52,"nodeType":"936","messageId":"937","endLine":98,"endColumn":54},{"ruleId":"914","severity":1,"message":"938","line":14,"column":10,"nodeType":"916","messageId":"917","endLine":14,"endColumn":16},{"ruleId":"924","severity":1,"message":"925","line":21,"column":3,"nodeType":"926","messageId":"927","endLine":23,"endColumn":4},{"ruleId":"934","severity":1,"message":"935","line":31,"column":28,"nodeType":"936","messageId":"937","endLine":31,"endColumn":30},{"ruleId":"939","severity":1,"message":"940","line":46,"column":58,"nodeType":"941","messageId":"942","endLine":46,"endColumn":60},{"ruleId":"939","severity":1,"message":"940","line":46,"column":114,"nodeType":"941","messageId":"942","endLine":46,"endColumn":116},{"ruleId":"943","severity":1,"message":"944","line":67,"column":73,"nodeType":"945","endLine":67,"endColumn":117},{"ruleId":"943","severity":1,"message":"944","line":68,"column":21,"nodeType":"945","endLine":68,"endColumn":66},{"ruleId":"943","severity":1,"message":"944","line":79,"column":73,"nodeType":"945","endLine":79,"endColumn":117},{"ruleId":"943","severity":1,"message":"944","line":80,"column":21,"nodeType":"945","endLine":80,"endColumn":66},{"ruleId":"943","severity":1,"message":"944","line":91,"column":73,"nodeType":"945","endLine":91,"endColumn":117},{"ruleId":"943","severity":1,"message":"944","line":92,"column":21,"nodeType":"945","endLine":92,"endColumn":66},{"ruleId":"943","severity":1,"message":"944","line":103,"column":73,"nodeType":"945","endLine":103,"endColumn":117},{"ruleId":"943","severity":1,"message":"944","line":104,"column":21,"nodeType":"945","endLine":104,"endColumn":66},{"ruleId":"943","severity":1,"message":"944","line":115,"column":73,"nodeType":"945","endLine":115,"endColumn":117},{"ruleId":"943","severity":1,"message":"944","line":116,"column":21,"nodeType":"945","endLine":116,"endColumn":66},{"ruleId":"943","severity":1,"message":"944","line":127,"column":73,"nodeType":"945","endLine":127,"endColumn":117},{"ruleId":"943","severity":1,"message":"944","line":128,"column":21,"nodeType":"945","endLine":128,"endColumn":66},{"ruleId":"943","severity":1,"message":"944","line":137,"column":15,"nodeType":"945","endLine":137,"endColumn":106},{"ruleId":"943","severity":1,"message":"944","line":141,"column":15,"nodeType":"945","endLine":141,"endColumn":106},{"ruleId":"943","severity":1,"message":"944","line":144,"column":15,"nodeType":"945","endLine":144,"endColumn":106},{"ruleId":"943","severity":1,"message":"944","line":147,"column":15,"nodeType":"945","endLine":147,"endColumn":106},{"ruleId":"943","severity":1,"message":"944","line":150,"column":15,"nodeType":"945","endLine":150,"endColumn":108},{"ruleId":"943","severity":1,"message":"944","line":152,"column":13,"nodeType":"945","endLine":152,"endColumn":65},{"ruleId":"943","severity":1,"message":"944","line":153,"column":13,"nodeType":"945","endLine":153,"endColumn":65},{"ruleId":"914","severity":1,"message":"922","line":1,"column":17,"nodeType":"916","messageId":"917","endLine":1,"endColumn":25},{"ruleId":"914","severity":1,"message":"946","line":13,"column":8,"nodeType":"916","messageId":"917","endLine":13,"endColumn":23},{"ruleId":"924","severity":1,"message":"925","line":39,"column":3,"nodeType":"926","messageId":"927","endLine":41,"endColumn":4},{"ruleId":"934","severity":1,"message":"935","line":49,"column":32,"nodeType":"936","messageId":"937","endLine":49,"endColumn":34},{"ruleId":"934","severity":1,"message":"935","line":126,"column":31,"nodeType":"936","messageId":"937","endLine":126,"endColumn":33},{"ruleId":"914","severity":1,"message":"947","line":137,"column":7,"nodeType":"916","messageId":"917","endLine":137,"endColumn":15},{"ruleId":"934","severity":1,"message":"935","line":137,"column":40,"nodeType":"936","messageId":"937","endLine":137,"endColumn":42},{"ruleId":"948","severity":1,"message":"949","line":160,"column":15,"nodeType":"945","endLine":160,"endColumn":26},{"ruleId":"950","severity":1,"message":"951","line":166,"column":17,"nodeType":"945","endLine":166,"endColumn":48},{"ruleId":"950","severity":1,"message":"951","line":172,"column":17,"nodeType":"945","endLine":172,"endColumn":48},{"ruleId":"950","severity":1,"message":"951","line":178,"column":17,"nodeType":"945","endLine":178,"endColumn":48},{"ruleId":"950","severity":1,"message":"951","line":184,"column":17,"nodeType":"945","endLine":184,"endColumn":48},{"ruleId":"934","severity":1,"message":"935","line":257,"column":39,"nodeType":"936","messageId":"937","endLine":257,"endColumn":41},{"ruleId":"934","severity":1,"message":"952","line":265,"column":47,"nodeType":"936","messageId":"937","endLine":265,"endColumn":49},{"ruleId":"934","severity":1,"message":"952","line":290,"column":39,"nodeType":"936","messageId":"937","endLine":290,"endColumn":41},{"ruleId":"934","severity":1,"message":"952","line":313,"column":47,"nodeType":"936","messageId":"937","endLine":313,"endColumn":49},{"ruleId":"939","severity":1,"message":"940","line":378,"column":62,"nodeType":"941","messageId":"942","endLine":378,"endColumn":64},{"ruleId":"939","severity":1,"message":"940","line":385,"column":48,"nodeType":"941","messageId":"942","endLine":385,"endColumn":50},{"ruleId":"934","severity":1,"message":"952","line":434,"column":51,"nodeType":"936","messageId":"937","endLine":434,"endColumn":53},{"ruleId":"934","severity":1,"message":"952","line":446,"column":57,"nodeType":"936","messageId":"937","endLine":446,"endColumn":59},{"ruleId":"934","severity":1,"message":"952","line":469,"column":53,"nodeType":"936","messageId":"937","endLine":469,"endColumn":55},{"ruleId":"943","severity":1,"message":"944","line":494,"column":13,"nodeType":"945","endLine":494,"endColumn":51},{"ruleId":"943","severity":1,"message":"944","line":522,"column":13,"nodeType":"945","endLine":522,"endColumn":51},{"ruleId":"939","severity":1,"message":"940","line":579,"column":45,"nodeType":"941","messageId":"942","endLine":579,"endColumn":47},{"ruleId":"939","severity":1,"message":"940","line":579,"column":75,"nodeType":"941","messageId":"942","endLine":579,"endColumn":77},{"ruleId":"924","severity":1,"message":"925","line":13,"column":5,"nodeType":"926","messageId":"927","endLine":15,"endColumn":6},{"ruleId":"924","severity":1,"message":"925","line":12,"column":5,"nodeType":"926","messageId":"927","endLine":14,"endColumn":6},{"ruleId":"914","severity":1,"message":"953","line":42,"column":10,"nodeType":"916","messageId":"917","endLine":42,"endColumn":18},{"ruleId":"914","severity":1,"message":"954","line":45,"column":8,"nodeType":"916","messageId":"917","endLine":45,"endColumn":21},{"ruleId":"924","severity":1,"message":"925","line":113,"column":3,"nodeType":"926","messageId":"927","endLine":115,"endColumn":4},{"ruleId":"934","severity":1,"message":"952","line":206,"column":45,"nodeType":"936","messageId":"937","endLine":206,"endColumn":47},{"ruleId":"934","severity":1,"message":"935","line":209,"column":24,"nodeType":"936","messageId":"937","endLine":209,"endColumn":26},{"ruleId":"955","severity":1,"message":"956","line":372,"column":26,"nodeType":"936","messageId":"957","endLine":372,"endColumn":27},{"ruleId":"955","severity":1,"message":"956","line":372,"column":63,"nodeType":"936","messageId":"957","endLine":372,"endColumn":64},{"ruleId":"934","severity":1,"message":"952","line":380,"column":39,"nodeType":"936","messageId":"937","endLine":380,"endColumn":41},{"ruleId":"943","severity":1,"message":"944","line":748,"column":15,"nodeType":"945","endLine":748,"endColumn":69},{"ruleId":"943","severity":1,"message":"944","line":750,"column":35,"nodeType":"945","endLine":750,"endColumn":62},{"ruleId":"914","severity":1,"message":"958","line":14,"column":3,"nodeType":"916","messageId":"917","endLine":14,"endColumn":8},{"ruleId":"924","severity":1,"message":"925","line":49,"column":3,"nodeType":"926","messageId":"927","endLine":51,"endColumn":4},{"ruleId":"934","severity":1,"message":"952","line":102,"column":16,"nodeType":"936","messageId":"937","endLine":102,"endColumn":18},{"ruleId":"934","severity":1,"message":"952","line":318,"column":14,"nodeType":"936","messageId":"937","endLine":318,"endColumn":16},{"ruleId":"934","severity":1,"message":"952","line":320,"column":21,"nodeType":"936","messageId":"937","endLine":320,"endColumn":23},{"ruleId":"943","severity":1,"message":"944","line":349,"column":17,"nodeType":"945","endLine":356,"endColumn":19},{"ruleId":"934","severity":1,"message":"952","line":523,"column":53,"nodeType":"936","messageId":"937","endLine":523,"endColumn":55},{"ruleId":"943","severity":1,"message":"944","line":529,"column":29,"nodeType":"945","endLine":529,"endColumn":59},{"ruleId":"943","severity":1,"message":"944","line":580,"column":15,"nodeType":"945","endLine":580,"endColumn":49},{"ruleId":"914","severity":1,"message":"958","line":3,"column":96,"nodeType":"916","messageId":"917","endLine":3,"endColumn":101},{"ruleId":"914","severity":1,"message":"959","line":5,"column":18,"nodeType":"916","messageId":"917","endLine":5,"endColumn":27},{"ruleId":"914","severity":1,"message":"960","line":15,"column":8,"nodeType":"916","messageId":"917","endLine":15,"endColumn":26},{"ruleId":"914","severity":1,"message":"961","line":23,"column":7,"nodeType":"916","messageId":"917","endLine":23,"endColumn":26},{"ruleId":"914","severity":1,"message":"962","line":80,"column":7,"nodeType":"916","messageId":"917","endLine":80,"endColumn":25},{"ruleId":"914","severity":1,"message":"963","line":101,"column":15,"nodeType":"916","messageId":"917","endLine":101,"endColumn":20},{"ruleId":"914","severity":1,"message":"964","line":108,"column":21,"nodeType":"916","messageId":"917","endLine":108,"endColumn":27},{"ruleId":"914","severity":1,"message":"965","line":108,"column":29,"nodeType":"916","messageId":"917","endLine":108,"endColumn":36},{"ruleId":"934","severity":1,"message":"935","line":155,"column":39,"nodeType":"936","messageId":"937","endLine":155,"endColumn":41},{"ruleId":"939","severity":1,"message":"940","line":156,"column":57,"nodeType":"941","messageId":"942","endLine":156,"endColumn":59},{"ruleId":"939","severity":1,"message":"940","line":156,"column":177,"nodeType":"941","messageId":"942","endLine":156,"endColumn":179},{"ruleId":"934","severity":1,"message":"935","line":159,"column":40,"nodeType":"936","messageId":"937","endLine":159,"endColumn":42},{"ruleId":"939","severity":1,"message":"940","line":160,"column":49,"nodeType":"941","messageId":"942","endLine":160,"endColumn":51},{"ruleId":"939","severity":1,"message":"940","line":160,"column":157,"nodeType":"941","messageId":"942","endLine":160,"endColumn":159},{"ruleId":"934","severity":1,"message":"935","line":162,"column":39,"nodeType":"936","messageId":"937","endLine":162,"endColumn":41},{"ruleId":"939","severity":1,"message":"940","line":175,"column":59,"nodeType":"941","messageId":"942","endLine":175,"endColumn":61},{"ruleId":"939","severity":1,"message":"940","line":175,"column":90,"nodeType":"941","messageId":"942","endLine":175,"endColumn":92},{"ruleId":"939","severity":1,"message":"940","line":176,"column":61,"nodeType":"941","messageId":"942","endLine":176,"endColumn":63},{"ruleId":"939","severity":1,"message":"940","line":176,"column":93,"nodeType":"941","messageId":"942","endLine":176,"endColumn":95},{"ruleId":"939","severity":1,"message":"940","line":177,"column":64,"nodeType":"941","messageId":"942","endLine":177,"endColumn":66},{"ruleId":"939","severity":1,"message":"940","line":177,"column":99,"nodeType":"941","messageId":"942","endLine":177,"endColumn":101},{"ruleId":"934","severity":1,"message":"952","line":200,"column":80,"nodeType":"936","messageId":"937","endLine":200,"endColumn":82},{"ruleId":"934","severity":1,"message":"935","line":295,"column":107,"nodeType":"936","messageId":"937","endLine":295,"endColumn":109},{"ruleId":"934","severity":1,"message":"935","line":296,"column":143,"nodeType":"936","messageId":"937","endLine":296,"endColumn":145},{"ruleId":"934","severity":1,"message":"935","line":297,"column":140,"nodeType":"936","messageId":"937","endLine":297,"endColumn":142},{"ruleId":"934","severity":1,"message":"952","line":315,"column":127,"nodeType":"936","messageId":"937","endLine":315,"endColumn":129},{"ruleId":"934","severity":1,"message":"952","line":319,"column":91,"nodeType":"936","messageId":"937","endLine":319,"endColumn":93},{"ruleId":"934","severity":1,"message":"952","line":323,"column":123,"nodeType":"936","messageId":"937","endLine":323,"endColumn":125},{"ruleId":"934","severity":1,"message":"952","line":339,"column":109,"nodeType":"936","messageId":"937","endLine":339,"endColumn":111},{"ruleId":"934","severity":1,"message":"952","line":351,"column":83,"nodeType":"936","messageId":"937","endLine":351,"endColumn":85},{"ruleId":"934","severity":1,"message":"952","line":363,"column":65,"nodeType":"936","messageId":"937","endLine":363,"endColumn":67},{"ruleId":"934","severity":1,"message":"952","line":378,"column":71,"nodeType":"936","messageId":"937","endLine":378,"endColumn":73},{"ruleId":"939","severity":1,"message":"940","line":389,"column":54,"nodeType":"941","messageId":"942","endLine":389,"endColumn":56},{"ruleId":"934","severity":1,"message":"952","line":389,"column":116,"nodeType":"936","messageId":"937","endLine":389,"endColumn":118},{"ruleId":"939","severity":1,"message":"940","line":389,"column":124,"nodeType":"941","messageId":"942","endLine":389,"endColumn":126},{"ruleId":"934","severity":1,"message":"952","line":399,"column":50,"nodeType":"936","messageId":"937","endLine":399,"endColumn":52},{"ruleId":"934","severity":1,"message":"952","line":409,"column":51,"nodeType":"936","messageId":"937","endLine":409,"endColumn":53},{"ruleId":"934","severity":1,"message":"952","line":419,"column":39,"nodeType":"936","messageId":"937","endLine":419,"endColumn":41},{"ruleId":"934","severity":1,"message":"952","line":429,"column":21,"nodeType":"936","messageId":"937","endLine":429,"endColumn":23},{"ruleId":"934","severity":1,"message":"952","line":433,"column":26,"nodeType":"936","messageId":"937","endLine":433,"endColumn":28},{"ruleId":"934","severity":1,"message":"952","line":437,"column":26,"nodeType":"936","messageId":"937","endLine":437,"endColumn":28},{"ruleId":"934","severity":1,"message":"952","line":465,"column":108,"nodeType":"936","messageId":"937","endLine":465,"endColumn":110},{"ruleId":"914","severity":1,"message":"966","line":551,"column":56,"nodeType":"916","messageId":"917","endLine":551,"endColumn":65},{"ruleId":"943","severity":1,"message":"944","line":562,"column":33,"nodeType":"945","endLine":562,"endColumn":85},{"ruleId":"934","severity":1,"message":"952","line":593,"column":103,"nodeType":"936","messageId":"937","endLine":593,"endColumn":105},{"ruleId":"934","severity":1,"message":"952","line":593,"column":153,"nodeType":"936","messageId":"937","endLine":593,"endColumn":155},{"ruleId":"934","severity":1,"message":"952","line":599,"column":104,"nodeType":"936","messageId":"937","endLine":599,"endColumn":106},{"ruleId":"934","severity":1,"message":"952","line":599,"column":154,"nodeType":"936","messageId":"937","endLine":599,"endColumn":156},{"ruleId":"934","severity":1,"message":"952","line":618,"column":99,"nodeType":"936","messageId":"937","endLine":618,"endColumn":101},{"ruleId":"934","severity":1,"message":"952","line":618,"column":137,"nodeType":"936","messageId":"937","endLine":618,"endColumn":139},{"ruleId":"934","severity":1,"message":"952","line":623,"column":100,"nodeType":"936","messageId":"937","endLine":623,"endColumn":102},{"ruleId":"934","severity":1,"message":"952","line":623,"column":138,"nodeType":"936","messageId":"937","endLine":623,"endColumn":140},{"ruleId":"939","severity":1,"message":"940","line":670,"column":79,"nodeType":"941","messageId":"942","endLine":670,"endColumn":81},{"ruleId":"939","severity":1,"message":"940","line":670,"column":134,"nodeType":"941","messageId":"942","endLine":670,"endColumn":136},{"ruleId":"934","severity":1,"message":"952","line":820,"column":109,"nodeType":"936","messageId":"937","endLine":820,"endColumn":111},{"ruleId":"934","severity":1,"message":"952","line":820,"column":210,"nodeType":"936","messageId":"937","endLine":820,"endColumn":212},{"ruleId":"934","severity":1,"message":"952","line":821,"column":80,"nodeType":"936","messageId":"937","endLine":821,"endColumn":82},{"ruleId":"943","severity":1,"message":"944","line":845,"column":25,"nodeType":"945","endLine":845,"endColumn":60},{"ruleId":"943","severity":1,"message":"944","line":866,"column":25,"nodeType":"945","endLine":866,"endColumn":59},{"ruleId":"914","severity":1,"message":"967","line":3,"column":8,"nodeType":"916","messageId":"917","endLine":3,"endColumn":21},{"ruleId":"924","severity":1,"message":"925","line":16,"column":5,"nodeType":"926","messageId":"927","endLine":18,"endColumn":6},{"ruleId":"934","severity":1,"message":"935","line":25,"column":35,"nodeType":"936","messageId":"937","endLine":25,"endColumn":37},{"ruleId":"934","severity":1,"message":"935","line":36,"column":47,"nodeType":"936","messageId":"937","endLine":36,"endColumn":49},{"ruleId":"948","severity":1,"message":"949","line":59,"column":31,"nodeType":"945","endLine":59,"endColumn":59},{"ruleId":"950","severity":1,"message":"951","line":61,"column":31,"nodeType":"945","endLine":61,"endColumn":63},{"ruleId":"950","severity":1,"message":"951","line":63,"column":31,"nodeType":"945","endLine":63,"endColumn":63},{"ruleId":"950","severity":1,"message":"951","line":65,"column":31,"nodeType":"945","endLine":65,"endColumn":63},{"ruleId":"950","severity":1,"message":"951","line":67,"column":31,"nodeType":"945","endLine":67,"endColumn":63},{"ruleId":"934","severity":1,"message":"952","line":81,"column":111,"nodeType":"936","messageId":"937","endLine":81,"endColumn":113},{"ruleId":"934","severity":1,"message":"952","line":91,"column":79,"nodeType":"936","messageId":"937","endLine":91,"endColumn":81},{"ruleId":"939","severity":1,"message":"940","line":132,"column":61,"nodeType":"941","messageId":"942","endLine":132,"endColumn":63},{"ruleId":"939","severity":1,"message":"940","line":141,"column":48,"nodeType":"941","messageId":"942","endLine":141,"endColumn":50},{"ruleId":"939","severity":1,"message":"940","line":149,"column":62,"nodeType":"941","messageId":"942","endLine":149,"endColumn":64},{"ruleId":"939","severity":1,"message":"940","line":156,"column":48,"nodeType":"941","messageId":"942","endLine":156,"endColumn":50},{"ruleId":"934","severity":1,"message":"952","line":190,"column":86,"nodeType":"936","messageId":"937","endLine":190,"endColumn":88},{"ruleId":"934","severity":1,"message":"952","line":196,"column":119,"nodeType":"936","messageId":"937","endLine":196,"endColumn":121},{"ruleId":"934","severity":1,"message":"952","line":210,"column":86,"nodeType":"936","messageId":"937","endLine":210,"endColumn":88},{"ruleId":"924","severity":1,"message":"925","line":11,"column":5,"nodeType":"926","messageId":"927","endLine":13,"endColumn":6},{"ruleId":"948","severity":1,"message":"968","line":30,"column":9,"nodeType":"945","endLine":30,"endColumn":12},{"ruleId":"914","severity":1,"message":"969","line":8,"column":27,"nodeType":"916","messageId":"917","endLine":8,"endColumn":46},{"ruleId":"924","severity":1,"message":"925","line":21,"column":5,"nodeType":"926","messageId":"927","endLine":23,"endColumn":6},{"ruleId":"943","severity":1,"message":"944","line":43,"column":33,"nodeType":"945","endLine":43,"endColumn":75},{"ruleId":"914","severity":1,"message":"970","line":16,"column":8,"nodeType":"916","messageId":"917","endLine":16,"endColumn":14},{"ruleId":"971","severity":1,"message":"972","line":64,"column":44,"nodeType":"973","messageId":"974","endLine":64,"endColumn":46},{"ruleId":"943","severity":1,"message":"944","line":138,"column":19,"nodeType":"945","endLine":138,"endColumn":42},{"ruleId":"924","severity":1,"message":"925","line":164,"column":3,"nodeType":"926","messageId":"927","endLine":166,"endColumn":4},{"ruleId":"934","severity":1,"message":"935","line":176,"column":25,"nodeType":"936","messageId":"937","endLine":176,"endColumn":27},{"ruleId":"934","severity":1,"message":"952","line":182,"column":41,"nodeType":"936","messageId":"937","endLine":182,"endColumn":43},{"ruleId":"934","severity":1,"message":"952","line":266,"column":22,"nodeType":"936","messageId":"937","endLine":266,"endColumn":24},{"ruleId":"934","severity":1,"message":"952","line":271,"column":34,"nodeType":"936","messageId":"937","endLine":271,"endColumn":36},{"ruleId":"914","severity":1,"message":"975","line":289,"column":19,"nodeType":"916","messageId":"917","endLine":289,"endColumn":23},{"ruleId":"934","severity":1,"message":"935","line":296,"column":45,"nodeType":"936","messageId":"937","endLine":296,"endColumn":47},{"ruleId":"934","severity":1,"message":"935","line":307,"column":49,"nodeType":"936","messageId":"937","endLine":307,"endColumn":51},{"ruleId":"934","severity":1,"message":"952","line":343,"column":64,"nodeType":"936","messageId":"937","endLine":343,"endColumn":66},{"ruleId":"934","severity":1,"message":"952","line":390,"column":62,"nodeType":"936","messageId":"937","endLine":390,"endColumn":64},{"ruleId":"948","severity":1,"message":"968","line":523,"column":25,"nodeType":"945","endLine":523,"endColumn":28},{"ruleId":"934","severity":1,"message":"935","line":543,"column":49,"nodeType":"936","messageId":"937","endLine":543,"endColumn":51},{"ruleId":"914","severity":1,"message":"976","line":578,"column":11,"nodeType":"916","messageId":"917","endLine":578,"endColumn":16},{"ruleId":"914","severity":1,"message":"977","line":582,"column":11,"nodeType":"916","messageId":"917","endLine":582,"endColumn":20},{"ruleId":"914","severity":1,"message":"978","line":5,"column":8,"nodeType":"916","messageId":"917","endLine":5,"endColumn":14},{"ruleId":"914","severity":1,"message":"979","line":6,"column":8,"nodeType":"916","messageId":"917","endLine":6,"endColumn":14},{"ruleId":"914","severity":1,"message":"980","line":7,"column":8,"nodeType":"916","messageId":"917","endLine":7,"endColumn":14},{"ruleId":"914","severity":1,"message":"981","line":8,"column":8,"nodeType":"916","messageId":"917","endLine":8,"endColumn":14},{"ruleId":"924","severity":1,"message":"925","line":24,"column":5,"nodeType":"926","messageId":"927","endLine":26,"endColumn":6},{"ruleId":"939","severity":1,"message":"940","line":98,"column":49,"nodeType":"941","messageId":"942","endLine":98,"endColumn":51},{"ruleId":"939","severity":1,"message":"940","line":98,"column":79,"nodeType":"941","messageId":"942","endLine":98,"endColumn":81},{"ruleId":"914","severity":1,"message":"982","line":34,"column":30,"nodeType":"916","messageId":"917","endLine":34,"endColumn":40},{"ruleId":"943","severity":1,"message":"944","line":40,"column":29,"nodeType":"945","endLine":40,"endColumn":82},{"ruleId":"914","severity":1,"message":"983","line":4,"column":10,"nodeType":"916","messageId":"917","endLine":4,"endColumn":13},{"ruleId":"914","severity":1,"message":"984","line":15,"column":8,"nodeType":"916","messageId":"917","endLine":15,"endColumn":32},{"ruleId":"939","severity":1,"message":"940","line":226,"column":48,"nodeType":"941","messageId":"942","endLine":226,"endColumn":50},{"ruleId":"939","severity":1,"message":"940","line":226,"column":87,"nodeType":"941","messageId":"942","endLine":226,"endColumn":89},{"ruleId":"939","severity":1,"message":"940","line":227,"column":48,"nodeType":"941","messageId":"942","endLine":227,"endColumn":50},{"ruleId":"939","severity":1,"message":"940","line":227,"column":88,"nodeType":"941","messageId":"942","endLine":227,"endColumn":90},{"ruleId":"971","severity":1,"message":"985","line":239,"column":69,"nodeType":"973","messageId":"986","endLine":239,"endColumn":71},{"ruleId":"934","severity":1,"message":"935","line":241,"column":74,"nodeType":"936","messageId":"937","endLine":241,"endColumn":76},{"ruleId":"943","severity":1,"message":"944","line":254,"column":23,"nodeType":"945","endLine":254,"endColumn":49},{"ruleId":"971","severity":1,"message":"985","line":258,"column":85,"nodeType":"973","messageId":"986","endLine":258,"endColumn":87},{"ruleId":"943","severity":1,"message":"944","line":280,"column":17,"nodeType":"945","endLine":280,"endColumn":61},{"ruleId":"924","severity":1,"message":"925","line":20,"column":5,"nodeType":"926","messageId":"927","endLine":22,"endColumn":6},{"ruleId":"934","severity":1,"message":"935","line":39,"column":55,"nodeType":"936","messageId":"937","endLine":39,"endColumn":57},{"ruleId":"924","severity":1,"message":"925","line":15,"column":5,"nodeType":"926","messageId":"927","endLine":17,"endColumn":6},{"ruleId":"934","severity":1,"message":"935","line":34,"column":55,"nodeType":"936","messageId":"937","endLine":34,"endColumn":57},{"ruleId":"924","severity":1,"message":"925","line":30,"column":5,"nodeType":"926","messageId":"927","endLine":32,"endColumn":6},{"ruleId":"934","severity":1,"message":"935","line":49,"column":55,"nodeType":"936","messageId":"937","endLine":49,"endColumn":57},{"ruleId":"914","severity":1,"message":"922","line":1,"column":16,"nodeType":"916","messageId":"917","endLine":1,"endColumn":24},{"ruleId":"914","severity":1,"message":"987","line":3,"column":43,"nodeType":"916","messageId":"917","endLine":3,"endColumn":53},{"ruleId":"914","severity":1,"message":"988","line":3,"column":55,"nodeType":"916","messageId":"917","endLine":3,"endColumn":62},{"ruleId":"924","severity":1,"message":"925","line":19,"column":5,"nodeType":"926","messageId":"927","endLine":21,"endColumn":6},{"ruleId":"934","severity":1,"message":"935","line":35,"column":34,"nodeType":"936","messageId":"937","endLine":35,"endColumn":36},{"ruleId":"934","severity":1,"message":"935","line":50,"column":49,"nodeType":"936","messageId":"937","endLine":50,"endColumn":51},{"ruleId":"914","severity":1,"message":"922","line":1,"column":16,"nodeType":"916","messageId":"917","endLine":1,"endColumn":24},{"ruleId":"914","severity":1,"message":"987","line":3,"column":43,"nodeType":"916","messageId":"917","endLine":3,"endColumn":53},{"ruleId":"914","severity":1,"message":"988","line":3,"column":55,"nodeType":"916","messageId":"917","endLine":3,"endColumn":62},{"ruleId":"924","severity":1,"message":"925","line":35,"column":5,"nodeType":"926","messageId":"927","endLine":37,"endColumn":6},{"ruleId":"934","severity":1,"message":"935","line":50,"column":30,"nodeType":"936","messageId":"937","endLine":50,"endColumn":32},{"ruleId":"934","severity":1,"message":"935","line":65,"column":51,"nodeType":"936","messageId":"937","endLine":65,"endColumn":53},{"ruleId":"914","severity":1,"message":"946","line":6,"column":8,"nodeType":"916","messageId":"917","endLine":6,"endColumn":23},{"ruleId":"924","severity":1,"message":"925","line":62,"column":5,"nodeType":"926","messageId":"927","endLine":64,"endColumn":6},{"ruleId":"934","severity":1,"message":"935","line":73,"column":27,"nodeType":"936","messageId":"937","endLine":73,"endColumn":29},{"ruleId":"934","severity":1,"message":"935","line":73,"column":76,"nodeType":"936","messageId":"937","endLine":73,"endColumn":78},{"ruleId":"934","severity":1,"message":"935","line":96,"column":55,"nodeType":"936","messageId":"937","endLine":96,"endColumn":57},{"ruleId":"914","severity":1,"message":"947","line":109,"column":13,"nodeType":"916","messageId":"917","endLine":109,"endColumn":21},{"ruleId":"934","severity":1,"message":"935","line":109,"column":47,"nodeType":"936","messageId":"937","endLine":109,"endColumn":49},{"ruleId":"939","severity":1,"message":"940","line":156,"column":30,"nodeType":"941","messageId":"942","endLine":156,"endColumn":32},{"ruleId":"939","severity":1,"message":"940","line":156,"column":49,"nodeType":"941","messageId":"942","endLine":156,"endColumn":51},{"ruleId":"939","severity":1,"message":"940","line":157,"column":29,"nodeType":"941","messageId":"942","endLine":157,"endColumn":31},{"ruleId":"939","severity":1,"message":"940","line":157,"column":46,"nodeType":"941","messageId":"942","endLine":157,"endColumn":48},{"ruleId":"939","severity":1,"message":"940","line":158,"column":25,"nodeType":"941","messageId":"942","endLine":158,"endColumn":27},{"ruleId":"939","severity":1,"message":"940","line":158,"column":39,"nodeType":"941","messageId":"942","endLine":158,"endColumn":41},{"ruleId":"939","severity":1,"message":"940","line":159,"column":25,"nodeType":"941","messageId":"942","endLine":159,"endColumn":27},{"ruleId":"939","severity":1,"message":"940","line":159,"column":39,"nodeType":"941","messageId":"942","endLine":159,"endColumn":41},{"ruleId":"914","severity":1,"message":"989","line":190,"column":7,"nodeType":"916","messageId":"917","endLine":190,"endColumn":16},{"ruleId":"971","severity":1,"message":"972","line":192,"column":54,"nodeType":"973","messageId":"974","endLine":192,"endColumn":56},{"ruleId":"934","severity":1,"message":"952","line":308,"column":57,"nodeType":"936","messageId":"937","endLine":308,"endColumn":59},{"ruleId":"934","severity":1,"message":"935","line":311,"column":45,"nodeType":"936","messageId":"937","endLine":311,"endColumn":47},{"ruleId":"934","severity":1,"message":"935","line":314,"column":54,"nodeType":"936","messageId":"937","endLine":314,"endColumn":56},{"ruleId":"943","severity":1,"message":"944","line":337,"column":23,"nodeType":"945","endLine":339,"endColumn":25},{"ruleId":"939","severity":1,"message":"940","line":338,"column":44,"nodeType":"941","messageId":"942","endLine":338,"endColumn":46},{"ruleId":"939","severity":1,"message":"940","line":338,"column":63,"nodeType":"941","messageId":"942","endLine":338,"endColumn":65},{"ruleId":"948","severity":1,"message":"949","line":348,"column":25,"nodeType":"945","endLine":348,"endColumn":126},{"ruleId":"943","severity":1,"message":"944","line":363,"column":23,"nodeType":"945","endLine":365,"endColumn":25},{"ruleId":"939","severity":1,"message":"940","line":364,"column":44,"nodeType":"941","messageId":"942","endLine":364,"endColumn":46},{"ruleId":"939","severity":1,"message":"940","line":364,"column":63,"nodeType":"941","messageId":"942","endLine":364,"endColumn":65},{"ruleId":"939","severity":1,"message":"940","line":441,"column":53,"nodeType":"941","messageId":"942","endLine":441,"endColumn":55},{"ruleId":"939","severity":1,"message":"940","line":441,"column":83,"nodeType":"941","messageId":"942","endLine":441,"endColumn":85},{"ruleId":"939","severity":1,"message":"940","line":442,"column":60,"nodeType":"941","messageId":"942","endLine":442,"endColumn":62},{"ruleId":"939","severity":1,"message":"940","line":442,"column":96,"nodeType":"941","messageId":"942","endLine":442,"endColumn":98},{"ruleId":"924","severity":1,"message":"925","line":10,"column":5,"nodeType":"926","messageId":"927","endLine":12,"endColumn":6},{"ruleId":"943","severity":1,"message":"944","line":23,"column":25,"nodeType":"945","endLine":23,"endColumn":46},{"ruleId":"943","severity":1,"message":"944","line":24,"column":25,"nodeType":"945","endLine":24,"endColumn":46},{"ruleId":"943","severity":1,"message":"944","line":25,"column":25,"nodeType":"945","endLine":25,"endColumn":46},{"ruleId":"943","severity":1,"message":"944","line":26,"column":25,"nodeType":"945","endLine":26,"endColumn":46},{"ruleId":"943","severity":1,"message":"944","line":27,"column":25,"nodeType":"945","endLine":27,"endColumn":46},{"ruleId":"943","severity":1,"message":"944","line":34,"column":25,"nodeType":"945","endLine":34,"endColumn":72},{"ruleId":"943","severity":1,"message":"944","line":37,"column":25,"nodeType":"945","endLine":37,"endColumn":72},{"ruleId":"943","severity":1,"message":"944","line":40,"column":25,"nodeType":"945","endLine":40,"endColumn":72},{"ruleId":"943","severity":1,"message":"944","line":43,"column":25,"nodeType":"945","endLine":43,"endColumn":72},{"ruleId":"943","severity":1,"message":"944","line":46,"column":25,"nodeType":"945","endLine":46,"endColumn":72},{"ruleId":"943","severity":1,"message":"944","line":51,"column":25,"nodeType":"945","endLine":51,"endColumn":72},{"ruleId":"924","severity":1,"message":"925","line":13,"column":5,"nodeType":"926","messageId":"927","endLine":15,"endColumn":6},{"ruleId":"924","severity":1,"message":"925","line":15,"column":5,"nodeType":"926","messageId":"927","endLine":17,"endColumn":8},{"ruleId":"943","severity":1,"message":"944","line":27,"column":41,"nodeType":"945","endLine":27,"endColumn":84},{"ruleId":"943","severity":1,"message":"944","line":34,"column":47,"nodeType":"945","endLine":34,"endColumn":66},{"ruleId":"943","severity":1,"message":"944","line":36,"column":45,"nodeType":"945","endLine":36,"endColumn":67},{"ruleId":"943","severity":1,"message":"944","line":22,"column":29,"nodeType":"945","endLine":22,"endColumn":71},{"ruleId":"943","severity":1,"message":"944","line":45,"column":29,"nodeType":"945","endLine":45,"endColumn":71},{"ruleId":"950","severity":1,"message":"951","line":52,"column":29,"nodeType":"945","endLine":52,"endColumn":76},{"ruleId":"950","severity":1,"message":"951","line":53,"column":29,"nodeType":"945","endLine":53,"endColumn":81},{"ruleId":"950","severity":1,"message":"951","line":54,"column":29,"nodeType":"945","endLine":54,"endColumn":81},{"ruleId":"948","severity":1,"message":"949","line":55,"column":29,"nodeType":"945","endLine":55,"endColumn":58},{"ruleId":"990","severity":1,"message":"991","line":55,"column":37,"nodeType":"992","messageId":"993","endLine":55,"endColumn":57},{"ruleId":"948","severity":1,"message":"949","line":56,"column":29,"nodeType":"945","endLine":56,"endColumn":58},{"ruleId":"990","severity":1,"message":"991","line":56,"column":37,"nodeType":"992","messageId":"993","endLine":56,"endColumn":57},{"ruleId":"943","severity":1,"message":"944","line":84,"column":29,"nodeType":"945","endLine":84,"endColumn":71},{"ruleId":"914","severity":1,"message":"994","line":14,"column":10,"nodeType":"916","messageId":"917","endLine":14,"endColumn":18},{"ruleId":"924","severity":1,"message":"925","line":22,"column":5,"nodeType":"926","messageId":"927","endLine":24,"endColumn":8},{"ruleId":"934","severity":1,"message":"935","line":54,"column":34,"nodeType":"936","messageId":"937","endLine":54,"endColumn":36},{"ruleId":"924","severity":1,"message":"925","line":27,"column":5,"nodeType":"926","messageId":"927","endLine":30,"endColumn":6},{"ruleId":"924","severity":1,"message":"925","line":16,"column":7,"nodeType":"926","messageId":"927","endLine":18,"endColumn":8},{"ruleId":"914","severity":1,"message":"995","line":1,"column":10,"nodeType":"916","messageId":"917","endLine":1,"endColumn":18},{"ruleId":"914","severity":1,"message":"996","line":2,"column":10,"nodeType":"916","messageId":"917","endLine":2,"endColumn":23},{"ruleId":"914","severity":1,"message":"997","line":2,"column":25,"nodeType":"916","messageId":"917","endLine":2,"endColumn":30},{"ruleId":"914","severity":1,"message":"998","line":3,"column":10,"nodeType":"916","messageId":"917","endLine":3,"endColumn":21},{"ruleId":"914","severity":1,"message":"999","line":9,"column":10,"nodeType":"916","messageId":"917","endLine":9,"endColumn":19},{"ruleId":"914","severity":1,"message":"1000","line":1,"column":10,"nodeType":"916","messageId":"917","endLine":1,"endColumn":16},{"ruleId":"914","severity":1,"message":"1001","line":7,"column":10,"nodeType":"916","messageId":"917","endLine":7,"endColumn":20},{"ruleId":"914","severity":1,"message":"975","line":442,"column":11,"nodeType":"916","messageId":"917","endLine":442,"endColumn":15},{"ruleId":"971","severity":1,"message":"972","line":459,"column":49,"nodeType":"973","messageId":"974","endLine":459,"endColumn":51},{"ruleId":"971","severity":1,"message":"972","line":518,"column":40,"nodeType":"973","messageId":"974","endLine":518,"endColumn":42},{"ruleId":"914","severity":1,"message":"1002","line":5,"column":50,"nodeType":"916","messageId":"917","endLine":5,"endColumn":54},{"ruleId":"939","severity":1,"message":"940","line":15,"column":40,"nodeType":"941","messageId":"942","endLine":15,"endColumn":42},{"ruleId":"939","severity":1,"message":"940","line":15,"column":111,"nodeType":"941","messageId":"942","endLine":15,"endColumn":113},{"ruleId":"943","severity":1,"message":"944","line":25,"column":17,"nodeType":"945","endLine":25,"endColumn":66},{"ruleId":"939","severity":1,"message":"940","line":25,"column":32,"nodeType":"941","messageId":"942","endLine":25,"endColumn":34},{"ruleId":"939","severity":1,"message":"940","line":25,"column":46,"nodeType":"941","messageId":"942","endLine":25,"endColumn":48},{"ruleId":"939","severity":1,"message":"940","line":31,"column":29,"nodeType":"941","messageId":"942","endLine":31,"endColumn":31},{"ruleId":"939","severity":1,"message":"940","line":31,"column":48,"nodeType":"941","messageId":"942","endLine":31,"endColumn":50},{"ruleId":"939","severity":1,"message":"940","line":31,"column":62,"nodeType":"941","messageId":"942","endLine":31,"endColumn":64},{"ruleId":"939","severity":1,"message":"940","line":31,"column":80,"nodeType":"941","messageId":"942","endLine":31,"endColumn":82},{"ruleId":"914","severity":1,"message":"1003","line":9,"column":8,"nodeType":"916","messageId":"917","endLine":9,"endColumn":20},{"ruleId":"914","severity":1,"message":"1004","line":2,"column":80,"nodeType":"916","messageId":"917","endLine":2,"endColumn":100},{"ruleId":"914","severity":1,"message":"1001","line":6,"column":10,"nodeType":"916","messageId":"917","endLine":6,"endColumn":20},{"ruleId":"914","severity":1,"message":"1005","line":20,"column":50,"nodeType":"916","messageId":"917","endLine":20,"endColumn":72},{"ruleId":"1006","severity":1,"message":"1007","line":64,"column":22,"nodeType":"1008","messageId":"1009","endLine":64,"endColumn":59},{"ruleId":"914","severity":1,"message":"1010","line":94,"column":25,"nodeType":"916","messageId":"917","endLine":94,"endColumn":46},{"ruleId":"934","severity":1,"message":"952","line":125,"column":25,"nodeType":"936","messageId":"937","endLine":125,"endColumn":27},{"ruleId":"914","severity":1,"message":"1010","line":184,"column":25,"nodeType":"916","messageId":"917","endLine":184,"endColumn":46},{"ruleId":"914","severity":1,"message":"1011","line":2,"column":8,"nodeType":"916","messageId":"917","endLine":2,"endColumn":14},{"ruleId":"914","severity":1,"message":"962","line":9,"column":5,"nodeType":"916","messageId":"917","endLine":9,"endColumn":23},{"ruleId":"914","severity":1,"message":"1012","line":1,"column":11,"nodeType":"916","messageId":"917","endLine":1,"endColumn":26},{"ruleId":"914","severity":1,"message":"1004","line":2,"column":10,"nodeType":"916","messageId":"917","endLine":2,"endColumn":30},{"ruleId":"914","severity":1,"message":"1013","line":1,"column":10,"nodeType":"916","messageId":"917","endLine":1,"endColumn":19},{"ruleId":"914","severity":1,"message":"1014","line":1,"column":21,"nodeType":"916","messageId":"917","endLine":1,"endColumn":32},{"ruleId":"914","severity":1,"message":"1015","line":2,"column":10,"nodeType":"916","messageId":"917","endLine":2,"endColumn":17},{"ruleId":"914","severity":1,"message":"997","line":1,"column":11,"nodeType":"916","messageId":"917","endLine":1,"endColumn":16},{"ruleId":"914","severity":1,"message":"1015","line":9,"column":10,"nodeType":"916","messageId":"917","endLine":9,"endColumn":17},{"ruleId":"914","severity":1,"message":"1001","line":1,"column":11,"nodeType":"916","messageId":"917","endLine":1,"endColumn":21},{"ruleId":"914","severity":1,"message":"1000","line":1,"column":23,"nodeType":"916","messageId":"917","endLine":1,"endColumn":29},{"ruleId":"914","severity":1,"message":"1016","line":1,"column":31,"nodeType":"916","messageId":"917","endLine":1,"endColumn":45},{"ruleId":"914","severity":1,"message":"1017","line":1,"column":47,"nodeType":"916","messageId":"917","endLine":1,"endColumn":57},{"ruleId":"914","severity":1,"message":"1012","line":1,"column":11,"nodeType":"916","messageId":"917","endLine":1,"endColumn":26},{"ruleId":"914","severity":1,"message":"1015","line":1,"column":10,"nodeType":"916","messageId":"917","endLine":1,"endColumn":17},{"ruleId":"914","severity":1,"message":"1012","line":1,"column":11,"nodeType":"916","messageId":"917","endLine":1,"endColumn":26},{"ruleId":"914","severity":1,"message":"999","line":1,"column":10,"nodeType":"916","messageId":"917","endLine":1,"endColumn":19},{"ruleId":"914","severity":1,"message":"1001","line":1,"column":10,"nodeType":"916","messageId":"917","endLine":1,"endColumn":20},{"ruleId":"914","severity":1,"message":"1000","line":1,"column":22,"nodeType":"916","messageId":"917","endLine":1,"endColumn":28},{"ruleId":"914","severity":1,"message":"1016","line":1,"column":30,"nodeType":"916","messageId":"917","endLine":1,"endColumn":44},{"ruleId":"914","severity":1,"message":"1017","line":1,"column":46,"nodeType":"916","messageId":"917","endLine":1,"endColumn":56},{"ruleId":"914","severity":1,"message":"1004","line":2,"column":49,"nodeType":"916","messageId":"917","endLine":2,"endColumn":69},{"ruleId":"914","severity":1,"message":"1001","line":6,"column":10,"nodeType":"916","messageId":"917","endLine":6,"endColumn":20},{"ruleId":"914","severity":1,"message":"1001","line":6,"column":10,"nodeType":"916","messageId":"917","endLine":6,"endColumn":20},{"ruleId":"914","severity":1,"message":"1018","line":7,"column":21,"nodeType":"916","messageId":"917","endLine":7,"endColumn":35},{"ruleId":"914","severity":1,"message":"1019","line":8,"column":10,"nodeType":"916","messageId":"917","endLine":8,"endColumn":27},{"ruleId":"914","severity":1,"message":"1000","line":1,"column":10,"nodeType":"916","messageId":"917","endLine":1,"endColumn":16},{"ruleId":"939","severity":1,"message":"940","line":128,"column":45,"nodeType":"941","messageId":"942","endLine":128,"endColumn":47},{"ruleId":"939","severity":1,"message":"940","line":128,"column":63,"nodeType":"941","messageId":"942","endLine":128,"endColumn":65},{"ruleId":"939","severity":1,"message":"940","line":146,"column":45,"nodeType":"941","messageId":"942","endLine":146,"endColumn":47},{"ruleId":"939","severity":1,"message":"940","line":146,"column":66,"nodeType":"941","messageId":"942","endLine":146,"endColumn":68},{"ruleId":"971","severity":1,"message":"972","line":41,"column":66,"nodeType":"973","messageId":"974","endLine":41,"endColumn":68},{"ruleId":"943","severity":1,"message":"944","line":98,"column":37,"nodeType":"945","endLine":98,"endColumn":63},{"ruleId":"943","severity":1,"message":"944","line":101,"column":47,"nodeType":"945","endLine":101,"endColumn":73},{"ruleId":"943","severity":1,"message":"944","line":105,"column":47,"nodeType":"945","endLine":105,"endColumn":73},{"ruleId":"943","severity":1,"message":"944","line":124,"column":41,"nodeType":"945","endLine":124,"endColumn":65},{"ruleId":"934","severity":1,"message":"952","line":135,"column":61,"nodeType":"936","messageId":"937","endLine":135,"endColumn":63},{"ruleId":"924","severity":1,"message":"925","line":9,"column":5,"nodeType":"926","messageId":"927","endLine":11,"endColumn":6},{"ruleId":"943","severity":1,"message":"944","line":22,"column":25,"nodeType":"945","endLine":22,"endColumn":46},{"ruleId":"943","severity":1,"message":"944","line":23,"column":25,"nodeType":"945","endLine":23,"endColumn":46},{"ruleId":"943","severity":1,"message":"944","line":24,"column":25,"nodeType":"945","endLine":24,"endColumn":46},{"ruleId":"943","severity":1,"message":"944","line":25,"column":25,"nodeType":"945","endLine":25,"endColumn":46},{"ruleId":"943","severity":1,"message":"944","line":26,"column":25,"nodeType":"945","endLine":26,"endColumn":46},{"ruleId":"943","severity":1,"message":"944","line":36,"column":33,"nodeType":"945","endLine":36,"endColumn":54},{"ruleId":"943","severity":1,"message":"944","line":66,"column":33,"nodeType":"945","endLine":66,"endColumn":54},{"ruleId":"943","severity":1,"message":"944","line":74,"column":33,"nodeType":"945","endLine":74,"endColumn":54},{"ruleId":"914","severity":1,"message":"1020","line":1,"column":27,"nodeType":"916","messageId":"917","endLine":1,"endColumn":36},{"ruleId":"934","severity":1,"message":"935","line":85,"column":24,"nodeType":"936","messageId":"937","endLine":85,"endColumn":26},{"ruleId":"943","severity":1,"message":"944","line":265,"column":11,"nodeType":"945","endLine":265,"endColumn":43},{"ruleId":"934","severity":1,"message":"952","line":298,"column":21,"nodeType":"936","messageId":"937","endLine":298,"endColumn":23},{"ruleId":"934","severity":1,"message":"935","line":298,"column":55,"nodeType":"936","messageId":"937","endLine":298,"endColumn":57},{"ruleId":"934","severity":1,"message":"952","line":300,"column":30,"nodeType":"936","messageId":"937","endLine":300,"endColumn":32},{"ruleId":"934","severity":1,"message":"935","line":309,"column":33,"nodeType":"936","messageId":"937","endLine":309,"endColumn":35},{"ruleId":"934","severity":1,"message":"935","line":317,"column":28,"nodeType":"936","messageId":"937","endLine":317,"endColumn":30},{"ruleId":"934","severity":1,"message":"935","line":340,"column":28,"nodeType":"936","messageId":"937","endLine":340,"endColumn":30},{"ruleId":"943","severity":1,"message":"944","line":351,"column":25,"nodeType":"945","endLine":351,"endColumn":55},{"ruleId":"943","severity":1,"message":"944","line":360,"column":36,"nodeType":"945","endLine":360,"endColumn":69},{"ruleId":"943","severity":1,"message":"944","line":414,"column":27,"nodeType":"945","endLine":414,"endColumn":61},{"ruleId":"934","severity":1,"message":"952","line":487,"column":21,"nodeType":"936","messageId":"937","endLine":487,"endColumn":23},{"ruleId":"934","severity":1,"message":"935","line":487,"column":55,"nodeType":"936","messageId":"937","endLine":487,"endColumn":57},{"ruleId":"934","severity":1,"message":"952","line":489,"column":30,"nodeType":"936","messageId":"937","endLine":489,"endColumn":32},{"ruleId":"934","severity":1,"message":"952","line":500,"column":16,"nodeType":"936","messageId":"937","endLine":500,"endColumn":18},{"ruleId":"934","severity":1,"message":"952","line":502,"column":20,"nodeType":"936","messageId":"937","endLine":502,"endColumn":22},{"ruleId":"934","severity":1,"message":"952","line":504,"column":20,"nodeType":"936","messageId":"937","endLine":504,"endColumn":22},{"ruleId":"934","severity":1,"message":"952","line":513,"column":16,"nodeType":"936","messageId":"937","endLine":513,"endColumn":18},{"ruleId":"934","severity":1,"message":"952","line":515,"column":20,"nodeType":"936","messageId":"937","endLine":515,"endColumn":22},{"ruleId":"934","severity":1,"message":"952","line":517,"column":20,"nodeType":"936","messageId":"937","endLine":517,"endColumn":22},{"ruleId":"934","severity":1,"message":"935","line":536,"column":35,"nodeType":"936","messageId":"937","endLine":536,"endColumn":37},{"ruleId":"943","severity":1,"message":"944","line":548,"column":11,"nodeType":"945","endLine":548,"endColumn":75},{"ruleId":"934","severity":1,"message":"935","line":587,"column":35,"nodeType":"936","messageId":"937","endLine":587,"endColumn":37},{"ruleId":"943","severity":1,"message":"944","line":598,"column":11,"nodeType":"945","endLine":601,"endColumn":13},{"ruleId":"934","severity":1,"message":"935","line":642,"column":35,"nodeType":"936","messageId":"937","endLine":642,"endColumn":37},{"ruleId":"943","severity":1,"message":"944","line":653,"column":11,"nodeType":"945","endLine":653,"endColumn":69},{"ruleId":"934","severity":1,"message":"952","line":707,"column":25,"nodeType":"936","messageId":"937","endLine":707,"endColumn":27},{"ruleId":"934","severity":1,"message":"952","line":715,"column":32,"nodeType":"936","messageId":"937","endLine":715,"endColumn":34},{"ruleId":"934","severity":1,"message":"952","line":725,"column":32,"nodeType":"936","messageId":"937","endLine":725,"endColumn":34},{"ruleId":"924","severity":1,"message":"925","line":752,"column":3,"nodeType":"926","messageId":"927","endLine":754,"endColumn":4},{"ruleId":"934","severity":1,"message":"952","line":758,"column":28,"nodeType":"936","messageId":"937","endLine":758,"endColumn":30},{"ruleId":"934","severity":1,"message":"952","line":760,"column":35,"nodeType":"936","messageId":"937","endLine":760,"endColumn":37},{"ruleId":"934","severity":1,"message":"952","line":762,"column":35,"nodeType":"936","messageId":"937","endLine":762,"endColumn":37},{"ruleId":"934","severity":1,"message":"935","line":772,"column":27,"nodeType":"936","messageId":"937","endLine":772,"endColumn":29},{"ruleId":"934","severity":1,"message":"935","line":775,"column":29,"nodeType":"936","messageId":"937","endLine":775,"endColumn":31},{"ruleId":"934","severity":1,"message":"952","line":798,"column":17,"nodeType":"936","messageId":"937","endLine":798,"endColumn":19},{"ruleId":"914","severity":1,"message":"1021","line":825,"column":20,"nodeType":"916","messageId":"917","endLine":825,"endColumn":31},{"ruleId":"914","severity":1,"message":"1022","line":825,"column":33,"nodeType":"916","messageId":"917","endLine":825,"endColumn":46},{"ruleId":"914","severity":1,"message":"1023","line":4,"column":8,"nodeType":"916","messageId":"917","endLine":4,"endColumn":18},{"ruleId":"914","severity":1,"message":"1024","line":5,"column":10,"nodeType":"916","messageId":"917","endLine":5,"endColumn":15},{"ruleId":"914","severity":1,"message":"1025","line":18,"column":17,"nodeType":"916","messageId":"917","endLine":18,"endColumn":23},{"ruleId":"934","severity":1,"message":"952","line":26,"column":73,"nodeType":"936","messageId":"937","endLine":26,"endColumn":75},{"ruleId":"939","severity":1,"message":"940","line":38,"column":142,"nodeType":"941","messageId":"942","endLine":38,"endColumn":144},{"ruleId":"939","severity":1,"message":"940","line":38,"column":149,"nodeType":"941","messageId":"942","endLine":38,"endColumn":151},{"ruleId":"1026","severity":1,"message":"1027","line":39,"column":7,"nodeType":"1028","endLine":39,"endColumn":26,"suggestions":"1029"},{"ruleId":"943","severity":1,"message":"944","line":56,"column":45,"nodeType":"945","endLine":56,"endColumn":69},{"ruleId":"934","severity":1,"message":"952","line":34,"column":21,"nodeType":"936","messageId":"937","endLine":34,"endColumn":23},{"ruleId":"943","severity":1,"message":"944","line":75,"column":21,"nodeType":"945","endLine":75,"endColumn":54},"@typescript-eslint/no-unused-vars","'LoadercScreen' is defined but never used.","Identifier","unusedVar","no-native-reassign",["1030"],"no-negated-in-lhs",["1031"],"'useState' is defined but never used.","'FC' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'match' is defined but never used.","'MyNetworkPage' is defined but never used.","'isAuthenticated' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'render' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FooterDashboard' is defined but never used.","'isPaused' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","Expected '===' and instead saw '=='.","'ReactMic' is defined but never used.","'AudioRecorder' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Toast' is defined but never used.","'ValueType' is defined but never used.","'PlacesAutocomplete' is defined but never used.","'options2' is assigned a value but never used.","'windowObj' is assigned a value but never used.","'place' is assigned a value but never used.","'status' is assigned a value but never used.","'results' is assigned a value but never used.","'tripAdded' is assigned a value but never used.","'audioProfile1' is defined but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'notificationFailure' is defined but never used.","'moment' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'user' is assigned a value but never used.","'IUser' is defined but never used.","'RootState' is defined but never used.","'audio2' is defined but never used.","'audio3' is defined but never used.","'audio4' is defined but never used.","'audio5' is defined but never used.","'userDetail' is assigned a value but never used.","'Row' is defined but never used.","'GooglePlacesAutocomplete' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'chatPhoto' is assigned a value but never used.","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'homeData' is defined but never used.","'dispatch' is defined but never used.","'TrackResponse' is defined but never used.","'Track' is defined but never used.","'IUserDetail' is defined but never used.","'IHomeItem' is defined but never used.","'IGenre' is defined but never used.","'IExpertise' is defined but never used.","'User' is defined but never used.","'Subscription' is defined but never used.","'MasterDataActionType' is defined but never used.","'getCurrentConversation' is defined but never used.","@typescript-eslint/consistent-type-assertions","Use 'as any' instead of '<any>'.","TSTypeAssertion","as","'currentConversationId' is assigned a value but never used.","'Config' is defined but never used.","'IMasterDataAuth' is defined but never used.","'discovery' is defined but never used.","'recommended' is defined but never used.","'boolean' is defined but never used.","'IExpertiseItem' is defined but never used.","'IGenreItem' is defined but never used.","'IHowItWorkItem' is defined but never used.","'HOWITWORK_FAILURE' is defined but never used.","'useEffect' is defined but never used.","'projectList' is assigned a value but never used.","'myNetworkList' is assigned a value but never used.","'profileImg' is defined but never used.","'toast' is defined but never used.","'setKey' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'key' and 'props.selectedCollaborator'. Either include them or remove the dependency array. If 'setCollaborator' needs the current value of 'props.selectedCollaborator', you can also switch to useReducer instead of useState and read 'props.selectedCollaborator' in the reducer.","ArrayExpression",["1032"],"no-global-assign","no-unsafe-negation",{"desc":"1033","fix":"1034"},"Update the dependencies array to be: [key, props.connections, props.selectedCollaborator]",{"range":"1035","text":"1036"},[1658,1677],"[key, props.connections, props.selectedCollaborator]"]